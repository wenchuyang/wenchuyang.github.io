<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo进阶使用指南</title>
    <url>/2021/01/09/Hexo%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new title.md</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>分别是新建、更新、预览、同步。</p>
<h1 id="config-yml文件"><a href="#config-yml文件" class="headerlink" title="_config.yml文件"></a>_config.yml文件</h1><p>每个theme会有一个单独的_config.yml文件，用于自定义主题。<br>而你的bolg generator下也会有一个全局的_config.yml文件，用于你自己博客的基础信息配置。可以逐项预览下来，这里只挑一些说。</p>
<h1 id="default-layout"><a href="#default-layout" class="headerlink" title="default_layout"></a>default_layout</h1><p>默认布局，在<code>blog/_config.yml</code>文件里有设置。<br>有三种布局：post, page, draft。<br>其中draft是草稿，不会主动发布到网站，需要手动执行<code>hexo publish &lt;title&gt;</code>进行发布。要把文章存为草稿的话，从_post文件夹移到_draft文件夹。<br>在本地预览的时候，你可以把<code>render_drafts</code>设置为true，或者是<code>hexo server --draft</code>。<br>page是页面，会给你创建文件夹，以及文件夹目录中自动创建一个index.md文件。<br><code>blog/source</code>文件夹内的_post和_draft文件夹是存放你的博客文档的，除了设置默认的layout之外，你还可以在创建文件的时候指定<code>hexo new post/draft test</code>。</p>
<h1 id="categories-amp-tags"><a href="#categories-amp-tags" class="headerlink" title="categories &amp; tags"></a>categories &amp; tags</h1><p>创建完文章之后打开文章，头部一般会有信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo进阶使用指南</span><br><span class="line">date: 2021-01-09 13:31:57</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>你可以在里边加上categories和tags，下面两种方法都可以。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - 计算机</span><br><span class="line">  - 实用</span><br><span class="line">tags: [Hexo, 计算机]</span><br></pre></td></tr></table></figure></p>
<p>如果你只需要一个tag或者一个category可以像这样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: 计算机</span><br><span class="line">tags: </span><br><span class="line">  - Hexo</span><br></pre></td></tr></table></figure></p>
<h1 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h1><p>默认模板。你可以在你的blog generator文件夹下找到<code>Scaffold</code>文件，里面存放的是新建文件时的默认模板。你可以在里边添加或修改一些东西。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo快速搭建博客</title>
    <url>/2018/01/05/GitHub-Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。事实上，你也可以选择上<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a>看教程。利用GitHub+Hexo我们可以快速搭建一个个人博客网站。以下是使用教程。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>&emsp;&emsp;据说windows下极易安装失败，但是我的win10并没有出现什么问题。所以我不知道你们会出现什么问题我也不会解决。<br><br>&emsp;&emsp;如果你的系统里已经安装过Node.js和Git的话，安装Hexo会是一件再简单不过的事情。如果没有安装过的话，请自行百度教程。然后再继续本篇内容。<br><br>&emsp;&emsp;打开git bash，然后运行<code>npm install -g hexo-cli</code>。然后就安装完成了。</p>
<h2 id="在GitHub上建立项目"><a href="#在GitHub上建立项目" class="headerlink" title="在GitHub上建立项目"></a>在GitHub上建立项目</h2><p>在GitHub上建立一个空的repo，名称是[你的用户名.github.io]，比如wenchuyang.github.io。</p>
<h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>是的安装完成之后你需要配置它，依旧用命令行。</p>
<ol>
<li>进入一个安全并且你能找得到的目录，比如<code>cd ~/Desktop</code>。</li>
<li><p>执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  //folder是你自己的文件夹名称，比如hexo init myBlog</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install  //或者简写为 npm i</span><br></pre></td></tr></table></figure>
</li>
<li><p>您可以在_config.yml文件中修改大部分的配置。运行<code>start _config.yml</code>打开该文件，各参数如下。你需要把文件最后一行的type改成<code>type: git</code>，最后一行的后边新增一行，左边与type平齐，加上一行<code>repo: 仓库地址</code>（请将仓库地址改为「你的用户名.github.io」对应的仓库地址）。注意格式。其它请按照你自己的需求更改。<br><img src="https://github.com/wenchuyang/ImagesForMarkdown/blob/809287088929455e79063cdfd6e94f344bc71661/images/703Y%25U0VDZA5@U9YJIT2.png?raw=true" alt></p>
</li>
<li><p>安装git部署插件。<code>npm install hexo-deployer-git --save</code></p>
</li>
<li>部署网站。<code>hexo deploy</code></li>
</ol>
<h2 id="写下你的第一篇blog"><a href="#写下你的第一篇blog" class="headerlink" title="写下你的第一篇blog"></a>写下你的第一篇blog</h2><ol>
<li><code>hexo new 我的第一篇博客</code></li>
<li>复制显示的路径，使用<code>start 路径</code>来编辑它（windows给你显示的路径用的是”\”，你需要手动将其改成”/“才能进入目录。[微笑]）</li>
<li><code>hexo generate</code></li>
<li><code>hexo deploy</code></li>
<li><code>hexo server</code>开启hexo服务，这样你就可以本地预览效果了。</li>
</ol>
<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>我猜你一定不会喜欢它默认的主题，当然如果你无所谓的话请忽略这一步。</p>
<ol>
<li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Hexo主题合集</a>，找一个你喜欢的主题，进入主题的GitHub首页。</li>
<li>复制它的SSH地址，假设地址是<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:iissnan/hexo-theme-next.git</li>
<li><code>cd themes</code>进入themes文件夹。</li>
<li><code>git clone git@github.com:iissnan/hexo-theme-next.git</code>将项目克隆到你的本地themes文件夹</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd .. //退回到上层文件夹</span><br><span class="line">start _config.yml //打开配置文件，将 _config.yml 的第 75 行改为 theme: hexo-theme-next，保存</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>等一分钟，然后刷新你的博客页面。</p>
</li>
</ol>
<h2 id="上传源码"><a href="#上传源码" class="headerlink" title="上传源码"></a>上传源码</h2><p>上边我们建的仓库保存的只是你的博客页面，并没有保存源码。所以如果你误删了这个本地的文件夹…..嗯，为了防止你手抖做出什么可怕的事情，我们需要在GitHub上继续新建一个项目，用来保存生成博客的源码。</p>
<ol>
<li>在GitHub上创建blog-generator空仓库</li>
<li>初始化空仓库，GitHub上有详细的步骤，一步一步来即可。不多说了。<br>温馨提示：你现在所在的目录应该是你的博客目录比如我的是myBlog，push到远程仓库的时候事实上你是将myBlog这整个的文件夹push上去。</li>
<li>以后每次<code>hexo deploy</code>之后博客就会更新，然后你记着add/commit/push将blog-generator同步更新就好了。</li>
</ol>
<h2 id="同时部署到gitee上"><a href="#同时部署到gitee上" class="headerlink" title="同时部署到gitee上"></a>同时部署到gitee上</h2><ol>
<li><p><code>git deploy</code>的时候同时更新github和gitee：<br>在<code>_config.yml</code>文件中仓库地址的位置添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: // 你的github对应的blog仓库地址</span><br><span class="line">- type: git</span><br><span class="line">  repo: // 你的gitee对应的blog仓库地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加公钥，不然会被拒绝访问。</p>
</li>
<li>打开gitee页面预览<br>打开你的仓库代码/服务/Gitee Pages，生成gitee page。<blockquote>
<p>把你的gitee仓库名设置为你的用户名，这样生成的页面url是<code>https://用户名[.gitee.io/</code>，而且不会出现css不生效等系列问题。<a href="https://gitee.com/help/articles/4136#article-header0" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactRouter使用指南</title>
    <url>/2021/03/29/ReactRouter%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>router 是路由，在互联网上，把信息从源地址传输到目的地址的活动。<br>React Router 是一个基于 React 的路由库，帮助我们在解析路由的同时保持页面与 URL 之间的同步。</p>
<h1 id="React-Router-的使用"><a href="#React-Router-的使用" class="headerlink" title="React Router 的使用"></a>React Router 的使用</h1><p><a href="https://codesandbox.io/s/react-router-wmxnl?file=/src/App.js" target="_blank" rel="noopener">一个简单的 tab 页</a></p>
<ol>
<li>引入 react-router-dom 库，因为是在浏览器上的应用，不是 native ，所以引入的是 -dom 库</li>
<li><p>在代码中添加路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; BrowserRouter as Router, Link, Switch, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;</span><br><span class="line">      &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</span><br><span class="line">      &lt;Link to=&quot;/users&quot;&gt;Users&lt;/Link&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route path=&quot;/about&quot;&gt;about&lt;/Route&gt;</span><br><span class="line">      &lt;Route path=&quot;/users&quot;&gt;users&lt;/Route&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot;&gt;home&lt;/Route&gt;</span><br><span class="line">    &lt;/Switch&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure>
<p>实现的效果是点击 nav 中的按钮之后下面的 switch 中会自动显示相应的区域，并且 URL 也会自动添加相应的后缀。而且在修改了 URL 之后，switch 中也会自动变化。</p>
</li>
</ol>
<p>这就是 React Router 帮我们实现的。</p>
<h1 id="自己实现-React-Router-效果"><a href="#自己实现-React-Router-效果" class="headerlink" title="自己实现 React Router 效果"></a>自己实现 React Router 效果</h1><p><a href="https://codesandbox.io/s/tab-qiehuan-8tpdq?file=/src/App.js" target="_blank" rel="noopener">Demo 源码</a></p>
<ol>
<li>创建一个组件，有 nav 区域和 content 区域。</li>
<li>添加 this.state , 然后给 nav 里面的元素添加点击事件来修改 state 的值。</li>
<li><p>给 content 区域添加条件渲染，至此已经完成了一个 tab 切换效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line"> let button = &quot;&quot;;</span><br><span class="line"> switch (this.state.display) &#123;</span><br><span class="line">   case &quot;users&quot;:</span><br><span class="line">     button = &lt;div&gt;users&lt;/div&gt;;</span><br><span class="line">     break;</span><br><span class="line">   case &quot;about&quot;:</span><br><span class="line">     button = &lt;div&gt;about&lt;/div&gt;;</span><br><span class="line">     break;</span><br><span class="line">   default:</span><br><span class="line">     button = &lt;div&gt;home&lt;/div&gt;;</span><br><span class="line"> &#125;</span><br><span class="line"> return (</span><br><span class="line">   &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">     ...</span><br><span class="line">     &lt;div className=&quot;content&quot;&gt;&#123;button&#125;&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，在切换的时候修改 url ，<code>window.location.hash = &quot;about&quot;</code></p>
</li>
<li>通过 <code>window.location.hash</code> 来初始化 this.state.display 的值，从而实现 content 根据 url 的不同而修改。</li>
</ol>
<p>这里使用 window.location.hash 来修改 url ，实际上修改路由还可以用 window.location.pathname 和 window.history.pushState() ,要注意他们的区别：</p>
<ol>
<li><p><code>window.location.hash =</code> the best way, 不会刷新页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.location.hash = &quot;home&quot;</span><br><span class="line">console.log(window.location.hash)  // &quot;#home&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>window.location.pathname =</code>，修改 pathname 的话，相当于改了路径，浏览器会以为你要跳转页面，于是自动刷新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.location.pathname = &quot;home&quot;</span><br><span class="line">console.log(window.location.pathname) // &quot;/home&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>window.history.pushState()</code>, 同样不刷新页面，但是需要后端将 default 路径都指向首页，不然可能会报这个页面不存在。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.history.pushState(null, &quot;&quot;, &quot;home&quot;)</span><br><span class="line">console.log(window.location.pathname) // &quot;/home&quot;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上是不使用 React Router 实现 tab 切换的全过程，React Router 帮我们简化了这个过程。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>react-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Context使用指南</title>
    <url>/2021/03/29/Context%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Context-作用"><a href="#Context-作用" class="headerlink" title="Context 作用"></a>Context 作用</h1><p>Context 用来共享全局数据，避免了使用 props 层层传递。<br>在很多个组件都需要用到同一个变量的时候，可以使用 Context 来设置一个局部的全局变量（只在这一块能用，并且在这一块它是全局变量）。<br>当前认证的用户、主题、首选语言等都可以通过 Context 来传递。</p>
<h1 id="Context-简单使用"><a href="#Context-简单使用" class="headerlink" title="Context 简单使用"></a>Context 简单使用</h1><p><a href="https://codesandbox.io/s/context-s5z6u?file=/src/App.js" target="_blank" rel="noopener">demo</a><br>Context 是 react 提供的，所以在 react 应用中不需要引入额外的包。<br>使用步骤：</p>
<ol>
<li><p>创建并导出一个 context (注意 import 不要引入错了)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">export const SecretContext = React.createContext(&#123;</span><br><span class="line">    secret: &quot;初始化&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Provider 提供数据</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; SecretContext &#125; from &quot;./context.js&quot;;</span><br><span class="line">&lt;SecretContext.Provider value=&#123;&#123; secret: &quot;this is secret&quot; &#125;&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">    &lt;App2 /&gt;</span><br><span class="line">&lt;/SecretContext.Provider&gt;</span><br></pre></td></tr></table></figure>
<p> Provider 中 value 提供的值会在后面子组件中读取值的时候读取到。<br> 这里 value 传的值是一个对象 <code>{secret: &quot;this is secret&quot;}</code>，对象里边可以包含修改这个变量的方法等。</p>
</li>
<li><p>Consumer 获取数据</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; SecretContext &#125; from &quot;./context.js&quot;;</span><br><span class="line">&lt;SecretContext.Consumer&gt;</span><br><span class="line">  &#123;(&#123; secret &#125;) =&gt; &lt;div&gt;我知道秘密: &#123;secret&#125;&lt;/div&gt;&#125;</span><br><span class="line">&lt;/SecretContext.Consumer&gt;</span><br></pre></td></tr></table></figure>
<p> Consumer 获取数据的时候，会从自己往上找，找到了这个 Context 的 Provider 的时候就读取它的值。如果没有 Provider 的话就读取第一步创建 Context 时候的初始值。<br> Consumer 里面是一个函数，函数传入的值是 Provider 提供的值，return 一个 div。<br> 这个函数展开应该是</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(value) =&gt; &#123;</span><br><span class="line">    secret = value.secret // &#123;secret&#125; = value</span><br><span class="line">    return &lt;div&gt;我知道秘密: &#123;secret&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>除了上面的 Consumer ，对于 class 组件，使用 contextType 也可以获取 context 的值。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyClass extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    let &#123;secret&#125; = this.context;</span><br><span class="line">    return (&lt;div&gt;我知道秘密: &#123;secret&#125;&lt;/div&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyClass.contextType = SecretContext;</span><br></pre></td></tr></table></figure></p>
<p>对于函数组件，使用 useContext 可以获取 context 的值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MyComponent() &#123;</span><br><span class="line">  let &#123;secret&#125; = useContext(SecretContext)</span><br><span class="line">  return (&lt;div&gt;我知道秘密: &#123;secret&#125;&lt;/div&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="修改-context-的值"><a href="#修改-context-的值" class="headerlink" title="修改 context 的值"></a>修改 context 的值</h1><p><a href="https://codesandbox.io/s/dongtaicontext-ll0rf?file=/src/App.js" target="_blank" rel="noopener">demo</a><br>我们在父组件中通过 context 传递了一个变量给子组件，如果想要在子组件中修改这个变量，那么可以直接通过 props 给子组件传递一个修改变量的函数，子组件直接调用这个函数即可。<br>但如果层级太深，或者这个函数在很多地方都有用到，显然这个代码就不那么美观了。我们可以直接将修改变量的函数放在 context 里边，然后在需要的组件中获取这个函数。<br>所以，使用 context 传递全局变量，并且这个变量需要修改的话，可以采用以上两种方法。下面分别来介绍一下使用细节。</p>
<h2 id="使用-props-给子组件传递函数修改"><a href="#使用-props-给子组件传递函数修改" class="headerlink" title="使用 props 给子组件传递函数修改"></a>使用 props 给子组件传递函数修改</h2><p>这个方法可以单纯的看做是父子组件通信，因为不论你是否撇开 context ，结论都是一样的。<br>props 是父组件传递给子组件的一些变量，在函数组件中，接收一个参数 props 来获取；而在类组件中，使用 this.props 拿到它。<br>在子组件中，获取父组件传过来的函数 changeTheme ， 并绑定到按钮的点击事件上。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Toolbar(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;button onClick=&#123;props.changeTheme&#125;&gt;&#123;props.children&#125;&lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在父组件中，调用子组件并传值。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      theme: themes.light</span><br><span class="line">    &#125;;</span><br><span class="line">    this.setLightTheme = () =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        theme: themes.light</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;Toolbar changeTheme=&#123;this.setLightTheme&#125;&gt;光明&lt;/Toolbar&gt;   </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果你知道子组件是一个 button ，你甚至可以直接在 Toolbar 上绑定 onClick 事件，然后子组件直接获取所有的 props 从而拿到点击事件。像这样<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;Toolbar onClick=&#123;this.setLightTheme&#125;&gt;光明&lt;/Toolbar&gt;</span><br><span class="line">// 子组件</span><br><span class="line">&lt;button &#123;...props&#125; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>By the way, 其中 props.children 可以获取子节点，因此你可以通过这个直接将孙子组件放到父组件上。比如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;Toolbar&gt;</span><br><span class="line">        &lt;GrandSon onClick=&#123;this.xxx&#125; /&gt;</span><br><span class="line">    &lt;/Toolbar&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>渲染出来就是<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button&gt;</span><br><span class="line">        &lt;GrandSon onClick=&#123;this.xxx&#125; /&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用-Provider-给-Consumer-传递函数修改"><a href="#使用-Provider-给-Consumer-传递函数修改" class="headerlink" title="使用 Provider 给 Consumer 传递函数修改"></a>使用 Provider 给 Consumer 传递函数修改</h2><p>通过 context 的 provider value 来传递变量的同时传递一个改变这个变量的函数。<br>首先创建一个父组件，组件的 state 为 theme 和 setTheme, 然后在 Provider 里把 this.state 传过去。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      theme: themes.light,</span><br><span class="line">      setTheme: () =&gt; &#123;</span><br><span class="line">        this.setState((state) =&gt; (&#123;</span><br><span class="line">          theme: state.theme === themes.dark ? themes.light : themes.dark</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;ThemeContext.Provider value=&#123;this.state&#125;&gt;</span><br><span class="line">          &lt;SetButton&gt;set theme&lt;/SetButton&gt;</span><br><span class="line">        &lt;/ThemeContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>子组件在获取 context 的时候拿到 setTheme 的值，然后将 setTheme 事件绑定到 button 点击事件上。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class SetButton extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    let props = this.props;</span><br><span class="line">    let &#123; setTheme &#125; = this.context;</span><br><span class="line">    return &lt;button onClick=&#123;setTheme&#125;&gt;&#123;props.children&#125;&lt;/button&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">SetButton.contextType = ThemeContext;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>context</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm 的安装使用</title>
    <url>/2022/12/01/nvm%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="nvm-是什么"><a href="#nvm-是什么" class="headerlink" title="nvm 是什么"></a>nvm 是什么</h1><p>node version manager , node 版本管理器，是用来管理 node 版本的，让你可以在你的电脑上同时安装多个 node 版本，如果你不需要使用不同版本的 node ，那么没有必要去安装 nvm。</p>
<h1 id="下载安装-nvm"><a href="#下载安装-nvm" class="headerlink" title="下载安装 nvm"></a>下载安装 nvm</h1><ol>
<li>上<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm 官网</a>下载安装包，指定路径安装，和其他的东西不同的是同时需要指定 node 的安装路径，因为可以通过 nvm 安装 node。</li>
<li>命令行输入 <code>nvm -v</code> 查看 nvm 是否安装成功。</li>
<li>如果上一步发现安装失败，在你的用户目录下新建 <code>.bash_profile</code> 文件：<code>touch ~/.bash_profile</code>。（如果有的话就打开文件。）</li>
<li><p>在 <code>.bash_profile</code> 文件内写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行执行 <code>source ~/.bash_profile</code>，然后再看 nvm 有没有安装成功。</p>
</li>
</ol>
<h1 id="用-nvm-管理-node"><a href="#用-nvm-管理-node" class="headerlink" title="用 nvm 管理 node"></a>用 nvm 管理 node</h1><ol>
<li><code>nvm list</code> 查看已安装的 node。</li>
<li><code>nvm install v18.12.1</code> 安装指定版本的 node。这里在你安装 node 的时候会自动帮你安装对应版本的 npm，如果没有安装的话需要你自己在不同的 node 环境下安装不同版本的 npm。通过 <a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">nodejs 官网</a>你可以找到版本之间的对应关系。yarn 同理，但是我没有找到 yarn 和 node 的版本对应……</li>
<li><code>nvm use 18.12.1</code> 使用指定版本 node，再次 ls 的时候使用的版本前面会带有一个 * 号。这里直接修改可能会报错 <code>exit status 1: Access is denied</code> ，用管理员权限打开命令行即可解决问题。参考这篇<a href="https://sebhastian.com/node-nvm-exit-1-access-denied/" target="_blank" rel="noopener">文章</a>。</li>
</ol>
<h1 id="npm-not-found-的问题"><a href="#npm-not-found-的问题" class="headerlink" title="npm not found 的问题"></a>npm not found 的问题</h1><ol>
<li>打开你的 nvm 安装地址，可以看见有带 node 版本号的文件夹。</li>
<li>打开<a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">node 下载地址</a>，下载你需要的 node 版本。</li>
<li>把你自己下载的 node 解压到对应版本号里面，然后再看你的 <code>npm -v</code> 能不能用。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/jaxu/p/13904018.html" target="_blank" rel="noopener">Windows 上安装 NVM 之后找不到 NPM 的解决办法</a><br><a href="https://titangene.github.io/article/nvm.html" target="_blank" rel="noopener">nvm：安装、切换不同 Node.js 版本的管理器</a></p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Hooks使用指南</title>
    <url>/2021/04/02/Hooks%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="16-8-新增特性"><a href="#16-8-新增特性" class="headerlink" title="16.8 新增特性"></a>16.8 新增特性</h1><p>作用：</p>
<ol>
<li>react 组件分为函数组件和类组件，Hooks 可以让我们在函数组件中使用一些类属性的东西。</li>
<li>使用自定义 hook 可以复用状态逻辑</li>
</ol>
<p>使用规则：</p>
<ol>
<li>只能在函数最外层调用 Hook，不要在循环、条件判断或者子函数中调用。确保每次都以同样的顺序调用。</li>
<li>只能在 React 的函数组件和自定义 Hook 中调用 Hook</li>
</ol>
<h1 id="把-class-组件改造成-function-组件"><a href="#把-class-组件改造成-function-组件" class="headerlink" title="把 class 组件改造成 function 组件"></a>把 class 组件改造成 function 组件</h1><p>class 组件和 function 组件有两大区别，一是有自己的 state ，二是有自己的生命周期。<br>而 Hooks 给我们提供了一些 API，可以让我们在 function 中使用 state 和生命周期。</p>
<h2 id="在-function-组件中使用-state"><a href="#在-function-组件中使用-state" class="headerlink" title="在 function 组件中使用 state"></a>在 function 组件中使用 state</h2><p><a href="https://codesandbox.io/s/usestate-yvt0y?file=/src/App.js" target="_blank" rel="noopener">Demo</a><br>在函数组件中使用 useState 。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;useState&#125; from &quot;react&quot;</span><br><span class="line">function Div() &#123;</span><br><span class="line">  const [a, setA] = useState(0)</span><br><span class="line">  return &lt;div&gt;&#123;a&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码在 Div 里面声明了一个变量 a 和一个 setA 的函数，如果我需要将 a 的值改为 1 ，那么可以直接 <code>setA(1)</code>.<br>其中声明 state 的代码 <code>const [a, setA] = useState(0)</code> 相当于<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const xxx = useState(0) // 返回了一个有两个元素的数组</span><br><span class="line">const a = xxx[0] </span><br><span class="line">const setA = xxx[1]</span><br></pre></td></tr></table></figure></p>
<p>如果我们需要多个元素的话，可以使用多次声明的方法，也可以借助对象来实现。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const [age, setAge] = useState(0)</span><br><span class="line">const [name, setName] = useState(&quot;Cindy&quot;)</span><br><span class="line">// name 获取 name 值</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const [info, setInfo] = useState(&#123;</span><br><span class="line">  age: 0,</span><br><span class="line">  name: &quot;Cindy&quot;</span><br><span class="line">&#125;)</span><br><span class="line">// info.name 获取 name 值</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是在 class 组件中，如果我们使用 <code>this.setState({name: &quot;Wency&quot;})</code> 不会覆盖掉 age 属性，但是在这里会直接覆盖掉。<br>因此我们如果需要覆盖而不是替换，则需要手动重新赋值。这里使用 ES6 的解构可以快速完成：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setInfo(&#123;</span><br><span class="line">  ...info, // 把 info 这个对象里的每一项都列出来</span><br><span class="line">  name: &quot;Wency&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="在-function-组件中使用-lifecycle"><a href="#在-function-组件中使用-lifecycle" class="headerlink" title="在 function 组件中使用 lifecycle"></a>在 function 组件中使用 lifecycle</h2><p>useEffect 几乎可以满足我们的需求。<a href="https://codesandbox.io/s/useeffect-xxhcn?file=/src/App.js" target="_blank" rel="noopener">使用 useEffect 模拟生命周期 demo</a><br>useEffect 在组件每次渲染的时候都会调用，使用方法如下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MyComponent() &#123;</span><br><span class="line">  useEffect(function()&#123;</span><br><span class="line">    console.log(&quot;我被调用了&quot;)</span><br><span class="line">  &#125;)</span><br><span class="line">  return &lt;div&gt;111&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 useEffect 内部返回一个函数的话，这个函数会在下一次更新的时候先运行，然后再运行 useEffect 内部的语句。<br>下面这段代码在函数组件第一次被挂到页面的时候会在控制台输出<code>1</code>。以后一旦组件更新了，会先执行 <code>console.log(0)</code> 再执行 <code>console.log(1)</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MyComponent() &#123;</span><br><span class="line">  useEffect(function()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">    return ()=&gt;&#123;console.log(0)&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return &lt;div&gt;111&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果需要只在组件被卸载的时候执行该语句，那么需要给 useEffect 传入第二个参数 <code>[]</code>。<br>useEffect 的第二个参数指定了哪些数据发生变化的时候执行这个 effect ，比如我想在 name 修改的时候执行 <code>console.log(&quot;I changed my name&quot;)</code> 而 age 发生修改的时候什么都不做，那么只需要传入 <code>[name]</code> 即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">  console.log(&quot;I changed my name&quot;)</span><br><span class="line">&#125;, [name])</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是如果你的函数里面依赖了某些变量，那么这个变量也需要放在数组里。有一种情况需要特别注意：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">  setAge(age=&gt;(age+1))  //setAge(age + 1)  is wrong</span><br><span class="line">&#125;, [name])</span><br></pre></td></tr></table></figure></p>
<p>绝对不要在 setAge 的同时在数组里面添加 age，不然会一直循环调用。</p>
<p>总结：</p>
<ol>
<li><code>useEffect(()=&gt;{...})</code> 在每次渲染之后都会调用</li>
<li><code>useEffect(()=&gt;{...}, [count])</code> 在 count 改变的时候调用</li>
<li><code>useEffect(()=&gt;{...}, [])</code> 仅在组件挂载和卸载时执行</li>
<li><code>useEffect(()=&gt;(()=&gt;{...}), [])</code> 仅在组件卸载时执行</li>
</ol>
<p>在 class 组件中，如果你需要执行一个 subscribe，那么需要在 componentDidMount 里边 subscribe 一下，然后再在 componentWillUnmount 里边 unsubscribe<br>而在使用 useEffect 的情况下，你需要在函数里进行 subscribe, 然后再  return 一个函数执行 unsubscribe。形如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">  xxx.subscribe()</span><br><span class="line">  return ()=&gt;&#123;</span><br><span class="line">    xxx.unsubscribe()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>好处是我们可以根据代码的用途来分离它们。并且每次组件更新的时候会自动 unsubscribe 前面的，然后重新 subscribe。（先清除上一个 effect，再执行这个 effect。）如果是在 class 组件中，则需要通过 componentDidUpdate 来做这件事。</p>
<p>抛开 lifecycle 不谈，所有有副作用的函数或表达式都应该在 useEffect 里面执行。<br>副作用（Side Effect）：函数或者表达式的行为依赖于外部世界</p>
<ol>
<li>函数或者表达式修改了它的 scope 之外的状态</li>
<li>函数或表达式除了返回语句外还与外部世界或者他所调用的函数有明显的交互行为<br>作用：产生了影响<br>副作用：可能产生意料之外的影响<br>比如，我要在一个函数里修改 DOM 元素，正常是没有问题的。但是我有可能找不到这个元素，一旦我找不到这个元素，那么就会有意料之外的报错。这就是副作用。<br>再比如，我在函数内部调用了 <code>console.log(111)</code> ,正常调用这个函数应该会在控制台输出 <code>111</code> 。 但是这个 <code>console.log</code> 函数是别处来的，可能会被篡改，比如 <code>console.log = ()=&gt;{alert(111)}</code> 。此时我的函数执行结果就会是 alert 一个 <code>111</code>。这同样是意料之外的结果。<br>所以一个没有副作用的函数，应该是函数本身的行为不依赖外部世界的函数。数据获取、设置订阅以及手动修改 DOM 都属于副作用。</li>
</ol>
<h1 id="useContext-获取-context-的值"><a href="#useContext-获取-context-的值" class="headerlink" title="useContext 获取 context 的值"></a>useContext 获取 context 的值</h1><p>在函数组件中使用 <code>const theme = useContext(ThemeContext)</code> 来获取 context 的值。<br>在类组件中使用<code>const theme = this.context</code> 来获取 context 的值，需要在 class 外面使用 <code>MyClass.contextType = SecretContext</code> 进行 context 的绑定。</p>
<h1 id="自定义一个-Hook"><a href="#自定义一个-Hook" class="headerlink" title="自定义一个 Hook"></a>自定义一个 Hook</h1><p><a href="https://codesandbox.io/s/zidingyihook-ui7ug?file=/src/App.js" target="_blank" rel="noopener">使用自定义 Hook 模拟 componentDidUpdate</a></p>
<ol>
<li>函数名使用 use 开头，比如 <code>function useDidUpdate(){}</code></li>
<li>自定义 Hook 里面可以使用 react 内置的 Hooks</li>
<li>用来提取可复用的状态逻辑。比如我如果在很多组件中都要用到 componentDidUpdate, 我不想把这个逻辑写很多次，所以就提取出来，封装成一个函数，在各个地方调用。或者我需要写入 localStorage, 封装一个写入的方法，只使用这个方法来调用。</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>react入门使用</title>
    <url>/2021/04/03/react%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>react 的要点在于用 js 仿 html，保留了前端开发习惯的同时几乎把 html 彻底干掉了。<br>在写 js 语句的时候，用的就是 js 语法。<br>而在写 “html” 的时候，用的是 react 提供的语法。<br>这篇文章介绍了在 react 中如何使用 if/else 条件判断，for 循环，内联样式。</p>
<h1 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h1><p><a href="https://codesandbox.io/s/if-4x9og?file=/src/App.js" target="_blank" rel="noopener">demo</a></p>
<ol>
<li>&amp;&amp; <code>return flag &amp;&amp; &lt;div&gt;hello&lt;/div&gt;</code> 。 如果 flag 为真就返回 <code>&lt;div&gt;hello&lt;/div&gt;</code>, 否则返回 false。</li>
<li>冒号表达式 <code>return flag ? &lt;div&gt;hello&lt;/div&gt;: &lt;div&gt;hi&lt;/div&gt;</code> 。 如果 flag 为真就返回 <code>&lt;div&gt;hello&lt;/div&gt;</code> 否则返回 <code>&lt;div&gt;hi&lt;/div&gt;</code>。</li>
<li>直接使用 if-else<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let content = &quot;&quot;</span><br><span class="line">if (flag) &#123;</span><br><span class="line">  content = &lt;div&gt;hello&lt;/div&gt;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  content = &lt;div&gt;hi&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line">return content</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><p><a href="https://codesandbox.io/s/for-sfznv?file=/src/App.js" target="_blank" rel="noopener">demo</a></p>
<ol>
<li><p>创建一个数组，然后将 list 中的每一项裹上 div push 进去，再将这个数组放到页面上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// const infoList = [&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;];</span><br><span class="line">const infoList = [&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;];</span><br><span class="line">function App() &#123;</span><br><span class="line">  const content = [];</span><br><span class="line">  for (let item of infoList) &#123;</span><br><span class="line">    content.push(&lt;div&gt;&#123;item&#125;&lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  return &lt;div className=&quot;App&quot;&gt;&#123;content&#125;&lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// const objList = &#123;&quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot;&#125;</span><br><span class="line">const content = []</span><br><span class="line">for (let key in objList) &#123;</span><br><span class="line">  let item = &lt;div&gt;&#123;key&#125;: &#123;objList[key]&#125;&lt;/div&gt;</span><br><span class="line">  content.push(item)</span><br><span class="line">&#125;</span><br><span class="line">return &lt;&gt;&#123;content&#125;&lt;/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Array.map 实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const content = infoList.map((value) =&gt; &lt;div&gt; &#123;value&#125; &lt;/div&gt;);</span><br><span class="line">return &lt;&gt;&#123;content&#125;&lt;/&gt;;</span><br></pre></td></tr></table></figure>
<p>当然，你也可以把它嵌入到下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;infoList.map((value, index) =&gt; (</span><br><span class="line">        &lt;div&gt; &#123;value&#125; &lt;/div&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Box() &#123;</span><br><span class="line">  return &lt;div style=&#123;&#123;border: &quot;1px solid red&quot;&#125;&#125;&gt;1111&lt;/div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码翻译过来是<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Box() &#123;</span><br><span class="line">  return React.createElement(&quot;div&quot;, &#123;</span><br><span class="line">    style: &#123;</span><br><span class="line">      border: &quot;1px solid red&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &quot;1111&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样我们就比较好理解语法了。<br>jsx 中 <code>&lt;div&gt;</code> 内如果我们没有加 <code>{}</code> 会默认认为是字符串，而加了大括号的话会以变量来编译。在 style 属性里添加 border 为 1px 。外面的大括号表明这是一个变量，里面的大括号表明这个变量是一个对象。<br>因为它实际是一个对象，所以如果有多个样式的话应该使用逗号分隔 <code>border: &quot;1px&quot;, borderRadius: &quot;5px&quot;</code>。<br>因为 js 不支持 <code>-</code> 作为变量名，所以原本的 <code>border-radius</code> 变成了 <code>borderRadius</code>.<br>注意样式值需要用引号包裹，因为它应该是一个字符串。</p>
<hr>
<p>总的来说，用 js 的思想去考虑应该要怎么写。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/01/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>react生命周期</title>
    <url>/2021/03/30/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="JS-的生命周期有哪些"><a href="#JS-的生命周期有哪些" class="headerlink" title="JS 的生命周期有哪些"></a>JS 的生命周期有哪些</h1><p>暂且抛开 react ，单说生命周期。一个元素，从出生到死亡的全过程。</p>
<ol>
<li>创建元素</li>
<li>填充内容</li>
<li>挂载到页面</li>
<li>更新内容</li>
<li>销毁元素<br><a href="https://codesandbox.io/s/js-lifecycle-vu9m7?file=/src/index.js" target="_blank" rel="noopener">演示 Demo</a></li>
</ol>
<h1 id="react-生命周期有哪些"><a href="#react-生命周期有哪些" class="headerlink" title="react 生命周期有哪些"></a>react 生命周期有哪些</h1><p><a href="https://zh-hans.reactjs.org/docs/react-component.html#the-component-lifecycle" target="_blank" rel="noopener">官网文档组件的生命周期</a></p>
<ol>
<li>挂载相关<br><em><a href="#constructor-NaN">constructor()</a><br><a href="#static-getDerivedStateFromProps-props-state">static getDerivedStateFromProps()</a>
</em><a href="#render">render()</a><br>*<a href="#componentDidMount">componentDidMount()</a><br><em>componentWillMount() 即将过时</em></li>
<li>更新相关<br>static getDerivedStateFromProps()<br><em><a href="#shouldComponentUpdate">shouldComponentUpdate()</a><br>render()<br><a href="#getSnapshotBeforeUpdate-prevProps-prevState">getSnapshotBeforeUpdate()</a>
</em><a href="#componentDidUpdate-prevProps-prevState-snapshot">componentDidUpdate()</a><br><em>componentWillUpdate() 即将过时</em><br><em>componentWillReceiveProps() 即将过时</em></li>
<li>卸载相关<br>*<a href="#componentWillUnmount">componentWillUnmount()</a></li>
<li>错误处理（抛出错误的时候会调用的方法）<br><a href="#static-getDerivedStateFromError-error-amp-componentDidCatch-error-errorInfo">static getDerivedStateFromError()</a><br><a href="#static-getDerivedStateFromError-error-amp-componentDidCatch-error-errorInfo">componentDidCatch()</a></li>
</ol>
<p><a href="https://codesandbox.io/s/life-cycle-nvmcg?file=/src/App.js" target="_blank" rel="noopener">生命周期示例</a><br><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">生命周期图示</a>，点击 Show less common lifecycles 可看见所有的生命周期。<br>正常情况下当你创建了一个组件，会先执行 constructor 方法构建组件，然后是 getDerivedStateFromProps 来从 props 中获取新的 state 值（仅在某些特殊时候需要用），然后是 render 进行组件的渲染，最后挂载到页面之后会执行 componentDidMount 。<br>如果你需要更新一个页面，改变自己的 state 之后，会先执行 getDerivedStateFromProps ，然后执行 shouldComponentUpdate ，如果这个函数返回的是 false ，那么就不继续更新页面（但是此时的 state 值已经改了）。<br>如果确定要继续更新页面的话，会继续执行 render 进行渲染。getSnapshotBeforeUpdate 在渲染出来的新东西挂载到页面之前获取之前的状态，props 和 state，这个函数的返回值会作为 componentDidUpdate 的第三个参数。 componentDidUpdate 在组件更新之后执行。<br>如果子组件出现了错误，那么会先执行父组件的 getDerivedStateFromError 从错误信息获取新的 state 值，然后卸载子组件，在卸载子组件之前执行子组件的 componentWillUnmount 方法。然后执行父组件的 componentDidCatch 捕获错误信息写入日志。<br>如果子组件是正常卸载的话，只会执行子组件的 componentWillUnmount 。</p>
<h1 id="生命周期方法使用"><a href="#生命周期方法使用" class="headerlink" title="生命周期方法使用"></a>生命周期方法使用</h1><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h2><p>常用场景：</p>
<ol>
<li>init state</li>
<li>事件处理函数（注意使用箭头函数或者 bind 来避免 this 潜在的问题）</li>
</ol>
<h2 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h2><ol>
<li>返回一个 react 元素 <code>&lt;div&gt;&lt;h1&gt;Hi&lt;/h1&gt;&lt;/div&gt;</code></li>
<li><p>返回多个 react 元素 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;React.Fragment&gt;</span><br><span class="line">   &lt;h1&gt;Hi&lt;/h1&gt;</span><br><span class="line">   &lt;h1&gt;Hello&lt;/h1&gt;</span><br><span class="line">   &lt;h1&gt;Valemagalas&lt;/h1&gt;</span><br><span class="line"> &lt;/React.Fragment&gt;</span><br></pre></td></tr></table></figure>
<p> 或者省去 React.Fragment , 形如</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&gt;</span><br><span class="line">  &lt;h1&gt;Hi&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;Hello&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;Valemagalas&lt;/h1&gt;</span><br><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回一个挂载在某个元素上的元素，常用于创建对话框。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return ReactDOM.createPortal(</span><br><span class="line">  this.props.children,</span><br><span class="line">  domNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>假如这是一个对话框，组件名为 Dialog , 我们可以把 domNode 设置为根元素，然后在这里面写对话框的具体内容 <code>&lt;Dialog&gt;...&lt;/Dialog&gt;</code></p>
</li>
<li>返回 Boolean ，常用于 <code>return flag &amp;&amp; &lt;Child /&gt;</code> ，flag 为 boolean ，如果 flag 为 true ，则渲染 Child 组件，否则什么都不渲染。</li>
</ol>
<p>js 有 6 种原始数据类型和三种复杂数据类型: Undefined(undefined), Boolean(false), Number(123), String(“”), BigInt(BigInt(“9”)/9n), Symbol(Symbol()), Null(null), Object({}), Function(()=&gt;{})<br>render 不能返回 undefined, Object, 可以返回 Boolean, Number, String, BigInt, Symbol, Null, Function。<br>其中返回 String 或者 Number，比如 <code>hello</code> 。它会把它直接渲染到页面。<br>BigInt 和 Symbol, Boolean 不会报错。Function 会给出一个警告。<br>允许 <code>return null</code> 但是不允许 <code>return undefined</code></p>
<h2 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h2><p>已经 render ，挂到了 DOM 树上，但是还没有显示到屏幕。<br>常用场景：</p>
<ol>
<li>向后台请求数据</li>
<li>设置 subscription（添加事件订阅），注意要在 componentWillUnmount() 里边 unsubsribe。</li>
</ol>
<h2 id="componentDidUpdate-prevProps-prevState-snapshot"><a href="#componentDidUpdate-prevProps-prevState-snapshot" class="headerlink" title="componentDidUpdate(prevProps, prevState, snapshot)"></a>componentDidUpdate(prevProps, prevState, snapshot)</h2><p>在触发更新之后调用，初始化的时候不会调用。<br>如果组件实现了 getSnapshotBeforeUpdate() 生命周期，它的返回值就是这个的第三个参数。<br>如果 shouldComponentUpdate() 的返回值为 false，则不会调用 componentDidUpdate()</p>
<h2 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h2><p>组件销毁之前调用</p>
<h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h2><p>首次渲染或者使用 forceUpdate() 时不调用此方法，返回 false 时会阻止组件更新。</p>
<h2 id="forceUpdate-amp-setState"><a href="#forceUpdate-amp-setState" class="headerlink" title="forceUpdate() &amp; setState()"></a>forceUpdate() &amp; setState()</h2><p>这两个是我们主动调用，其它都是 react 自动调用。<br>更新一般发生在 state 或者 props 发生改变的时候，但如果你使用了其他数据，可以用 forceUpdate 来强制更新。<br>forceUpdate 不会触发 shouldComponentUpdate 。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Box1 extends React.Component &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.name = 2333</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = ()=&gt;&#123;</span><br><span class="line">    this.name = Math.random()</span><br><span class="line">    this.forceUpdate()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&quot;render&quot;);</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt; hello, &#123;this.name&#125;</span><br><span class="line">        &lt;button onClick=&#123;this.handleClick&#125;&gt; Click me &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="static-getDerivedStateFromProps-props-state"><a href="#static-getDerivedStateFromProps-props-state" class="headerlink" title="static getDerivedStateFromProps(props, state)"></a>static getDerivedStateFromProps(props, state)</h2><p>会在调用 render 之前调用，返回一个对象来更新 state，如果返回 null 则不更新任何内容。<a href="https://codesandbox.io/s/getderivedstatefromprops-8zhti?file=/src/App.js" target="_blank" rel="noopener">使用方法</a><br>每次渲染前都会触发这个方法，不论是 props 更新了还是 state 更新了。</p>
<h2 id="getSnapshotBeforeUpdate-prevProps-prevState"><a href="#getSnapshotBeforeUpdate-prevProps-prevState" class="headerlink" title="getSnapshotBeforeUpdate(prevProps, prevState)"></a>getSnapshotBeforeUpdate(prevProps, prevState)</h2><p>在 update 之前获取一些信息，返回值会传给 componentDidUpdate()</p>
<h2 id="static-getDerivedStateFromError-error-amp-componentDidCatch-error-errorInfo"><a href="#static-getDerivedStateFromError-error-amp-componentDidCatch-error-errorInfo" class="headerlink" title="static getDerivedStateFromError(error) &amp; componentDidCatch(error, errorInfo)"></a>static getDerivedStateFromError(error) &amp; componentDidCatch(error, errorInfo)</h2><p><a href="https://codesandbox.io/s/error-boundaries-g35gc?file=/src/App.js" target="_blank" rel="noopener">Error boundaries demo</a><br>错误边界，捕获子组件的错误。如果子组件发生了错误，那么显示降级 UI 。这两个用来做这件事情。<br>getDerivedStateFromError 将抛出的错误作为参数，返回新的 state 值。在渲染阶段调用，不允许有副作用（不确定的输出结果）。可以用来设置 state 值，从而渲染降级 UI。<br>componentDidCatch 在后代组件抛出错误时调用，允许有副作用。可以用来写 error log。</p>
<h1 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h1><ol>
<li>constructor: 数据初始化（state 初始化）、事件监听。<br>其中数据更新会放在点击事件里边，需要注意的是 setState 会触发组件的更新，所以不要在组件更新的钩子里写 setState 。</li>
<li>componentDidMount: 数据请求、事件订阅</li>
<li>shouldComponentUpdate: 手动阻止更新</li>
</ol>
<p>遇到什么操作该放到哪里的问题时，反向想一想它不能放在哪。比如说 ajax 请求，如果我需要获取数据，那么按说挂载的几个生命周期都可以，constructor, getDerivedStateFromProps, render, componentDidMount, 但是官网说 constructor 中要避免引入副作用， getDerivedStateFromProps 主要用来从 props 获取 state， render 在每次更新的时候都会调用，所以只能放在 componentDidMount 里边了。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title>src和href的区别</title>
    <url>/2022/12/01/src%E5%92%8Chref%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><ul>
<li>src 指的是 source，用来内联一个额外的文件，比如 <code>&lt;img src=&#39;a.png&#39; /&gt;</code> 就是下载 a.png , 然后把它放到这个位置上来。</li>
<li>href 全称是 hypertext reference, 超文本引用，一般是用来建立当前文档和外部文档的一个联系，相当于一个桥梁的作用。比如 <code>&lt;a href=&#39;https://www.baidu.com&#39;&gt;上网&lt;/a&gt;</code>, 点击这个超文本就能顺着它到外部文档上去。</li>
</ul>
<h1 id="link-和-script"><a href="#link-和-script" class="headerlink" title="link 和 script"></a>link 和 script</h1><p>这两个标签分别是用来引入 css 和 js 的，分别用到了 href 和 src 属性，这里之所以拿出来单独讲是因为就我个人而言上面的定义没法说服我理解这两个标签。<br>讲之前先简单地提一下浏览器的渲染过程：加载 HTML -&gt; 解析 HTML 以构建 DOM 树 -&gt; 发请求下载 DOM 链接的资源 -&gt; 确定渲染规则构建 render 树 -&gt; 将 style 应用到 DOM 节点上(布局 render 树) -&gt; 渲染页面(绘制 render 树)<br>在我们输入 URL 之后，浏览器会向服务器发送请求，服务器返回的一般是一个 HTML，浏览器拿到这个 HTML 文件之后开始做解析开始构建 DOM 树。浏览器是从上往下一行一行解析的，在遇到需要做资源请求的时候就继续向服务器发请求。<br>link 和 script 的不同点在于，link 发了请求之后就继续解析下一行，而 script 发了请求之后，就在等待请求的返回结果，然后执行 js 语句。执行完 js 语句之后，再去解析下一行。也因此如果内嵌 script 的话，最好是放在文档结尾，一般在 body 结束标签的上方（因为 body 标签下面的可能会被部分浏览器忽略）；而内嵌 style 的话都是放在文档头部，head 结束标签的上方。<br>但实际上我们在 html 里面写如下一段代码会发现链接的几个资源是同时下载的，并没有出现阻塞的情况。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./styles.css&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;img src=&quot;1.jpg&quot; /&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;111&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;./index2.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>这是因为浏览器的预加载机制，在浏览器解析并构建 DOM 树的时候，预加载扫描仪同时扫描文档并请求高优先级资源，它的存在减少了 script 标签带来的阻塞。<br>但这并不影响它的主流程：解析 HTML 的时候遇到 script 标签会执行完里面的脚本再继续解析下一行。</p>
<h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p>link 的特殊之处在于，虽然它使用的是 href，但是它是会主动下载它链接的资源的。相比之下 a 标签其实只是做了一个链接，并不会主动去发送请求。<br>另外想要提的一点就是 CSS 是渲染阻塞的：浏览器会阻塞页面渲染直到它接收和执行了所有的 CSS。CSS 是渲染阻塞是因为规则可以被覆盖，所以内容不能被渲染直到 CSSOM 的完成。但是它不阻塞 DOM 的加载，而且 DOM 的构建是一点一点往页面上 push 的。</p>
<h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>script 和 img 相比较而言，img 不会阻塞加载，只是做资源请求。在 HTML5 中，script 标签添加了两个属性：async 和 defer，可以用来控制是否做内容的阻塞。<br>如果添加了 async，那么会异步加载这个 script 引入的资源，在资源获取完成的时候执行脚本，与浏览器当前解析到哪里无关；<br>如果添加了 defer，那么会等到页面全部解析完成之后再去加载这个 script 引入的资源（在预加载的情况下会预加载，但还是会放到最后执行加载进来的 js ）；<br>如果都没有添加的话，就是前面说的先获取资源执行脚本，再解析下一行。<br>之前默认阻塞是因为 js 是可以操作 DOM 的，所以 js 的执行顺序其实是会影响页面布局，在添加了这两个属性之后相当于其中的风险由开发者控制，在没有必要的时候不需要让它阻塞流程。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://stackoverflow.com/questions/3395359/difference-between-src-and-href" target="_blank" rel="noopener">stack overflow: difference between src and href</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript" target="_blank" rel="noopener">MDN: 什么是 JavaScript</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noopener">MDN: 渲染页面：浏览器的工作原理</a><br><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works#how_does_css_actually_work" target="_blank" rel="noopener">MDN: How CSS works</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path" target="_blank" rel="noopener">MDN: 关键渲染路径</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>react获取元素</title>
    <url>/2021/04/05/react%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="你真的要获取元素吗"><a href="#你真的要获取元素吗" class="headerlink" title="你真的要获取元素吗"></a>你真的要获取元素吗</h1><p>正常情况下我们并不需要获取元素，如果需要修改某个组件，一般情况下是通过父组件传递的 props 或者自己本身的 state 来重新渲染。<br>但是如果要获取元素， react 同样提供了一些方法。</p>
<h1 id="使用-ref-获取元素"><a href="#使用-ref-获取元素" class="headerlink" title="使用 ref 获取元素"></a>使用 ref 获取元素</h1><h2 id="class-组件内部"><a href="#class-组件内部" class="headerlink" title="class 组件内部"></a>class 组件内部</h2><ol>
<li>创建 ref <code>this.myRef = React.createRef()</code></li>
<li>绑定 ref <code>&lt;div ref={this.myRef}&gt;&lt;/div&gt;</code></li>
<li>获取元素 <code>const ele = this.myRef.current</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class CBoxInner extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.myRef = React.createRef(); // 创建 ref</span><br><span class="line">    this.handleClick = ()=&gt;&#123;</span><br><span class="line">      console.log(this.myRef.current) // 打印出 DOM 元素</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div ref=&#123;this.myRef&#125;&gt;Box1 div&lt;/div&gt; // ref 绑定</span><br><span class="line">        &lt;button onClick=&#123;this.handleClick&#125;&gt;</span><br><span class="line">          console log Box1</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="class-组件外部"><a href="#class-组件外部" class="headerlink" title="class 组件外部"></a>class 组件外部</h2><h3 id="暴力获取"><a href="#暴力获取" class="headerlink" title="暴力获取"></a>暴力获取</h3><p>将 ref 绑定在你引用的 class 组件上，不同的是此时的 ref.current 是<strong>组件的实例</strong>。<br>如果你需要在父组件获取子组件的某个元素，将父组件的 ref 绑定到子组件上，然后通过父组件的 ref 获取子组件的 ref，从而拿到子组件的元素。<code>this.myRef.current.xxxRef.current</code><br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;CBoxInner ref=&#123;this.myRef&#125; /&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="通过属性传递"><a href="#通过属性传递" class="headerlink" title="通过属性传递"></a>通过属性传递</h3><p>相当于 function 组件的 refs 转发（forwardRef）。</p>
<ol>
<li>在父组件创建 ref <code>this.cBox = React.createRef()</code></li>
<li>自定义一个属性（x），通过这个属性给子组件传递 ref 。<code>&lt;CBoxInner x={this.cBox} /&gt;</code></li>
<li>在子组件中给这个 ref 赋值。<code>&lt;div ref={this.props.x} /&gt;</code></li>
<li>此时你在父组件中直接使用 <code>this.cBox.current</code> 获取的就是子组件的元素。</li>
</ol>
<h3 id="借用高阶组件的思想"><a href="#借用高阶组件的思想" class="headerlink" title="借用高阶组件的思想"></a>借用高阶组件的思想</h3><p>高阶组件指的是一个函数，接收一个组件，返回一个新的组件。借用这个函数我们可以创建组件。<br>上面我们知道，借用属性传递可以传递 ref，但是不能直接传递名称为 ref 的属性。所以我们在中间封一层函数组件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class HOCBoxInner extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; forwardRef &#125; = this.props;</span><br><span class="line">    return &lt;div ref=&#123;forwardRef&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const HOCBox1 = React.forwardRef((props, ref) =&gt; &#123;</span><br><span class="line">    return &lt;HOCBoxInner &#123;...props&#125; forwardRef=&#123;ref&#125; /&gt;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p>
<p>此时我们拿到的 HOCBox1 就可以直接传递 ref。<code>&lt;HOCBox1 ref={this.ref} /&gt;</code><br>因为这样子同时生成了两个组件，一个 HOCBoxInner 一个 HOCBox1.<br>想一想，高阶组件是传递一个组件，返回一个新的组件。如果我们不需要复用的话，那么传递一个组件这个步骤就可以省去了。直接在函数内部创建一个 class 组件。如果你甚至不想暴露函数的话，让它立即执行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const HOCBox = (function createHOCBox() &#123;</span><br><span class="line">  class HOCBoxInner extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      const &#123; forwardRef &#125; = this.props;</span><br><span class="line">      return &lt;div ref=&#123;forwardRef&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return React.forwardRef((props, ref) =&gt; &#123;</span><br><span class="line">    return &lt;HOCBoxInner &#123;...props&#125; forwardRef=&#123;ref&#125; /&gt;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure></p>
<p>这样我们拿到的 HOCBox 就是一个可以传 ref 的组件了。</p>
<h2 id="function-组件内部"><a href="#function-组件内部" class="headerlink" title="function 组件内部"></a>function 组件内部</h2><ol>
<li>创建 ref <code>const myRef = useRef();</code></li>
<li>绑定 ref <code>&lt;div ref={myRef}&gt;&lt;/div&gt;</code></li>
<li>获取元素 <code>const ele = this.myRef.current</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function FBoxInner() &#123;</span><br><span class="line">  const myRef = useRef();</span><br><span class="line">  const handleClick = () =&gt; &#123;</span><br><span class="line">    console.log(myRef.current);</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div ref=&#123;myRef&#125;&gt;function div&lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClick&#125;&gt;console log function&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="function-组件外部"><a href="#function-组件外部" class="headerlink" title="function 组件外部"></a>function 组件外部</h2><p>class 组件外部使用 ref 获取的是 class 组件的实例，而 function 组件没有实例，所以无法使用 <code>ref={myRef}</code> 来绑定获取。<br>function 组件使用 forwardRef 来实现。<br>function 组件声明一般是 <code>function Xxx(props){}</code> , 使用 forwardRef 的话，是这样 <code>const Xxx = React.forwardRef((props, ref)=&gt;{})</code>. 我们可以直接在参数中获取父组件传递过来的 ref 。</p>
<ol>
<li>父组件创建 ref 。<code>this.mref = React.createRef()</code></li>
<li>父组件给子组件传递 ref <code>&lt;Child ref={this.mref} /&gt;</code></li>
<li>子组件给 ref 赋值 <code>&lt;div ref={ref} /&gt;</code></li>
</ol>
<h2 id="使用回调函数获取"><a href="#使用回调函数获取" class="headerlink" title="使用回调函数获取"></a>使用回调函数获取</h2><p>使用回调函数获取 ref 的话，function 组件和 class 组件使用方法一致。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function CBFBoxInner() &#123;</span><br><span class="line">  let myRef = null;</span><br><span class="line">  const setRef = (el) =&gt; (myRef = el);</span><br><span class="line">  const handleClick = () =&gt; &#123;</span><br><span class="line">    console.log(myRef);</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div ref=&#123;setRef&#125;&gt;callback function div&lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClick&#125;&gt;console log callback function&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是此时获取的 myRef 就是元素本身，不需要 myRef.current . </p>
<hr>
<p><a href="https://zh-hans.reactjs.org/docs/react-dom.html#finddomnode" target="_blank" rel="noopener">findDOMNode()</a> 同样可以获取元素，但是不推荐使用，且严格模式下该方法已经弃用。<br><a href="https://codesandbox.io/s/ref-get-element-3hn9o?file=/src/App.js" target="_blank" rel="noopener">ref 获取元素 Demo</a></p>
<p><em>受控组件 VS 非受控组件</em><br>在一个表单中，受控组件指的是表单元素的值完全由 state 控制，非受控组件指的是表单元素的值由它本身控制。<br>比如一个 input 框，我输入一个 “xxx” 。<br>受控组件是我给它绑定一个 onChange 事件，一旦它发生了改变，我就修改 state 的值，而因为我修改了 state 的值，所以这个 input 的 value 就改变了。<br>非受控组件是我给它绑定一个 ref ，在我需要的时候直接通过获取 DOM 元素的 value 来获取它的值。<code>&lt;input type=&quot;file&quot; /&gt;</code> 始终是一个非受控组件。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>ref</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2021/02/22/webpack/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol>
<li>webpack 是什么？它是一个开发工具。</li>
<li>它有什么用？将你写的源码编译成浏览器能够看懂的代码。</li>
<li>什么时候用？布置我们的开发环境的时候用。</li>
</ol>
<p>或许这样的描述仍然不够清晰，那么不妨想象一下，如果没有 webpack ，会怎么样？<br>如果我们想要在一个项目中使用 sass ， 而 sass 不能被浏览器正确地解析，那么我们是不是需要一个 sass 解析的工具，从而能让我们开发的时候能够使用 sass ？ node-sass 就是用来做这件事情的。<br>ECMA 规范不断地发展，而用户多的时候总有那么些人用的是旧版本的浏览器，为了做兼容我们难道要一直使用旧的属性吗（ <a href="https://caniuse.com/" target="_blank" rel="noopener">Can I use</a> 可以搜索属性是否存在兼容性问题 ）？当然不是。Babel 就是用来解决这个问题的，它可以把我们的新代码重新编译成浏览器能看得懂的代码。<br>如你所见，我们使用新的技术总是会遇见很多的阻力，为了能赶上潮流，我们不得不借助一些工具。而前端的潮流变化太快，工具也变得更多了，那么如果有一种东西，能够集合所有的这些工具，会不会让我们的开发更方便一些？ webpack 就是这样做的。它集成了这些工具，让我们用起来更方便一些。<br>这里我先介绍一下不使用 webpack 的情况，再来讨论如果使用 webpack 的话应该是怎么样的。</p>
<h1 id="一些工具的使用"><a href="#一些工具的使用" class="headerlink" title="一些工具的使用"></a>一些工具的使用</h1><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>Sass 是 Ruby 社区发明的一种 css 语言，使用 Sass 可以使你的 css 写起来更加的简洁，但是浏览器不认识。<br><em><code>*.sass</code> 和 <code>*.scss</code> 都是 Sass 文件， 语法略微不同。<code>*.scss</code> 比 <code>*.sass</code> 多了括号。</em><br>我们需要一个工具来把我们写的 Sass 翻译成浏览器可以识别的 css ，这就是 node-sass。<br>node-sass 给我们提供了一个 <code>-watch</code> 参数，可以实现自动化实时更新，免去了我们每次修改 Sass 文件之后都重新运行编译命令的麻烦。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g node-sass // 全局安装 node-sass</span><br><span class="line">node-sass main.scss main.css  // 将 main.scss 翻译成 main.css</span><br><span class="line">node-sass src/css -o dist/css  // 将 src/css 目录下的所有 Sass 文件 翻译成 css 并输出到 dist/css 目录下</span><br><span class="line">node-sass src/css/main.scss dist/css/main.css -w  // 自动实时翻译</span><br></pre></td></tr></table></figure>
<p>使用 <code>node-sass src/css -o dist/css -w</code> 可以实时监听 <code>src/css</code> 文件夹下所有的 scss 文件的改动并输出到 <code>dist/css</code> 文件夹下。</p>
<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>node-sass 是翻译 sass 的工具，Babel 则是翻译 js 的工具。js 在不断地更新，ES5、ES6，TypeScript，等等，使用 Babel 可以将它们统一翻译为所有浏览器都可以接受的 js。<br><a href="https://babeljs.io/docs/en/babel-cli" target="_blank" rel="noopener">Babel 官方文档</a></p>
<ol>
<li><code>npm init</code> 创建一个合法的 package.json 文件</li>
<li><code>npx babel main.js --out-file main-compiled.js</code> 使用 <code>npx babel</code> 代替 <code>./node_modules/.bin/babel</code>。<code>--out-file</code> 可以简写为 <code>-o</code>.</li>
<li><code>npx babel src/js --watch --out-dir dist/js</code> <code>--out-dir</code> 可以简写为 <code>-d</code>, <code>--watch</code> 可以简写为 <code>-w</code>.</li>
</ol>
<p>当你 install 的时候，添加 <code>-g</code> 参数代表全局安装，否则为项目内部安装。<br>项目安装的话会默认安装在 node_modules 里边，运行的时候需要用<code>./node_modules/.bin/babel main.js -o compiled.js</code>，而如果是全局安装的话，命令会包含在 path 里，在命令行直接输入 <code>babel main.js -o compiled.js</code> 即可。</p>
<h2 id="watch-cli"><a href="#watch-cli" class="headerlink" title="watch-cli"></a>watch-cli</h2><p>在上面的步骤里，我们了解了 node-sass 和 babel ，一个用来实时监听 scss 的改动，另一个用来实时监听 js 的改动。但这还不够，完整的代码里还需要 html。我们用 watch-cli 来监听 html 的改动，一旦它有了改动，就自动复制到 dist 目录下。</p>
<p>如此我们所有的代码应该都在 dist 目录下了。但是这样我们在写代码的时候同时开了三个进程，才能保证我们的代码能够正常地运行。<br>而如果你使用 webpack ，则只需要开一个 webpack 的进程即可。</p>
<h1 id="回到-webpack"><a href="#回到-webpack" class="headerlink" title="回到 webpack"></a>回到 webpack</h1><p><a href="https://webpack.js.org/guides/getting-started/#basic-setup" target="_blank" rel="noopener">webpack 官方网站</a></p>
<h2 id="webpack-的基础使用"><a href="#webpack-的基础使用" class="headerlink" title="webpack 的基础使用"></a>webpack 的基础使用</h2><p>这里我们创建一个 demo 来尝试做这件事情。项目目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpackDemo</span><br><span class="line">  src // 存放你要写的代码</span><br><span class="line">    index.js</span><br><span class="line">    style.scss</span><br><span class="line">    test.html</span><br><span class="line">  dist // 存放webpack生成的代码</span><br></pre></td></tr></table></figure>
<h3 id="webpack-的安装与配置"><a href="#webpack-的安装与配置" class="headerlink" title="webpack 的安装与配置"></a>webpack 的安装与配置</h3><ol>
<li>webpack 的安装：<code>npm install --save-dev webpack</code></li>
<li>创建一个 webpack.config.js 文件，并在里边添加配置如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &quot;development&quot;,  // 官网上没写这一句，但是不加的话会报错。</span><br><span class="line">    entry: &apos;src/index.js&apos;, // 你的 js 入口文件</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;main.js&apos;,  // 编译之后输出的文件</span><br><span class="line">        path: path.resolve(__dirname, &apos;dist/js&apos;),  // 编译之后输出的文件夹</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>应用配置（不是很确定是否需要）<code>npx webpack --config webpack.config.js</code></li>
<li>运行 <code>npx webpack</code>，这个命令会执行代码的编译，在你修改代码完成之后执行这个命令，会将你的改动重新计算到 dist 文件夹里。</li>
</ol>
<h3 id="生成-html"><a href="#生成-html" class="headerlink" title="生成 html"></a>生成 html</h3><ol>
<li>安装 html-webpack-plugin 插件（貌似还要安装 lodash）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br><span class="line">npm install --save-dev lodash</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在 webpack.config.js 文件中添加如下配置：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: &apos;src/test.html&apos; // 这里不加的话会给你默认创建一个 html，如果加了的话就会参考这个里边的内容创建 html</span><br><span class="line">  &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/jantimon/html-webpack-plugin#usage" target="_blank" rel="noopener">更多功能看这里</a></p>
<h3 id="配置-sass"><a href="#配置-sass" class="headerlink" title="配置 sass"></a>配置 sass</h3><p><a href="https://webpack.js.org/loaders/sass-loader/" target="_blank" rel="noopener">官方文档看这里</a></p>
<ol>
<li>安装 sass-loader</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install sass-loader sass webpack --save-dev</span><br><span class="line">npm install style-loader</span><br><span class="line">npm install css-loader</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>添加配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.s[ac]ss$/i,</span><br><span class="line">            use: [</span><br><span class="line">            // Creates `style` nodes from JS strings</span><br><span class="line">            &quot;style-loader&quot;,</span><br><span class="line">            // Translates CSS into CommonJS</span><br><span class="line">            &quot;css-loader&quot;,</span><br><span class="line">            // Compiles Sass to CSS</span><br><span class="line">            &quot;sass-loader&quot;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在你的 index.js 文件中添加<code>import &quot;./style.scss&quot;;</code>对这个 style 文件进行引入</li>
</ol>
<h3 id="配置-babel"><a href="#配置-babel" class="headerlink" title="配置 babel"></a>配置 babel</h3><p><a href="https://webpack.js.org/loaders/babel-loader/" target="_blank" rel="noopener">官方文档看这里</a></p>
<ol>
<li>安装 babel-loader <code>npm install -D babel-loader @babel/core @babel/preset-env webpack</code></li>
<li>添加配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.m?js$/,</span><br><span class="line">      exclude: /(node_modules|bower_components)/,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: &apos;babel-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [&apos;@babel/preset-env&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>如果你有其他的 js 文件，同样要在我们的入口文件 index.js 里边 import。<br>index.js</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import x form &apos;./module-1&apos;</span><br><span class="line">x()</span><br></pre></td></tr></table></figure>
<p>module1.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn() &#123;console.log(1)&#125;</span><br><span class="line">export default fn</span><br></pre></td></tr></table></figure>
<h3 id="添加实时更新"><a href="#添加实时更新" class="headerlink" title="添加实时更新"></a>添加实时更新</h3><p>在你的 webpack.config.js 文件中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    watch: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="plugin-和-loader-的区别"><a href="#plugin-和-loader-的区别" class="headerlink" title="plugin 和 loader 的区别"></a>plugin 和 loader 的区别</h1><p>loader: 转换器，将一个文件编译成另一个文件，比如将 scss 转换成 css，将 ts 转换成 js 等等，将 webpack 本身不能理解的文件转换成它能够理解的文件。<br>plugin: 相当于一个扩展，在 loader 结束后，对 webpack 打包的生命周期事件进行监听并使用 webpack 提供的一些 API 来改变打包的输出结果。</p>
<h1 id="webpack-相关面试题"><a href="#webpack-相关面试题" class="headerlink" title="webpack 相关面试题"></a>webpack 相关面试题</h1><a href="/2023/03/06/webpack面试题/" title="webpack面试题">webpack面试题</a>
<h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><p>打包工具的发展：grunt -&gt; gulp -&gt; webpack -&gt; parcel? vite?</p>
<p>webpack 相关面试题, 你对 webpack 的理解？</p>
<ol>
<li>打包。比如使用 sass-loader 进行 sass 文件的翻译。</li>
<li>模块化。index.js 作为入口文件，css 和 js 都在这里进行 import 。 而 webpack 翻译这个入口文件的时候，将引入的那些文件也翻译出来，将这些所有的文件都翻译成一个文件。</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack面试题</title>
    <url>/2023/03/06/webpack%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="说一说你对-webpack-的了解"><a href="#说一说你对-webpack-的了解" class="headerlink" title="说一说你对 webpack 的了解"></a>说一说你对 webpack 的了解</h1><p>webpack 是一个打包工具，它可以将我们的代码打包成浏览器可以识别的代码，通过 loaders 来翻译，通过 plugin 来做一些打包优化的工作。启动 webpack 服务之后它会做项目打包工作，然后再在本地启动一个服务来运行这个打包后的项目，让我们可以在本地查看代码效果。<br>webpack 的核心思想是模块化，在它看来，所有的文件都相当于一个模块，通过入口文件开始构建各个模块之间的依赖关系。</p>
<h1 id="webpack-有哪些构成，分别是用来做什么的？"><a href="#webpack-有哪些构成，分别是用来做什么的？" class="headerlink" title="webpack 有哪些构成，分别是用来做什么的？"></a>webpack 有哪些构成，分别是用来做什么的？</h1><ol>
<li>入口配置 (entry) : 从哪个文件开始构建</li>
<li>出口配置 (output) : 最终构建出来的文件的输出路径</li>
<li>loaders (module.rules)：loader 承担着翻译的功能，webpack 只能识别 JavaScript 和 JSON 文件，在碰到其他类型的文件时通过 loader 的配置来做翻译工作。 test 用来匹配需要转换的文件，use 用来告诉 webpack 使用哪个 loader 来转换匹配到的文件。</li>
<li>plugins：webpack 插件，扩展 webpack 的功能，比如说打包优化。</li>
<li>mode：指定构建模式，development/production，指定当前构建是开发模式还是生产模式</li>
</ol>
<h1 id="loader-和-plugin-的区别"><a href="#loader-和-plugin-的区别" class="headerlink" title="loader 和 plugin 的区别"></a>loader 和 plugin 的区别</h1><p>loader 是翻译器，webpack 原生只支持 JavaScript 和 JSON，不同的 loader 可以翻译不同的语言，让 webpack 可以正常读取构建。<br>plugin 是插件，webpack 在构建的不同阶段会广播出一些事件，plugin 监听这些事件并进行处理，改变输出结果。</p>
<h1 id="常见的-loader"><a href="#常见的-loader" class="headerlink" title="常见的 loader"></a>常见的 loader</h1><p>sass-loader : 把 scss 转换为 css<br>css-loader : 解析 css<br>style-loader : 把 css 插入到 DOM 中<br>babel-loader : 把 ES6 转换成 ES5<br>ts-loader : 把 TypeScript 转换成 JavaScript<br>html-loader : 解析 html<br>file-loader : 复制资源文件并替换访问地址，在代码中使用相对 url 去引用输出的文件<br>url-loader : 除了 file-loader 的功能外，对于比较小的文件可以直接以 base64 的方式把文件内容注入到代码中</p>
<h1 id="常见的-plugin"><a href="#常见的-plugin" class="headerlink" title="常见的 plugin"></a>常见的 plugin</h1><p>html-webpack-plugin: 在打包之后生成一个 html 文件来引用打包生成的 js 文件（webpack 的模块化，把每个文件都看做是一个模块，然后建立起这些模块之间的依赖关系）<br>imagemin-webpack-plugin: 压缩图片<br>clean-webpack-plugin: 每次打包前先清空输出文件夹再执行打包过程<br>commons-chunk-plugin: 提取公共代码</p>
<h1 id="webpack-的构建过程"><a href="#webpack-的构建过程" class="headerlink" title="webpack 的构建过程"></a>webpack 的构建过程</h1><ol>
<li>读取配置：根据配置文件以及 shell 命令拿到最终的配置。</li>
<li>开始编译：根据配置文件加载 plugin，初始化 compile 对象，执行对象的 run 方法，开始编译。</li>
<li>根据入口文件配置找到入口文件，开始构建依赖树。</li>
<li>使用 loader 对读取到的依赖文件进行翻译，直到所有的文件翻译完成。</li>
<li>拿到最终翻译好的依赖树。</li>
<li>将所有翻译好的文件进行压缩打包，构建一个个 chunk，再转换成文件加入到输出列表。</li>
<li>根据 output 配置将最终的打包结果写入文件系统。</li>
</ol>
<h1 id="如何提高构建速度"><a href="#如何提高构建速度" class="headerlink" title="如何提高构建速度"></a>如何提高构建速度</h1><p>说一下大致的思路，提高构建速度可以结合构建过程来看，大致的过程如下：开始构建-&gt;翻译文件-&gt;压缩打包-&gt;写入到文件系统。<br>开始构建的时候主要是配置的读取，这里的速度取决于 webpack 本身，我们基本做不了什么。同样做不了什么的还有最后的写入文件步骤。<br>翻译文件阶段， webpack 在翻译的同时是在构建依赖树的，看入口文件依赖到哪个文件，然后找到对应的翻译器执行翻译。这个过程中一方面是查找对应的翻译器的过程，也许可以在写法上做优化，减少搜索时间；另一方面在 webpack 本身，如果能够支持多线程同时翻译多个文件的话也会大大提高此阶段的构建速度。<br>压缩打包阶段，同时压缩多个依赖文件同样可以提高构建速度。<br>除上述之外，跳出这个构建的流程，常用的一种优化是采用缓存。在第一次构建之后建立起缓存，在后续重复构建的过程中增量构建而不是全部构建，也可以大大提高构建速度。</p>
<h1 id="转义出的文件过大怎么办"><a href="#转义出的文件过大怎么办" class="headerlink" title="转义出的文件过大怎么办"></a>转义出的文件过大怎么办</h1><p>原始文件通过 loader 转义，如果转义出的文件过大，并且你使用的 loader 没有问题的话，那么需要考虑是不是原始文件太大了。<br>原始文件过大的话，需要分析代码了。一方面是提取出公共代码，另一方面是做功能的切分，单独的功能可以另外添加一个文件。</p>
<h1 id="如何按需加载代码"><a href="#如何按需加载代码" class="headerlink" title="如何按需加载代码"></a>如何按需加载代码</h1><p>webpack 提供了一种按需加载代码的方法：import(*)，将你需要按需加载的文件通过 import 引入，这样在 webpack 解析的时候就会对这个文件重新生成一个 chunk，在浏览器加载代码的时候会在需要的时候再加载这个 chunk。<br>这个方法在实际应用中一般会结合路由来用，单页应用在运行的时候会先加载主要的 chunk，在需要展示某个页面的时候通过异步的方法按需加载组件对应的 chunk 。<br>除了上述方法外，组件库会提供组件的按需加载。在使用的时候单独引入你要用到的组件而不是一次性全部引入。</p>
<h1 id="webpack-热更新"><a href="#webpack-热更新" class="headerlink" title="webpack 热更新"></a>webpack 热更新</h1><h2 id="webpack-热更新的配置"><a href="#webpack-热更新的配置" class="headerlink" title="webpack 热更新的配置"></a>webpack 热更新的配置</h2><p>在 webpack 配置文件中添加 <code>devServer.hot: true</code>，并且在 package.json 文件中添加 script 脚本 <code>&quot;start&quot;: &quot;webpack-dev-server --hot --open&quot;</code>。<br>此时 devServer 会告诉 webpack 自动添加 HotModuleReplacementPlugin。<br><code>{
        // ...
        devServer: {
            hot: true
        }
    }</code></p>
<h2 id="热更新原理"><a href="#热更新原理" class="headerlink" title="热更新原理"></a>热更新原理</h2><ol>
<li>启动 webpack ，本地访问页面。此时 webpack-dev-server 会启动两个服务，一个是 express 服务，主要用于提供静态资源，让浏览器可以直接解析打包后的资源；另一个是 socket 服务，在浏览器和服务器之间建立一个 socket 长连接，保证双方的通信。</li>
<li>webpack 通过 watch 监听本地代码的变动，如果有本地代码有更新，那么就重新编译，重新编译之后会产生两个文件：已改动模块的 manifest 文件；已改动模块的 chunk 文件。</li>
<li>devServer 通知浏览器有更新并发送当前编译的 hash 值。</li>
<li>浏览器设置 <code>currentHash = hash</code> 改变当前的 hash 值。</li>
<li>HotModuleReplacement.runtime 的 hotCheck 方法会检查是否有更新。</li>
<li>如果确认有更新的话向 devServer 发送 ajax 请求拿到 manifest 文件。（hotDownloadManifest）</li>
<li>通过 JSONP 去请求更新的 chunk。(hotDownloadUpdateChunk)</li>
<li>拿到 chunk 之后更新模块，检查依赖关系，更新依赖。</li>
<li>如果热更新失败的话，直接进行 live-reload 刷新浏览器。</li>
</ol>
<h1 id="webpack-的跨域解决方案"><a href="#webpack-的跨域解决方案" class="headerlink" title="webpack 的跨域解决方案"></a>webpack 的跨域解决方案</h1><p>开发过程中使用 webpack 启动服务，会在本地的 localhost 开启一个端口，而此时与服务器进行通信的话就会存在同源问题。<br>webpack 自身提供了一个解决方案： proxy。<br>通过 proxy 配置代理服务器，代理服务器作为一个中间件，拦截本地向服务器端发送的请求之后，自己去向服务器发送请求；拿到服务器端的响应之后，再把响应的信息传给本地。从而实现跨域。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://juejin.cn/post/6844904094281236487#heading-3" target="_blank" rel="noopener">「吐血整理」再来一打 Webpack 面试题（构建流程）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/44438844" target="_blank" rel="noopener">关于 webpack 的面试题总结</a></li>
<li><a href="https://juejin.cn/post/6844904071736852487" target="_blank" rel="noopener">玩转 webpack, 使你的打包速度提升 90%（提高构建速度的思路）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/354987097" target="_blank" rel="noopener">webpack 总结(面试题简答)</a></li>
<li><a href="https://www.cnblogs.com/zhilili/p/14735077.html" target="_blank" rel="noopener">Webpack——webpack 的编译原理（构建过程）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30669007" target="_blank" rel="noopener">Webpack HMR 原理解析( webpack 热更新)</a></li>
<li><a href="https://github.com/careteenL/webpack-hmr" target="_blank" rel="noopener">webpack-hmr</a></li>
<li><a href="https://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-12%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.html" target="_blank" rel="noopener">webpack 按需加载</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>react背景知识</title>
    <url>/2021/03/25/react%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>网页三要素：HTML、CSS and JS，在 react 里应该是什么样子的呢？</p>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>react 没有 HTML 。<br>这样说有点绝对，但是并不是完全不正确。你使用 create-react-app 创建一个 react 项目的时候，会发现在 public 文件夹下有一个 index.html 文件，里边有一个 id 为 root 的 div 。<br>但是你要知道，我们写的所有代码，都应该是在 src 文件夹下的。我们不需要去修改这个唯一的 html 文件，为什么？<br>抛开 react ，如果我们需要修改页面中的某个东西的时候，我们会怎么做？<br>获取元素，修改元素，然后再把元素放回去。<br>而 react 给了我们另一种可能——<br>创建一个元素，然后放到页面。需要更新的时候创建一个新的元素，然后替换掉之前的元素。省去了从页面获取元素的那一步。<br>还是那句话， react 没有 HTML 。<br>平时写在 html 文件里的东西， react 放到了 JavaScript 里边。<br>react 使用 <code>React.createElement(&quot;div&quot;)</code> 来创建一个 <code>&lt;div /&gt;</code> ，用 <code>React.render(React.createElement(&quot;div&quot;), document.querySelector(&quot;#root&quot;))</code> 将 <code>&lt;div /&gt;</code> 挂到 id 为 root 的元素下。<br>在 react 中，html 唯一的作用就是提供一个节点，让 js 把生成的元素挂到这个节点上。<br>这样我们在需要修改 DOM 元素的时候，只需要用 js 直接修改，然后再重新 render ，将修改好的虚拟的 DOM 元素渲染到页面。省去了之前从页面获取 DOM 元素的步骤。</p>
<h2 id="关于虚拟-DOM"><a href="#关于虚拟-DOM" class="headerlink" title="关于虚拟 DOM"></a>关于虚拟 DOM</h2><p>DOM 全称 Document Object Model ，文档对象模型，将 html 页面元素与一个个对象相对应，方便我们使用 js 来操控 html 文档。比如 <code>var x = document.querySelector(&quot;#root&quot;)</code>,我们通过这段代码从 html 页面上获取了一个真实的 DOM 元素。变量 x 对应着页面上一个 id 为 root 的节点。<br>而我们使用<code>const x = React.createElement(&quot;div&quot;)</code>则创建了一个标签为 div 的虚拟 DOM ，它与页面上的 div 相对应。<br>总的来说，虚拟 DOM 是表示 DOM 节点的 js 对象，对应页面的真实的 DOM 元素。</p>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>如果我想往页面加一个 button ，那么我应该这样写 <code>React.render(React.createElement(&quot;button&quot;), document.querySelector(&quot;#root&quot;))</code> ，如果这个 button 需要绑定事件，那么应该使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">React.createElement(&quot;button&quot;, &#123;</span><br><span class="line">    onClick: ()=&gt;&#123;console.log(&quot;here are we&quot;)&#125;</span><br><span class="line">&#125;, &quot;Click me&quot;)</span><br></pre></td></tr></table></figure></p>
<p>其中第一个参数是元素标签；第二个参数是一个对象，上边写了元素属性；第三个参数是元素的内容。这样我们创建好了一个虚拟 DOM。<br>感觉很麻烦。<br>所以有了 jsx 语法。<br>jsx 做了什么呢？它允许我们在 js 里写一段看上去像 html 的代码。<br>比如上述的 button 创建，你可以这样<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;()=&gt;console.log(&quot;here are we&quot;)&#125;&gt;Click me&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>
<p>其中<code>{}</code>里边是 js 的变量，如果不加的话会默认把它当做字符串。<br>需要注意的是在这里 onClick 是给 button 绑定一个事件，如果你直接写 <code>onClick = {console.log(1)}</code> ，意思是把 console.log(1) 当做一个事件绑定上去，于是在绑定事件的时候会执行这段代码。所以需要使用一个函数把它包裹起来，这样才是在点击按钮的时候执行这个匿名函数。<br>另，给函数加 class 的话用的是 <code>className=&quot;xxx&quot;</code> 而不是 html 中的 <code>class=&quot;xxx&quot;</code>。</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>react 里的 css 有两种方案。</p>
<h2 id="传统方案"><a href="#传统方案" class="headerlink" title="传统方案"></a>传统方案</h2><p>传统的给元素加 class ，内容与样式分离。css 写在 css 文件里，然后 <code>import &quot;./style.css&quot;</code> 引入 css 。<br>这种方法的一个弊端在于我们需要特别注意 class 的互相影响问题。如果组件 A 有一个叫做 title 的类，而它引用的另一个组件 B 同样也有一个 title 类，B 组件会继承 A 组件设置的 title 的样式。<br>而为了干掉这个不确定的因素，部分人会选择以组件名为前缀的 class 名字，这样可以有效防止各组件之间的样式冲突。参考 BEM 命名规范。</p>
<h2 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h2><p>因为上一个方案命名的繁琐为人诟病，而 css 没有办法做到自动区分两个重名的 class ，所以有人想，不要 css 了。<br>根据这个思路，很多人，想了很多不同的解决方案。<br>在 github 搜索 “css in js” 可以看到一个完整的列表——版本号、star 数、下载量、package 名，你可以根据需要自行选择好用的方案。<br>这里介绍三种</p>
<ol>
<li><p><a href="https://styled-components.com/docs/basics#installation" target="_blank" rel="noopener">styled-components</a> 在组件内部的 js 文件中写样式代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">const Title = styled.h1`</span><br><span class="line">    font-size: 1.5em;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: palevioletred;</span><br><span class="line">`;</span><br><span class="line">// jsx</span><br><span class="line">&lt;Title&gt; hello &lt;/Title&gt;</span><br></pre></td></tr></table></figure>
<p> 组件之间是彼此分离的，而组件内部内容样式和行为杂糅在了一起，好处是不论这个组件写的如何，不会影响到其他的组件。</p>
</li>
<li><p><a href="https://github.com/gajus/react-css-modules" target="_blank" rel="noopener">react-css-module</a> 配置略麻烦，解决方案比前面的那种纯净一点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import CSSModules from &apos;react-css-modules&apos;;</span><br><span class="line">import styles from &apos;./style.css&apos;;</span><br><span class="line">&lt;h1 styleName=&apos;title&apos;&gt;hello&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>emotion 语法繁琐，有点像内联样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/** @jsx jsx */</span><br><span class="line">import &#123; jsx &#125; from &apos;@emotion/react&apos;</span><br><span class="line">&lt;h1 css=&#123;&#123; color: &apos;red&apos; &#125;&#125;&gt; hello &lt;/h1&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>具体选择什么方案自然是仁者见仁，但是需要注意的是，如果你是打算要建一个 UI 库，那么请选择传统方案。<br>在 CSS in JS 方案中，虽然我们没有写类名，但是在运行的时候， js 会自动为我们生成一个类名，你可以在浏览器的检查元素里看见。<br>在你自己的应用中，这不是什么问题。但是如果是建 UI 库，别人不知道类名，就无法覆盖样式。</p>
<hr>
<p>以上， react 可能只有 js ….</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>redux使用指南</title>
    <url>/2021/03/27/redux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h1><p>redux 帮助我们进行状态（数据）管理。如果你可以不用，那么就没有必要用。<br>如果应用中有以下场景可以考虑使用：</p>
<ol>
<li>某个组件的状态需要共享</li>
<li>某个组件需要在任何地方都可以拿到</li>
<li>一个组件需要改变全局状态</li>
<li>一个组件需要改变另一个组件的状态</li>
</ol>
<h1 id="redux-思路"><a href="#redux-思路" class="headerlink" title="redux 思路"></a>redux 思路</h1><p>所有的变量和处理函数都放在 store 里。<code>var store = Redux.createStore(reducer)</code><br>变量用 state 存储，处理函数是 action . reducer 是一个函数，接收旧的 state , 返回新的 state . 并且负责 state 的初始化和 action 的分类处理 . <code>reducer = function(state, action){...}</code><br>action 参数是一个对象 <code>{type: &quot;&quot;, payload: &quot;&quot;}</code> , 其中 type 表示 action 类型， payload 是 action 函数 的参数。<br>外部获取变量使用 <code>store.getState()</code> 拿到 state 的值。<br><code>store.subscribe(render)</code> 用来监听 action ，一旦 action 被触发 (dispatch) 了，就执行 render 函数。 render 函数负责刷新页面。<br><code>store.dispatch({ type: &quot;add&quot;, payload: 1 })</code> 触发一个类型为 “add” 的 action ， 并且传入参数 1 。在需要调用的时候调用。</p>
<h1 id="原生-js-redux"><a href="#原生-js-redux" class="headerlink" title="原生 js + redux"></a>原生 js + redux</h1><p><a href="https://codesandbox.io/s/redux-with-js-uon9m?file=/src/index.js" target="_blank" rel="noopener">原生 js + redux Demo</a><br>redux 作为一个状态管理工具，同样适用于原生 js 。这里用它实现一个点击加一的效果。</p>
<ol>
<li>在 index.html 里创建一个 id 为 app 的 div 作为根元素。</li>
<li>安装 redux 包</li>
<li><p>声明一个 reducer 函数，传递两个参数 state (数据) 和 action (类型和函数参数) 。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reducer = function (state, action) &#123;</span><br><span class="line">    state = state || &#123;  // init state</span><br><span class="line">        number: 0</span><br><span class="line">    &#125;;</span><br><span class="line">    switch (action.type) &#123; // 事件处理</span><br><span class="line">        case &quot;add&quot;:</span><br><span class="line">            return &#123; number: state.number + action.payload &#125;;</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据 reducer 创建 store</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &quot;redux&quot;;</span><br><span class="line">var store = createStore(reducer);</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听 store 里边的改动。<code>store.subscribe(render)</code></p>
</li>
<li><p>创建 render 函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function render() &#123;</span><br><span class="line">    let str = `</span><br><span class="line">        &lt;div id=&quot;display&quot;&gt;$&#123;store.getState().number&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button id=&quot;add1&quot;&gt;点我加一&lt;/button&gt;</span><br><span class="line">    `;</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML = str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行 render 函数，渲染页面。<code>render()</code></p>
</li>
<li>给 button 添加事件监听，在点击了按钮之后执行 store.dispatch ，发布时间。<br>这里因为 render 的时候会重新弄一个 button 上去，并不是原先的 button 了，如果直接监听 button 的点击事件的话，那么这个函数只能执行一次。所以采用事件委托，监听根节点 #app 的点击事件，然后判断如果是在 button 上的点击则执行接下来的语句。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;app&quot;).addEventListener(&quot;click&quot;, (e) =&gt; &#123;</span><br><span class="line">    if (e.target.id === &quot;add1&quot;) &#123;</span><br><span class="line">        store.dispatch(&#123; type: &quot;add&quot;, payload: 1 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至此效果完成。<br>可以看见我们创建了一个页面，然后给 button 添加了一个事件，如果点击了这个按钮，就发布（ dispatch ） 一个类型为 add 、 参数为 1 的事件。<br>而 store.subscribe(render) 监听到了这个事件，并在响应之后调用 render 函数，从而刷新页面。</p>
<h1 id="react-redux"><a href="#react-redux" class="headerlink" title="react + redux"></a>react + redux</h1><p><a href="https://codesandbox.io/s/redux-with-react-vfq19?file=/src/index.js" target="_blank" rel="noopener">react + redux Demo</a><br>和 react 结合的 redux 和上面几乎没有区别，只是页面的刷新从 js 的刷新变成了 react 的刷新。<br>还是点击加一的例子，步骤 1~5 同上。<br>其余代码如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  function add() &#123;</span><br><span class="line">    store.dispatch(&#123; type: &quot;add&quot;, payload: 1 &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt; &#123;store.getState().number&#125; &lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;add&#125;&gt; 点我加一 &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">function render() &#123;</span><br><span class="line">  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));</span><br><span class="line">&#125;</span><br><span class="line">render();</span><br></pre></td></tr></table></figure></p>
<h1 id="react-redux-1"><a href="#react-redux-1" class="headerlink" title="react-redux"></a>react-redux</h1><p><a href="https://codesandbox.io/s/react-redux-ko0b1?file=/src/App.js" target="_blank" rel="noopener">react-redux Demo</a><br>react-redux 是一个单独的依赖包，为了更便捷地在 react 中使用 redux 。<br>它把组件分成了 UI 组件和容器组件，UI 组件负责 UI 的呈现，而容器组件负责管理数据和逻辑。<br>我们知道，redux 是用来帮助我们管理数据的一个工具。<br>在 react-redux 中，如果一个组件既有 UI 又有业务逻辑，我们需要把它拆分为两个部分：外面是一个容器组件，里边包含一个 UI 组件。<br>依然是这个点击加一的例子。</p>
<ol>
<li>创建 reducer , 创建 store</li>
<li><p>使用 Provider 将 store 传给子组件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Provider &#125; from &quot;react-redux&quot;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;,</span><br><span class="line">    rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件 App 中接收 state . （创建一个 App.js 文件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App(props) &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;props.number&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button onClick=&#123;props.add.bind(this)&#125;&gt;点我加一&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 App 就是 UI 组件，它没有自己的状态，直接接收 props 的 number 并展示在页面上。<br>button 的 click 事件同样也是 props 传进来的。</p>
</li>
<li><p>创建 state 转换成 props 的函数</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">    const &#123; number &#125; = state;</span><br><span class="line">    return &#123; number: number &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 将 state.number 赋值给 props.number , 并返回一个新的对象。</p>
</li>
<li><p>创建 dispatch 转换成 props 的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const mapDispatchToProps = (dispatch) =&gt; &#123;</span><br><span class="line">     return &#123;</span><br><span class="line">         add: () =&gt; dispatch(&#123; type: &quot;add&quot;, payload: 1 &#125;)</span><br><span class="line">         &#125;;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<p> 这里传入的是 dispatch ， 返回一个对象，对象里边有一个 add 函数，在 App 组件中使用 props.add 即可引用该函数。<br> 如果函数不复杂的话可以省去这一步，直接在 App 组件中使用 useDispatch 即可。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const dispatch = useDispatch();</span><br><span class="line">...</span><br><span class="line">&lt;button onClick = &#123;()=&gt;&#123;dispatch(&#123; type: &quot;add&quot;, payload: 1 &#125;)&#125;&#125;&gt;...&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接 UI 和数据逻辑</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(App);</span><br></pre></td></tr></table></figure>
<p> 这里的语法不要写错<code>connection()()</code><br> 第一个 connection() 的返回值是一个函数，然后 App 是返回的这个函数的参数，<br> 形如这样</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(a)&#123;</span><br><span class="line">    a=a+1</span><br><span class="line">    return function fn(b)&#123;</span><br><span class="line">        return a+b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(add(1)(2))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>react-redux 的好处在于在不污染全局变量的条件下，我们不需要将 store 层层传递，只需要在根节点上使用 Provider 就能够让所有的子组件获取 store 的值。</p>
<hr>
<p>以上，如果出现异步操作，action 发出之后，过一段时间再执行 reducer ，那么需要使用中间件 (middleware)。</p>
<hr>
<p>参考文献：<br><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">阮一峰Redux 入门教程</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>redux</tag>
        <tag>react-redux</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化</title>
    <url>/2023/02/10/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="随便聊聊"><a href="#随便聊聊" class="headerlink" title="随便聊聊"></a>随便聊聊</h1><p>提到前端工程化，我想先说一说软件工程。一个完整的软件大致开发步骤应该是“需求分析 - 概要设计 - 详细设计 - 编码 - 测试 - 发布上线”的过程，当然，这只是一个理想化的开发模型，实际在各个公司内部肯定会做一些自适应的调整。但是不管怎么变，这个底层的思想是不变的。<br>如果说你只是一个人在开发一个简单的软件，一两个星期就能搞定的，那你完全可以按照自己的想法来开发。但是如果说这是一个大型复杂的软件，需要多人协作开发完成，那这个团队的每个人都遵循同一套规则会让软件开发更加的顺畅。<br>所以工程化是什么？工程化是一套方法论，通过一整套的规则和一些工具的使用让你的工作更加的高效、让多人协同更加的顺畅、也让最终的软件质量更加的可控。<br>回到前端工程化，随着万维网的发展，B/S 架构承载着越来越多的功能，前端工程化才开始进入我们的视野。为什么？当前后端分离之后，前端才作为一个单独的整体来看待；而当功能变得更加的复杂了之后，才需要一套方案来控制质量。<br>所以前端工程化的目的是解决因功能复杂带来的一系列问题。通过流程的优化、工具的使用、还有团队内的一些规则，来提高开发的效率和代码的质量。<br>但前端的问题并不仅仅在于功能的复杂，还在于前端的飞速发展。ES 的年度更新、TS 的横空出世、Sass、Less 的出现以及各种工具库，他们想让前端变得更简单，却让配置变得更加的复杂了。所以我们聊到前端工程化，总也离不开 Webpack（或者其它打包工具）。因为 Webpack 收敛了纷繁的工具。也因此，除了流程化、规范化之外，自动化也是前端工程化里很重要的一个方面。<br>让工具为开发者服务，而不是成为开发的阻碍。</p>
<h1 id="几个重要的工具"><a href="#几个重要的工具" class="headerlink" title="几个重要的工具"></a>几个重要的工具</h1><ul>
<li>ESlint: 代码格式化工具，统一团队内的代码风格，降低代码风险。</li>
<li>Webpack: 打包工具，将开发者的代码打包成浏览器可以识别的文件。</li>
<li>DevOps: 流水线构建工具，自动化部署，开发者提交代码后自动部署到指定环境，用于后续的测试发布流程。</li>
<li>git: 分支管理工具，便于项目的迭代开发。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000008358748" target="_blank" rel="noopener">segmentfault - 浅谈前端工程化</a><br><a href="https://www.cnblogs.com/ihardcoder/p/5378290.html" target="_blank" rel="noopener">浅析前端工程化</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>同源策略的理解</title>
    <url>/2022/12/07/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="什么叫同源"><a href="#什么叫同源" class="headerlink" title="什么叫同源"></a>什么叫同源</h1><p>协议域名端口号三者相同则为同源。拿 <code>http://www.baidu.com</code> 举例：</p>
<ul>
<li><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> 不同源，协议不同、端口号不同（ http 默认端口号为 80，https 默认端口号为 443 ）</li>
<li><a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a> 不同源，域名不同</li>
<li><a href="http://www.baidu.com:81" target="_blank" rel="noopener">http://www.baidu.com:81</a> 不同源，端口号不同( http 协议默认端口号为 80)</li>
<li><a href="http://www.baidu.com/index" target="_blank" rel="noopener">http://www.baidu.com/index</a> 同源，后面的 <code>/index</code> 是域名下的文件夹，不作为同源判断依据</li>
</ul>
<h1 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h1><p>1995 年，同源策略由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个策略。<br>浏览器的同源策略实际是想要限制两个不同源的网站交互。它想要达成的目标是：在用户访问恶意网站的时候，这个恶意网站无法影响到用户与正常网站之间的交互。<br>为了遵循同源策略衍生出来了三种不同的限制：</p>
<ul>
<li>限制不同源的网站读取 Cookie, LocalStorage, indexDB</li>
<li>限制不同源的网站读取 DOM</li>
<li>限制不同源的网站发送 AJAX 请求</li>
</ul>
<p>但由于万维网的诞生就是为了做资源的链接共享，所以完全限制两个网站之间的交互是不现实的，因此浏览器的目标是控制这个交互的受控。所以我们可以看到，浏览器的同源策略不针对一些纯粹的对资源的操作，比如 img、link、script 等标签的资源引进操作，比如 a 标签的点击跳转。另外，对于 form 表单的提交，同源策略同样不做限制，同源策略只针对读操作，也因此对于 ajax 请求，其实是能够正常发送的，但是浏览器阻止了资源的接收。对于这一点，可以通过自己建一个简单的服务器，接收到请求的时候在服务器端打印 log 来做验证。这里是我建的简单的<a href="https://github.com/wenchuyang/Node.js-Server/commit/65d990db9916c4501932bd463747c12dfbb65b1d#diff-0eb547304658805aad788d320f10bf1f292797b5e6d745a3bf617584da017051" target="_blank" rel="noopener"> nodejs 服务器</a> 。<br>对于同源策略限制的以上三点，单独分析的话：</p>
<ul>
<li>浏览器本地保存了用户的隐私信息，假设恶意网站能够随意读取其他网站的 Cookie 的话，就可以模仿用户登录进而拿到用户的隐私信息。</li>
<li>限制不同源的网站读取 DOM 主要是为了防止恶意网站通过 iframe 调用被攻击网站，等到用户在 iframe 里输入了用户名和密码之后，恶意网站再拿到 iframe 的 DOM 节点中输入的用户名密码，从而获取用户的隐私信息。</li>
<li>ajax 请求的限制源于它的自由度，它可以支持任意请求的发送，也可以拿到网站的响应信息。如果不限制 ajax 的话，那么用户在登录了 A 网站后，再进入 B 网站，B 网站虽然不能直接拿到 A 网站的 Cookie，但是在它向 A 网站发送请求的时候，会携带 A 网站的 Cookie，免除了登录步骤。B 网站就可以通过这种方法拿到 A 网站的用户隐私信息。</li>
</ul>
<h1 id="规避同源的方法"><a href="#规避同源的方法" class="headerlink" title="规避同源的方法"></a>规避同源的方法</h1><p>同源策略对不同源的网站之间的通信做出了诸多的限制，但实际使用中又存在需要跨域的情况，因此就有了“规避同源的方法”这个需求。在这个基础上，一方面是开发者通过一些“特性”来规避同源策略，另一方面 W3C 也提供了一些方法来做不同源之间的通信。这里列举一部分。</p>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>jsonp 利用 script 标签不受同源策略限制的漏洞，通过动态创建 script 标签，并把 src 指向目标地址的方式发送请求，通过服务器调用 callback 来获取响应。<br>具体实现 <a href="https://blog.csdn.net/writing_happy/article/details/80328774" target="_blank" rel="noopener">点这里</a></p>
<h2 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h2><p>HTML5 引入了跨文档通信 API，A 网站通过 <code>window.postMessage(&#39;message&#39;, &#39;http://B.com&#39;)</code> 向 B 网站发送请求，B 网站通过监听 message 事件来拿到消息。</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>跨域资源共享是 W3C 提供的一种解决 AJAX 跨域问题的方法，通过设置 HTTP 响应头 Access-Control-Allow-Origin 来指定哪些源可以对该资源进行跨域访问来解决同源问题。相当于告诉浏览器这个来源是自己人，可以让它进行访问。这其实在一方面印证了上面所说的，浏览器并不限制 ajax 请求的发送，它限制的是响应的读取。<br>CORS 相关的详细可访问阮一峰老师的<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">这篇文章</a>来查看。</p>
<h2 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h2><p>nginx 是利用反向代理对同源策略的一种规避。<br>首先了解一下什么是代理，试想一个场景：用户想要访问 google.com ，但是因为安全上网策略无法访问，所以挂了个代理，代理拦截了用户发的请求，然后转发给 google.com，google.com 发送响应给代理服务器，接着代理服务器又返回给用户，这就完成一次正向代理的过程。正向代理其实是，我知道我要去 A 商店买东西，但是我找不到路，那么正向代理拿着我的钱去了 A 商店，然后又把货物给我运了回来。<br>而反向代理则是，我想要买东西，但是我不在乎去哪里买，我只要找到这个反向代理，把钱给他，然后让他把货物给我。<br>因为同源策略限制的只是不同源的网站之间的交互，服务器向服务器发请求，这个过程是不受同源策略限制的。所以 nginx 做的操作是：它把 origin 设置为和网站一致，然后接收网站发来的请求，再去向服务器发请求，拿到服务器的响应后，又把响应返回给网站。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">MDN 浏览器的同源策略</a><br><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">阮一峰 浏览器同源政策及其规避方法</a><br><a href="https://tsejx.github.io/javascript-guidebook/computer-networks/web-security/same-origin-policy/" target="_blank" rel="noopener">JavaScript GuideBook</a><br><a href="https://www.w3.org/Security/wiki/Same_Origin_Policy" target="_blank" rel="noopener">W3C same origin policy</a><br><a href="https://code.google.com/archive/p/browsersec/wikis/Part2.wiki#Same-origin_policy" target="_blank" rel="noopener">浏览器安全手册</a><br><a href="https://www.rfc-editor.org/rfc/rfc6454" target="_blank" rel="noopener">同源策略草案</a><br><a href="https://www.cnblogs.com/bala/p/15990013.html" target="_blank" rel="noopener">同源策略的分析随笔</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>react开发环境搭建</title>
    <url>/2021/03/25/react%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="codesandbox"><a href="#codesandbox" class="headerlink" title="codesandbox"></a>codesandbox</h1><p><a href="https://codesandbox.io/s/new" target="_blank" rel="noopener">codesandbox</a> 可以帮助你快速开始写你的 react 项目。你可以在这里直接创建一个 react 项目。<br>新建 sandbox 的时候选择 React 模板，需要依赖的时候在文件下方的 Dependencies 里边添加依赖即可。<br>除此之外，它还支持链接到你的 github ， 你可以将这里的项目直接 push 到你的 github 仓库中。<br>点击右侧的猫，输入项目名，然后点击 Create new respository on Github 即可。当然同理，你也可以将你的 github project 导入进来。<br>使用流畅，不过不支持自定义 webpack 配置，需要的可以点击 topbar 上的 File ，export 到本地进行开发。</p>
<h1 id="原始的-react"><a href="#原始的-react" class="headerlink" title="原始的 react"></a>原始的 react</h1><p>在你的任意项目中，或者是在 <a href="https://jsbin.com/?html,output" target="_blank" rel="noopener">jsbin</a> 等在线编辑器中，引入 react 和 react-dom 包，即可进行开发。</p>
<ol>
<li>引入资源文件。在 <a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a> 中搜索 react ， 选择 <code>./umd/react.development.min.js</code> 开发包，引入到项目中。 react-dom 同理。</li>
<li><p>开始写。你可以参考并改写<a href="https://jsbin.com/jaratof/3/edit?html,js,output" target="_blank" rel="noopener">这里</a>的代码来尝试 react 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  return React.createElement(&quot;button&quot;, &#123;</span><br><span class="line">    onClick: ()=&gt;alert(1111)</span><br><span class="line">  &#125;, &quot;Click&quot;)</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(React.createElement(App), document.getElementById(&quot;xxx&quot;))</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(React.createElement(&quot;button&quot;, &#123;</span><br><span class="line">    onClick: ()=&gt;alert(1111)</span><br><span class="line">  &#125;, &quot;Click&quot;), document.getElementById(&quot;xxx&quot;))</span><br></pre></td></tr></table></figure>
<p>以上代码效果相同，都是创建一个 button 并挂到 id 为 “xxx” 的页面元素下。</p>
</li>
</ol>
<h1 id="使用-jsx-的-react"><a href="#使用-jsx-的-react" class="headerlink" title="使用 jsx 的 react"></a>使用 jsx 的 react</h1><p>jsx 省去了 <code>React.createElement()</code> , 直接使用类似于 html 的语法来写代码，而配置其他的工具来将代码解析成 <code>React.createElement()</code> 。<br>使用 <a href="https://www.babeljs.cn/repl" target="_blank" rel="noopener">babel 在线翻译</a> 可以实时查看 jsx 翻译成 js 之后的代码。</p>
<h2 id="在线开发"><a href="#在线开发" class="headerlink" title="在线开发"></a>在线开发</h2><p>在 jsbin 中，点击 javascript 可以切换到 jsx 语法，你可以在此书写你的代码。<a href="https://jsbin.com/jaratof/5/edit?html,js,output" target="_blank" rel="noopener">这是使用 jsx 语法改写的简单的例子</a>，和上一步中的代码功能一致。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  return &lt;button onClick=&#123;()=&gt;alert(1111)&#125;&gt;Click Me&lt;/button&gt;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;App/&gt;, document.getElementById(&quot;xxx&quot;))</span><br></pre></td></tr></table></figure></p>
<h2 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h2><p>本地开发和使用 jsbin 不同的是你需要自己配置 babel 来解析 JSX 代码。<br>如果碰到问题请参考<a href="https://babeljs.io/docs/en/babel-cli" target="_blank" rel="noopener">Babel官方文档</a></p>
<ol>
<li>创建一个文件夹，用来存放你的环境和源码。</li>
<li><code>npm init</code> 创建一个合法的 package.json 文件</li>
<li><code>npm install --save-dev @babel/core @babel/cli @babel/preset-env</code><br> <code>npm install --save @babel/polyfill</code>执行这两行命令安装 babel 包。</li>
<li><p>创建一个 config 文件 <code>babel.config.json</code>, 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;presets&quot;: [</span><br><span class="line">         [</span><br><span class="line">             &quot;@babel/env&quot;,</span><br><span class="line">             &#123;</span><br><span class="line">                 &quot;targets&quot;: &#123;</span><br><span class="line">                 &quot;edge&quot;: &quot;17&quot;,</span><br><span class="line">                 &quot;firefox&quot;: &quot;60&quot;,</span><br><span class="line">                 &quot;chrome&quot;: &quot;67&quot;,</span><br><span class="line">                 &quot;safari&quot;: &quot;11.1&quot;</span><br><span class="line">                 &#125;,</span><br><span class="line">                 &quot;useBuiltIns&quot;: &quot;usage&quot;,</span><br><span class="line">                 &quot;corejs&quot;: &quot;3.6.5&quot;</span><br><span class="line">             &#125;</span><br><span class="line">         ]</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>npm install --save-dev @babel/plugin-transform-react-jsx</code> 安装 plugin-transform-react-jsx ，这样才能识别 jsx 语法。</p>
</li>
<li><p>修改 babel.config.json 文件，添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">     [</span><br><span class="line">     &quot;@babel/plugin-transform-react-jsx&quot;</span><br><span class="line">     ]</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
<p>与 presets 平级。</p>
</li>
<li><code>npx babel main.jsx --out-file main-compiled.js</code> 将 main.jsx 文件编译成 main-compiled.js 文件，然后在你的 index.html 中引入 main-compiled.js 文件即可。当然，不要忘了在你的 index.html 文件中引入 react 和 react-dom .</li>
<li><code>npx babel src/js --watch --out-dir dist/js</code> 如果你需要实时更新的话，这个命令会帮你开一个进程，实时关注你的 src/js 文件夹内的更新，一旦有了改动，会输出到 dist/js 文件夹中。</li>
</ol>
<h1 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h1><p>借助 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a> 来构建一个本地项目。</p>
<ol>
<li>创建一个 demo 文件夹，然后进入 demo，执行 <code>yarn add create-react-app</code> 或者 <code>npm install create-react-app</code>。或者全局安装。</li>
<li><code>npx create-react-app my-app</code> 或者 <code>yarn create react-app my-app</code> 创建一个名字是 my-app 的项目。</li>
<li>此时你已经得到一个完整的 react 项目了，<code>cd my-app</code> 然后执行<code>npm start</code> 或者 <code>yarn start</code> 可以开启一个本地服务，预览你的项目。</li>
<li>执行 <code>npm run build</code> 或者 <code>yarn build</code> 之后可以得到一个 build 文件夹。在你的 <code>package.json</code> 文件中添加 <code>&quot;homepage&quot;: &quot;https://yourusername.github.io/my-app/build&quot;</code> 之后再进行 build ，然后将你的代码上传至你的 GitHub ，配置 github page 之后，可以在线预览你的项目。</li>
</ol>
<p>附（各文件作用）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package.json 依赖和脚本等东西</span><br><span class="line">yarn.lock 目前安装的东西，真实使用的东西。一个记录。</span><br><span class="line">src 所有的源码</span><br><span class="line">    index.js 入口文件</span><br><span class="line">    App.js 业务逻辑</span><br><span class="line">public 公开的文件，一般是常年不更新的代码</span><br><span class="line">build 构建之后的代码</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>create-react-app</tag>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>任意组件通信</title>
    <url>/2021/03/26/%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h1><p>参考父子组件通信，如果兄弟组件通信的话，应该是子A传父-父传子B-子B传父-父传子A。如果堂兄弟…<br>很麻烦，所以使用发布-订阅模式。<br>假设有一个变量，在家族树里的每个人都需要用到。那么如果 成员 A 需要操作这个变量，就发布一个事件，说：”我要改这个变量了”。<br>我们加一个人进来，观察这个公有变量的动态，一旦有人发布了 “我要改这个变量了” 这个事件，那么就做出相应的响应——修改这个变量，然后再把信息发布给父组件，由父组件把这个新变量层层传递下去，从而避免了子传父父再传子的尴尬局面。<br><a href="https://codesandbox.io/s/eventhub-xzn6t?file=/src/index.js" target="_blank" rel="noopener">Demo</a><br>下面实现一个简单的发布-订阅模式</p>
<ol>
<li><p>写一个 eventHub ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fnLists = &#123;&#125;</span><br><span class="line">var eventHub = &#123;</span><br><span class="line">    trigger(eventName, data) &#123; // 发布</span><br><span class="line">        let fnList = fnLists[eventName]</span><br><span class="line">        if(!fnList) &#123; return &#125;</span><br><span class="line">        for(let i = 0; i&lt;fnList.length; i++) &#123;</span><br><span class="line">            fnList[i](data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    on(eventName, fn) &#123;  // 订阅</span><br><span class="line">        if(!fnLists[eventName]) &#123;</span><br><span class="line">            fnLists[eventName] = []</span><br><span class="line">        &#125;</span><br><span class="line">        fnLists[eventName].push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加全局变量和事件处理函数<br>事件处理函数用来监听（订阅）事件并作出响应，通过管家来修改变量并更新页面，而不允许其他的组件擅自修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var money = &#123;</span><br><span class="line">    amount: 10000</span><br><span class="line">&#125;</span><br><span class="line">var x = &#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">        eventHub.on(&quot;pay&quot;, function(data) &#123;  // 订阅事件 &quot;pay&quot;</span><br><span class="line">            money.amount -= data</span><br><span class="line">            render()  // 更新页面</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">x.init()</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件内部发布事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Son1 extends React.Component &#123;</span><br><span class="line">    pay() &#123;</span><br><span class="line">        eventHub.trigger(&quot;pay&quot;, 100)  // 发布事件 &quot;pay&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&quot;son&quot;&gt;amount: &#123;this.props.amount&#125;</span><br><span class="line">                &lt;button onClick=&#123;this.pay&#125;&gt;付款100&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><p>redux 帮助我们进行状态管理，在这里可以看做是发布-订阅模式的一个实现。<br>它将变量声明和处理函数统一放到了 store 里边，然后使用 store.subscribe() 来订阅事件，使用 store.dispatch({type: “事件类型”, payload: “参数” }) 来发布事件。<br>使用 redux 改写上面的 <a href="https://codesandbox.io/s/redux-6j6gt?file=/src/index.js" target="_blank" rel="noopener">demo</a>。</p>
<ol>
<li>redux 帮我们封装了一个 eventHub ，所以不用写。但是要<code>npm install redux</code> 来下载它。</li>
<li>添加 store （添加全局变量和事件处理函数）。这里的事件处理函数会我们只需要关心值的变化，redux 会帮我们重新 render 页面。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &quot;redux&quot;;</span><br><span class="line">function money(state, action) &#123;</span><br><span class="line">  if (typeof state === &quot;undefined&quot;) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      amount: 10000</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &quot;pay&quot;:</span><br><span class="line">      return &#123; amount: state.amount - action.payload &#125;;</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var store = createStore(money);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>其中 money 的参数 state 是我们要使用的全局变量，而 action 是事件的类型，根据事件类型选择处理函数。所有的处理函数和全局变量都封装在了这里。通过 <code>store.getState().amount</code> 来获取 amount 的值。</p>
<ol start="2">
<li>dispatch 事件（组件内部发布事件）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Son1 extends React.Component &#123;</span><br><span class="line">    pay() &#123;</span><br><span class="line">        store.dispatch(&#123; type: &quot;pay&quot;, payload: 100 &#125;);  // 发布事件 &quot;pay&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&quot;son&quot;&gt;amount: &#123;this.props.amount&#125;</span><br><span class="line">                &lt;button onClick=&#123;this.pay&#125;&gt;付款100&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h1><p>Context 给我们创造一个局部的全局变量（只在 provider 内部的 component 里算是全局变量，其他地方无法访问），同样可以用来做组件通信。使用 context 修改的 <a href="https://codesandbox.io/s/context-zujiantongxin-sjqv8?file=/src/index.js" target="_blank" rel="noopener">demo</a></p>
<ol>
<li><code>const MoneyContext = React.createContext({});</code> 创建一个 context。其中 <code>{}</code> 是初始化这个 context 的值。</li>
<li><p>提供一个你需要用的变量，和修改这个变量的方法。这里我们在根组件上设置 state 的值。这里因为是 state 里的值，在 setState 完成之后 react 会帮我们重新 render 页面，所以也只需要关心值的变化。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">    amount: 10000,</span><br><span class="line">    pay: (amount) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        amount: this.state.amount - amount</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 然后将 this.state 通过 Provider 的 value 属性传出去</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;MoneyContext.Provider value=&#123;this.state&#125;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Dad1 /&gt;</span><br><span class="line">        &lt;Dad2 /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/MoneyContext.Provider&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要调用的地方使用 Consumer 接收这个值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;MoneyContext.Consumer&gt;</span><br><span class="line">    &#123;(value) =&gt; (</span><br><span class="line">      &lt;div className=&quot;dad&quot;&gt;</span><br><span class="line">        Dad1 amount: &#123;value.amount&#125;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; &#123; value.pay(10); &#125;&#125;&gt;</span><br><span class="line">          付款10</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;Son1 /&gt;</span><br><span class="line">        &lt;Son2 /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">&lt;/MoneyContext.Consumer&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>总的来说</p>
<ol>
<li>使用 eventHub/eventBus 来通信。用一个组件来监听某个事件，另一个组件触发这个事件并传递参数，即可实现两个组件的通信。缺点是当事件很多的时候，代码会变得略复杂。</li>
<li>使用 redux ，每次操作的时候触发一个 action ，这个 action 会根据旧的 state 生成新的 state 。使用 store.subscribe 来监听 state 的变化，一旦 state 变化了就重新 render 页面。</li>
<li>使用 context ，创造一个局部的全局变量。然后通过 provider 将这个变量和修改变量的函数传递出去。使用 consumer 来接收变量和函数，调用函数从而实现通信。利用 class 组件内部的 this.state 来实现页面的 render 。</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>context</tag>
        <tag>redux</tag>
        <tag>组件通信</tag>
        <tag>eventHub</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环、宏任务与微任务</title>
    <url>/2022/12/08/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="简单介绍-JavaScript-的事件执行"><a href="#简单介绍-JavaScript-的事件执行" class="headerlink" title="简单介绍 JavaScript 的事件执行"></a>简单介绍 JavaScript 的事件执行</h1><p>让我们从一段简单的代码开始：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn1() &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">&#125;</span><br><span class="line">function fn2() &#123;</span><br><span class="line">  console.log(2)</span><br><span class="line">&#125;</span><br><span class="line">function fn3() &#123;</span><br><span class="line">  console.log(3)</span><br><span class="line">&#125;</span><br><span class="line">fn1()</span><br><span class="line">fn2()</span><br><span class="line">fn3()</span><br></pre></td></tr></table></figure></p>
<p>上面这段代码一目了然，js 在执行到这段代码的时候会先声明三个函数，然后依次执行，最后的输出结果为 123。你把它想象成核酸检测的长长的队伍，js 的执行就是一个检测窗口，所有的人（代码）排列在那里，依次检测（执行），然后离开。这是 js 主线程在接收到执行这段代码的信息的时候做的事情。<br>上面那段代码我们改一下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn1() &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">&#125;</span><br><span class="line">function fn2() &#123;</span><br><span class="line">  fn1()</span><br><span class="line">  console.log(2)</span><br><span class="line">&#125;</span><br><span class="line">function fn3() &#123;</span><br><span class="line">  fn2()</span><br><span class="line">  console.log(3)</span><br><span class="line">&#125;</span><br><span class="line">fn3()</span><br></pre></td></tr></table></figure></p>
<p>在 fn2 和 fn3 中添加了对其他函数的调用，此时调用 fn3 ，应该是怎么样的呢？<br>fn3 入栈，fn2 入栈，fn1 入栈，fn1 调用结束，输出 1，fn2 调用结束，输出 2，fn3 调用结束，输出 fn3，任务结束。<br>js 主线程是一个先进先出的任务队列；在调用函数的时候被调用的函数进入调用栈，后进先出。这是 js 执行的基本概念。</p>
<h1 id="事件循环机制的深入探讨"><a href="#事件循环机制的深入探讨" class="headerlink" title="事件循环机制的深入探讨"></a>事件循环机制的深入探讨</h1><p>上面我们讲了 js 执行的基本情况，但如果有些操作需要等很久呢？<br>因为 js 是单线程、非阻塞的，如果这些需要等很久的操作不被搁置的话，那就意味着线程被阻塞住了。因此在遇到这些操作的时候，js 会主动把它们挂起来，等到合适的时机再继续执行。<br>那么什么是合适的时机呢？<br>在需要等很久的操作（异步操作）终于有了结果的时候，js 把这个操作挂到任务队列上，等到当前任务执行完毕的时候，就去任务队列上把这个任务取出来继续执行。<br>把上面的例子再稍微改一下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn1() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">function fn2() &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;settimeout&quot;);</span><br><span class="line">    fn1();</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure></p>
<p>在执行 fn2 的时候先遇到了 setTimeout，然后把这个 setTimeout 先挂起来，等到 fn1 执行完毕之后再执行这个 setTimeout。<br>所以设置 setTimeout 延时多少秒，最后实际的延时时间与设置的并不一致，是因为设置的延时时间只是告诉 js 引擎在这一段时间过后，把这个 setTimeout 内的函数加到执行队列里去，等到当前任务执行完毕后再执行。这个当前任务执行的时间，就是实际延时时间与设置的延时时间之间的差值。<br>这些需要被挂起的任务分为宏任务和微任务，其中 setTimeout、setInterval 是宏任务，Promise.then 里边是微任务。<br>js 执行时先执行微任务队列，等到微任务队列清空之后再执行宏任务，如此循环往复，直到主线程中所有任务执行完毕。这就是 js 的事件循环机制。<br>最后，让我们以一个例子来分析一下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">   console.log(1)</span><br><span class="line">   new Promise((resolve) =&gt; &#123;</span><br><span class="line">      console.log(2)</span><br><span class="line">      resolve()</span><br><span class="line">   &#125;).then(() =&gt; &#123;</span><br><span class="line">      console.log(3)</span><br><span class="line">   &#125;)</span><br><span class="line">   setTimeout(() =&gt; &#123;</span><br><span class="line">      console.log(4)</span><br><span class="line">   &#125;, 0)</span><br><span class="line">   new Promise((resolve) =&gt; &#123;</span><br><span class="line">      console.log(5)</span><br><span class="line">      resolve()</span><br><span class="line">   &#125;).then(() =&gt; &#123;</span><br><span class="line">      console.log(6)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure></p>
<p>主线程执行 test 方法，先调用 <code>console.log(1)</code>，接着执行 Promise 里的 <code>console.log(2)</code>，在执行到 <code>resolve()</code> 的时候说明这个 promise 已经结束了，那么把 then 里面的内容放到微任务队列。<br>继续执行 setTimeout，0 秒后放到宏任务队列。<br>执行 Promise 里的 <code>console.log(5)</code>，然后 resolve，把 then 里面的内容放到微任务队列。<br>至此任务队列里的代码执行完毕，开始执行微任务队列代码，先是 <code>console.log(3)</code>，接着是 <code>console.log(6)</code>。<br>微任务队列清空。开始从宏任务队列取出任务来执行，即 <code>console.log(4)</code>。<br>所以最终的执行结果是 125364。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" target="_blank" rel="noopener">WHATWG event loops</a><br><a href="https://juejin.cn/post/6873424205791100942" target="_blank" rel="noopener">JS事件循环之宏任务与微任务</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端历史</title>
    <url>/2022/11/25/%E5%89%8D%E7%AB%AF%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<h1 id="一切的起点"><a href="#一切的起点" class="headerlink" title="一切的起点"></a>一切的起点</h1><p>事情起源于信息共享。Tim Berners-Lee 受命开发一套软件系统，供 CERN 研究人员分享、更新、查阅研究报告。<br>超文本（HyperText）是 Ted Nelson 在 1965 年提出来的一个概念，不同的信息之间用超文本链接起来，点击就可以进入这个信息结点，而李爵士设计的万维网，就是这个概念的实现。<br>万维网的核心部分是由三个标准构成的：<br>统一资源定位符（URL），根据统一资源定位符，可以找到这个资源。<br>超文本传送协议（HTTP），规定客户端和服务器怎样交流，允许用户通过 URL 访问资源。<br>超文本标记语言（HTML），定义超文本文档的结构和格式。<br>浏览器、服务器、超文本传输协议，这三者就是前端最初的模样。因为万维网的创建就是为了文档共享，所以你可以看到 HTML 本质上就是一个 document，所以初代 HTTP 协议只规定了 GET 请求，响应格式也只支持 HTML。而你也很容易就能理解为什么 HTTP 是一个无状态的协议，因为它的诞生就是为了请求文档，因为互联网的精神是共享。</p>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h2><p>每个信息都有唯一的统一资源标识符 URI (uniform resource identifier)，相当于我们的身份证号；同时，每个信息还有唯一的统一资源定位符 URL (uniform resource locator)，相当于唯一的家庭住址。只要输入 URL，就能够根据 URL 就能找到这条信息。<br>与之相关的概念还有统一资源命名 URN (uniform resource name)，通过名字来唯一标识资源。<br>URI 是一种抽象的概念，而 URL 和 URN 都是这个概念的具象化。也因此，在一些场景中，你可以把 URI 同化为 URL。但实际上，URL 和 URN 都是 URI 的子集。</p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP 全称是 Hypertext Transfer Protocol，超文本传输协议，是基于 TCP/IP 的应用层协议，采用 BS 架构（浏览器-服务器架构），规定了客户端和服务器的通信格式，默认使用 80 端口。<br>客户端按照这个格式发送请求，服务器端按照这个格式解析请求并以此格式发送响应。</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML 全称是 Hyper Text Markup Language ，超文本标记语言，不论是超文本，还是标记语言，都是早已有之的概念。<br>前面提到过超文本，你可以简单地把它理解为 a 标签。至于标记语言，在最早的时候是出版业的一个概念，在文字打印的时候做一些标记，字体字号，加黑居中等等。这一点我们仍旧可以在现在的 HTML 中看到，文件开头用 doctype 声明文档类型让浏览器用正确的方法来解析这个文件，文件内用各种标签让浏览器以不同的逻辑来做渲染，使这个页面正确地展示在我们面前。</p>
<h1 id="HTTP-的历史"><a href="#HTTP-的历史" class="headerlink" title="HTTP 的历史"></a>HTTP 的历史</h1><ul>
<li>1991 年，伴随着万维网的亮相，初代 HTTP 也走入了大众的视野，在后来的 HTTP 发展史中，称它为 HTTP/0.9。在这个版本中，只能发布 GET 请求，规定服务器返回 HTML 格式的字符串。</li>
<li>1995 年初成立了 HTTP 工作组，称为 HTTP WG , 由 Dave Raggett 领导，标准化和扩展化该协议，并把它们记录为官方 RFC。</li>
<li>1996 年 5 月，HTTP/1.0 发布，增加了 POST 命令和 HEAD 命令，可以发送任何格式的内容，并且改变了 HTTP 请求和响应的格式，新增了 HTTP header，用来描述元数据，并且增加了响应的状态码。事实上，在 HTTP/1.0 发布之前，未正式发布的 HTTP/1.0-draft 已经被很多浏览器和服务器使用了。</li>
<li>1997 年 1 月，时隔半年，HTTP/1.1 发布，加入了持久化连接，建立 TCP 连接之后保持一段时间的连接，可以让一个 TCP 连接被多个请求复用，提高请求的效率。另外除了原有的 POST 和 GET 外，还增加了很多请求方法，PUT、PATCH、HEAD、OPTIONS、DELETE。HTTP/1.1 </li>
<li>2015 年，HTTP/2 发布，HTTP/2 主要的目标是提高请求的速度，减少请求时间。为此增加了二进制分帧、多路复用、服务器推送、头部压缩等新特性。只用于 HTTPS 加密连接。<br>HTTPS 指的是，在 HTTP 协议的基础上套接一层 SSL 做数据的加密。SSL(Secure Socket Layer) 安全套接层，在 TCP/IP 四层概念模型（应用层、传输层、网络层、数据链路层）中介于应用层和传输层之间，应用层数据不直接传递给传输层，而是传递给 SSL 层，经过加密之后再进行传输。</li>
<li>2022 年，HTTP/3 发布。在 HTTP/2 中采用了多路复用来解决 TCP 的队头阻塞问题，但即使是多路，在每个队头仍然存在少见的队头阻塞问题，因此 HTTP/3 决定不再使用 TCP/IP 连接，而是使用 QUIC + UDP。<br>从 HTTP 的发展我们可以看见，它从一开始就是为了解决实际问题出现的。它的诞生是为了传输 HTML 文件；随着 web 的发展，人们需要传输更多类型的文件，需要各种标识，所以有了 HTTP/1.1；而在满足基本的传输需求之后，随之而来的性能和安全问题也被提上了日程，因此有了接下来的 HTTP/2 、 HTTP/3 以及 HTTPS。</li>
</ul>
<h1 id="HTML-的历史"><a href="#HTML-的历史" class="headerlink" title="HTML 的历史"></a>HTML 的历史</h1><ul>
<li>1990 年，HTML 伴随着 WWW 的诞生而诞生。</li>
<li>1994 年 10 月，W3C 成立，负责维护和制定 web 相关的标准。</li>
<li>1995 年 11 月，HTML 2.0，在 2000 年 6 月被宣布过时。</li>
<li>1996 年 1 月，HTML 3.2。</li>
<li>1997 年 11 月，HTML 4.0。</li>
<li>1999 年 12 月，HTML 4.01 以 XML 语法重新构建，比之前严格。值得一提的是，W3C 在随后的 2000 年 1 月，就推出了 XHTML1.0 ，试图以严格的语法和极低的容错性规范已存在的种种不规范的行为。在那之后的 2001 年 5 月，又发布了 XHTML 1.1。</li>
<li>2004 年，各大浏览器开发商组成了 WHATWG 小组，在 HTML 4.01 的基础上继续开发 HTML 5。</li>
<li>2006 年，W3C 放弃 XHTML 2.0。</li>
<li>2007 年，W3C 参考 WHATWG 拟定的 HTML 5 继续发展 HTML。</li>
<li>2014 年 10 月，W3C 正式发布 HTML 5.0。 </li>
</ul>
<h1 id="CSS-的发展"><a href="#CSS-的发展" class="headerlink" title="CSS 的发展"></a>CSS 的发展</h1><p>在很早以前，我刚学前端的时候听说过一句话，大致意思是：如果说 HTML 是网页的骨架，那么 CSS 就是它的皮囊。在我当时的理解里，前端就是 HTML + CSS + JS ，结构、表现和行为，他们控制着我们面前的网页。<br>把目光拉远，才发现原来应该是浏览器 + 服务器 + 传输协议，当然这是后话，定义总是会让它变得狭隘，君子不器。<br>总的来说，CSS 在前端页面中扮演着点缀的作用，它丰富了样式，控制着网页的外观。<br>从 HTML 诞生伊始，就已经有了 CSS 的雏形。但当时 CSS 还不是 CSS，只是样式。李爵士当时的想法是在浏览器端以一个简单的样式表实现样式，这样每个浏览器都可以决定如何更好地向用户展示页面，而他当时也是这样编写他的第一个浏览器的。<br>只能说，结构与样式分离的思想一直都在，只是从浏览器，转换到了网页上。</p>
<ul>
<li>1994 年 10 月，Hakon Wium Lie 发布了<a href="https://www.w3.org/People/howcome/p/cascade.html" target="_blank" rel="noopener">Cascading HTML style sheets</a>初稿。Bert Bos 对这份初稿做出了回应，当时他正在开发 Argo 浏览器——一个带有样式表的高度可定制浏览器。Argo 的一个目标是可以兼容除 HTML 外的其它标记语言，而这也成为了 CSS 的目标，因此 Cascading HTML style sheets 变成了 Cascading style sheets。</li>
<li>1995 年，W3C 参与 CSS 规范的制定，在一次研讨会上，Microsoft 的 Thomas Reardon 承诺在即将推出的 Internet Explorer 版本中支持 CSS。<br>而在 1995 年年底，Netscape 的 Lou Montulli 也加入了在浏览器上支持 CSS 的计划。</li>
<li>1996 年 12 月，W3C 推出了 CSS 1。</li>
<li>1998 年 5 月，W3C 发布 CSS2。</li>
<li>2004 年 2 月，推出 CSS2.1，修改了 CSS2 中的一些错误，并增加一些扩展内容。</li>
<li>2011 年 6 月，CSS3 推出，与之前的 CSS 版本不同的是，CSS3 被分为了多个模块单独升级，统称为 CSS3。</li>
<li>2011 年 6 月，CSS3 Color Module 发布；同年 9 月，Selectors 和 Namespaces 发布；2012 年 6 月，Media Queries 发布……</li>
</ul>
<h1 id="JavaScript-的发展"><a href="#JavaScript-的发展" class="headerlink" title="JavaScript 的发展"></a>JavaScript 的发展</h1><p>Netscapt Navigator 浏览器如日中天的时候，为了控制浏览器行为，避免不必要的服务器连接操作，JavaScript 作为可嵌入网页的脚本语言应运而生。</p>
<ul>
<li>1995 年 5 月，Brendan Eich 设计完成了第一版，叫做 Mocha，1995 年 9 月改为 LiveScript，同年 12 月，改名为 JavaScript，试图借着 Java 的声势推广开来。</li>
<li>1996 年 3 月，Netscape Navigator 2.0 正式内置了 JavaScript。<br>此时仍旧是 Netscape 与微软的浏览器大战期间，1996 年 8 月，不甘示弱的微软模仿 JavaScript 开发了 JScript，内置于 IE 3.0。</li>
<li>1996 年 11 月，Netscape 决定将 JavaScript 提交给国际标准化组织 ECMA (European Computer Manufacturers Association)，希望 JavaScript 能成为国际标准。</li>
<li>1997 年 7 月，ECMA 发布 ECMA-262 的第一版（ECMAScript 1.0），规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。因此，ECMAScript 是 JavaScript 的标准，而后者是前者的实现。<br>而事实上，JavaScript 不仅仅实现了 ECAMScript，还同时包含了 DOM (Document Object Model, 文档对象模型) 和 BOM (Browser Object Model, 浏览器对象模型)，DOM 用于提供与网页内容进行交互的方法和接口，BOM 用于提供与浏览器内容进行交互的方法和接口。网页从此不再是单纯的一个展示页面了。</li>
<li>1998 年 6 月，ECMAScript 2.0 发布。</li>
<li>1999 年 12 月，ECMAScript 3.0 发布，得到了广泛支持。<br>而 ECMAScript 4.0 因为过于激进被废除，部分功能在 2008 年 7 月发布为 ECMAScript 3.1。</li>
<li>2009 年 12 月，ECMAScript 5.0 发布。</li>
<li>2011 年 6 月，ECMAScript 5.1 发布，并且成为 ISO 国际标准。2012 年底，所有主要浏览器都支持 ECMAScript 5.1 版的全部功能。</li>
<li>2015 年 6 月，ECMAScript 6 正式发布，并且更名为 ECMAScript 2015，计划以后每年发布一个 ECMAScript 版本。</li>
<li>2016 年 6 月，《ECMAScript 2016 标准》发布。</li>
<li>2017 年 6 月，《ECMAScript 2017 标准》发布，正式引入 async。</li>
</ul>
<h1 id="浏览器大战"><a href="#浏览器大战" class="headerlink" title="浏览器大战"></a>浏览器大战</h1><p>浏览器大战无疑是所有的前端开发人员无法忽略的一个部分，因为它的后遗症我们至今还能略窥一二。IE 兼容不知道是多少前端工程师的噩梦。<br>李爵士在创建万维网的同时创建了第一个浏览器 WorldWideWeb ，后来更名为 Nexus，于 1991 年于 NeXTSTEP 平台发布。</p>
<ul>
<li>1992 年底，陆续出现了其它浏览器。</li>
<li>1993 年出现的浏览器中最具影响力的是 Mosaic，由美国国家超级电脑应用系统（NCSA）开发，并授权多家公司让他们创造自己的产品。<br>Mosaic 的开发者之一马克·安德森于 1994 年成立了 Mosaic Communications Corporation 公司，并开发了 Mosaic Netscape 浏览器，后因为法律问题改名为 Netscape Communications Corporation，也就是我们后来熟知的网景通讯公司，浏览器也改名为 Netscape Navigator，很快该浏览器统领了浏览器市场。</li>
<li>1995 年，微软在 Mosaic 基础上开发了 Internet Explorer，通过 Windows 搭售。IE 开始进入浏览器市场。<br>IE3 于 1996 年 8 月发布，在 CSS1 尚未成为 W3C 推荐标准的时候率先支持了 CSS1，Netscape Navigator 4.0 随之也支持了 CSS1。<br>他们为了超越彼此，给自己的浏览器增加了很多新的功能。一方面促进了互联网的快速发展，另一方面却因为忽视标准，为兼容问题埋下了隐患。<br>标准还在那里，但互联网永远是实用大于理论，开发者面向 IE/Netscape 开发网页。后来我们知道，微软在 IE 里面加的部分不符合标准的特性使得有些网页只能用 IE 打开。<br>这场对决最终在 1998 年底以 IE 胜出落幕。当 IE 一家独大的时候，浏览器创新的脚步就慢了下来。安全问题随之而来。<br>与此同时，失败的 Netscape 开放了源码，该产品使用 Mozilla 的名称，在 2002 年推出 1.0 版。它的衍生产品之一 Firefox 于 2004 年推出 1.0 版，是的，就是我们熟悉的火狐浏览器。<br>体积小、可定制、使用快捷的 Opera 3.5 在 1998 年 11 月发布，加入了浏览器市场。</li>
<li>2008 年，Google 推出了 Google Chrome 浏览器，自此 Internet Explorer 走向衰落。</li>
<li>2013 年，Opera 放弃自有的 Presto 渲染引擎，改用 Chromium 系的 Blink 引擎。</li>
<li>2015 年，微软开始开发 Microsoft Edge 浏览器并逐步放弃 IE。</li>
<li>2020 年，Edge 放弃自有的 EdgeHTML 浏览器引擎，改用 Chromium 系的 Blink 引擎。</li>
<li>2022 年 6 月，Microsoft 永久停用 Internet Explorer。<br>早期的浏览器大战中，不同的浏览器的渲染引擎不同，导致渲染的效果有出入，css hack 应运而生，用于解决不同浏览器上样式展示不一致的问题。而后来的参与者明显更加尊重标准，避免了 web 开发人员面向多个不兼容的平台开发。</li>
</ul>
<h1 id="万维网的历史大事记"><a href="#万维网的历史大事记" class="headerlink" title="万维网的历史大事记"></a>万维网的历史大事记</h1><ul>
<li>1990 年，李爵士及其团队创建了第一个网络浏览器 WorldWideWeb、第一个网络服务器（后来被称为 CERN httpd）以及描述项目本身的第一个页面。</li>
<li>1991 年 8 月 6 日，万维网首次亮相。</li>
<li>1993 年 4 月 30 日，CERN 宣布万维网对任何人免费开放，不收取任何费用。</li>
<li>1994 年 10 月，W3C 成立，创建者是李爵士。W3C 致力于维护和制定 web 相关的标准，解决不同平台、技术和开发者带来的不兼容问题，保障网络资讯的流通。</li>
<li>1995 年 6 月，Rasmus Lerdorf 为了维护个人网站创建了 PHP Tools (Personal Home Page Tools)，后经过重写又改名为 PHP (Hypertext Preprocessor)。PHP 的发展让 HTML 从纯粹的静态页面，变成了模板引擎。<br>同年，网景推出 JavaScript，让网页可以有逻辑处理功能。</li>
<li>1996 年，W3C 发布 CSS 1.0 标准。<br>同年，微软推出 iframe 标签，实现了异步的局部加载。</li>
<li>1997 年，微软发布的 IE4 中引入了 DHTML (Dynamic HTML, 动态 HTML)，允许通过 HTML、CSS 和脚本语言来动态展示页面。但当时还没有 AJAX 技术，所以只是把网页内容都加载下来之后，根据脚本语言和事件交互来确定是否展示。</li>
<li>1999 年，微软推出用于异步数据传输的 ActiveX，随即各大浏览器厂商模仿实现了 XMLHttpRequest，允许 JavaScript 发送 HTTP 请求，这为后来大行其道的 Ajax 创造了条件。2006 年，XMLHttpRequest 被 W3C 正式纳入标准。</li>
<li>2000 年，KDE 项目重写了浏览器引擎 KHTML，为后来的 WebKit 和 Blink 引擎打下基础。</li>
<li>2001 年，Douglas Crockford 提出了 JSON，用于取代 XML 格式，进行服务器和网页之间的数据交换。JavaScript 原生支持 JSON。</li>
<li>2004 年，Google 公司发布了 Gmail，促成了互联网应用程序（Web Application）这个概念的诞生。<br>同年，Dojo 框架诞生，为不同浏览器提供了同一接口，并为主要功能提供了便利的调用方法。这标志着 JavaScript 编程框架的时代开始来临。<br>同年，各大浏览器厂商组成 WHATWG 小组，致力于加速 HTML 语言的标准化进程。</li>
<li>2005 年，苹果公司在 KHTML 引擎基础上，建立了 WebKit 引擎。<br>同年，Ajax (Asynchronous JavaScript and XML) 正式诞生，Jesse James Garrett 发明了这个词汇。</li>
<li>2006 年，John Resig 发布了 JQuery，使得 JS 操作 DOM 更加方便。<br>同年，Google推出 Google Web Toolkit 项目（缩写为 GWT），提供 Java 编译成 JavaScript 的功能，开创了将其他语言转为 JavaScript 的先河。</li>
<li>2007 年，Webkit 引擎在 iPhone 手机中部署，JavaScript 进军手机。</li>
<li>2009 年，Ryan Dahl 发布了 Node.js，它标志着 JavaScript 可以用于服务器端编程。<br>同年，AngularJS 诞生，后被谷歌收购。</li>
<li>2010 年，NPM(Node 模块管理器)、BackboneJS 和 RequireJS 的诞生标志着 JavaScript 进入模块化开发的时代。</li>
<li>2012 年，单页面应用程序框架（single-page app framework）开始崛起，AngularJS 和 Ember 都发布了 1.0 版本。<br>同年，微软发布 TypeScript 语言，该语言被设计为 JavaScript 的超集。</li>
<li>2013 年，ECMA 正式推出 JSON 的国际标准。<br>同年 5 月，Facebook 发布 UI 框架库 React，引入 JSX 语法，使得 UI 层可以用组件开发。</li>
<li>2014 年，Vue.js 诞生。</li>
<li>2015 年 3 月，Facebook 公司发布了 React Native 项目，将 React 框架移植到了手机端，可以用来开发手机 App。<br>同年 5 月，Angular 框架宣布 2.0 将基于 TypeScript 开发。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zh.m.wikipedia.org/zh-cn/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener">维基百科万维网</a><br><a href="https://www.w3.org/History/1989/proposal.html" target="_blank" rel="noopener">WWW 的原始提案</a><br><a href="https://zhuanlan.zhihu.com/p/68030183" target="_blank" rel="noopener">前端开发 20 年变迁史</a><br><a href="https://maizitoday.github.io/post/url%E5%92%8Curi%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">URL 和 URI 的区别</a><br><a href="https://www.coonote.com/http/http-uri-url-diff.html" target="_blank" rel="noopener">菜鸟笔记 URL 和 URI 的区别</a><br><a href="https://www.wosign.com/News/news_2019031301.htm" target="_blank" rel="noopener">HTTP 的历史</a><br><a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener">维基百科 HTTP</a><br><a href="https://zhuanlan.zhihu.com/p/36217198" target="_blank" rel="noopener">HTML 的发展历史</a><br><a href="https://juejin.cn/post/6844903875539910669#heading-1" target="_blank" rel="noopener">CSS 二十年发展简史</a><br><a href="https://www.w3.org/Style/LieBos2e/history/" target="_blank" rel="noopener">CSS 传奇</a><br><a href="https://zh.m.wikipedia.org/zh/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E6%88%98" target="_blank" rel="noopener">维基百科浏览器大战</a><br><a href="https://zhuanlan.zhihu.com/p/102911463" target="_blank" rel="noopener">浏览器及其内核</a><br><a href="https://wangdoc.com/javascript/basic/history" target="_blank" rel="noopener">JavaScript 语言的历史</a><br><a href="https://en.wikipedia.org/wiki/Dynamic_HTML" target="_blank" rel="noopener">维基百科 Dynamic HTML</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>发布订阅模式的实现</title>
    <url>/2021/04/17/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="什么叫做“发布-订阅”模式"><a href="#什么叫做“发布-订阅”模式" class="headerlink" title="什么叫做“发布-订阅”模式"></a>什么叫做“发布-订阅”模式</h1><p>举一个简单的例子，我对物理感兴趣，于是我上微信公众号关注了“中科院物理所”，所以“中科院物理所”每天发文章我都能收到。<br>在这个过程中，我“订阅”了中科院物理所的文章，因此，只要它一“发布”文章，我就能收到。在这之间，还有一个媒介——微信公众号平台。我通过这个平台去订阅事件，物理所通过这个平台来发布事件。<br>发布事件的人，订阅事件的人，加一个两者沟通的中介。这就是一个完整的“发布-订阅”模式。</p>
<h2 id="写一个例子"><a href="#写一个例子" class="headerlink" title="写一个例子"></a>写一个例子</h2><p><a href="https://codesandbox.io/s/fabu-dingyue-74pyv" target="_blank" rel="noopener">代码</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class EventHub &#123;  // 事件中心</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.list = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  publish(eventName) &#123;  // 发布</span><br><span class="line">    if (!this.list || !this.list.hasOwnProperty(eventName)) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = 0; i &lt; this.list[eventName].length; i++) &#123;</span><br><span class="line">      let fn = this.list[eventName][i].fn;</span><br><span class="line">      let event = this.list[eventName][i].event;</span><br><span class="line">      fn(event);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  subscribe(eventName, fn) &#123;  // 订阅</span><br><span class="line">    if (!this.list) &#123;</span><br><span class="line">      this.list = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!this.list.hasOwnProperty(eventName)) &#123;</span><br><span class="line">      this.list[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    let event = new Event(eventName);</span><br><span class="line">    this.list[eventName].push(&#123; event: event, fn: fn &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const eventhub = new EventHub();</span><br><span class="line">eventhub.subscribe(&quot;progress&quot;, (e) =&gt; &#123;  // 订阅 progress 事件</span><br><span class="line">  console.log(e.type);</span><br><span class="line">&#125;);</span><br><span class="line">eventhub.subscribe(&quot;progress&quot;, () =&gt; &#123;</span><br><span class="line">  console.log(&quot;progress 2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">eventhub.publish(&quot;progress&quot;);  // 发布 progress 事件</span><br></pre></td></tr></table></figure></p>
<h1 id="从一道面试题说起"><a href="#从一道面试题说起" class="headerlink" title="从一道面试题说起"></a>从一道面试题说起</h1><blockquote>
<p>通过 new PipeLine() 可以创建一个 pipe 实例，该实例挂载两个方法：</p>
<ol>
<li>on 方法<br>调用 on 方法，可以通过传参来绑定事件名、事件函数，事件函数会默认携带两个参数：ctx、next。<br>其中 ctx 是一个对象，访问 name 可以获取当前的事件名。<br>next 是一个函数，表示执行事件列表中的下一个事件。如果 next 不被调用，则默认不执行下一个事件。</li>
<li>run 方法<br>调用 run 方法，会按照 pipe 的事件绑定顺序，依次执行，直到事件函数中不再调用 next。<br>实现效果如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const pipe = new PipeLine();</span><br><span class="line">pipe.on(&quot;start&quot;, (ctx, next) =&gt;&#123;</span><br><span class="line"> console.log(ctx.name);</span><br><span class="line"> next();</span><br><span class="line">&#125;);</span><br><span class="line">pipe.on(&quot;progress&quot;, (ctx, next) =&gt;&#123;</span><br><span class="line"> console.log(ctx.name);</span><br><span class="line">&#125;);</span><br><span class="line">pipe.on(&quot;end&quot;, (ctx, next) =&gt;&#123;</span><br><span class="line"> console.log(ctx.name);</span><br><span class="line"> next();</span><br><span class="line">&#125;);</span><br><span class="line">pipe.run();</span><br><span class="line">// 输出结果：&quot;start&quot; &quot;progress&quot;</span><br><span class="line">// 因为 progress 没有执行 next() , 因此后面绑定的 &quot;end&quot; 不执行</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p>拿到题目的第一反应是发布-订阅模式，与前面的例子不同的是：</p>
<ol>
<li>不区分事件名</li>
<li>默认不继续执行下一个绑定事件</li>
</ol>
<p>顺着这个思路往下写，应该是先去掉事件名。<br>因此 <code>this.list[eventName].push()</code> 直接变成了 <code>this.list.push()</code>.<br>这样不论你绑定的是什么事件，都会直接运行，<code>run</code> 方法也不需要传递参数 <code>eventName</code>.<br>再有就是在 next 方法没有执行的时候阻止后续绑定事件的执行。<br>也就是把后续执行函数放到 next 方法中传给前一个绑定事件。<br>原先的代码是这样的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (let i = 0; i &lt; this.list.length; i++) &#123;</span><br><span class="line">  let fn = this.list[i].fn;</span><br><span class="line">  let ctx = this.list[i].ctx;</span><br><span class="line">  fn(ctx, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>把 <code>fn(ctx, next)</code> 提取出来，放到 fn 的第二个参数中，作为 next 函数传递给这个事件，通过递归就可以实现前一个事件调用 next 之后执行下一个事件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a = (i) =&gt; &#123;</span><br><span class="line">  if (i &lt; this.list.length) &#123;</span><br><span class="line">    let fn = this.list[i].fn;</span><br><span class="line">    let ctx = this.list[i].ctx;</span><br><span class="line">    fn(ctx, () =&gt; &#123;</span><br><span class="line">      a(++i);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a(0);</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codesandbox.io/s/class-pipelinemianshiti-5urhw?file=/src/index.js" target="_blank" rel="noopener">完整代码</a></p>
<p>如果，我想要默认按顺序执行所有的绑定事件，但是一旦执行了 <code>ctx.stop()</code> 就终止后面的绑定事件呢？<br>把上面的代码稍稍改一改，让 ctx.stop 终止循环，是不是就可以了？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a = (i) =&gt; &#123;</span><br><span class="line">  if (i &lt; this.list.length) &#123;</span><br><span class="line">    let fn = this.list[i].fn;</span><br><span class="line">    let ctx = this.list[i].ctx;</span><br><span class="line">    ctx.stop = ()=&gt;&#123;i=this.list.length&#125;</span><br><span class="line">    fn(ctx);</span><br><span class="line">    a(++i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a(0);</span><br></pre></td></tr></table></figure></p>
<p>看到这里，有没有想到什么？</p>
<h1 id="addEventListener-做了什么"><a href="#addEventListener-做了什么" class="headerlink" title="addEventListener 做了什么"></a>addEventListener 做了什么</h1><p>不知道你们有没有了解过 DOM 的 addEventListener 和 click事件。<br>添加一个事件监听，执行一个点击事件。<br>下面是一个简单的 click 事件。<br><a href="https://jsbin.com/noqitor/4/edit?js,console,output" target="_blank" rel="noopener">源码</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let btn = document.querySelector(&quot;#btn&quot;)</span><br><span class="line">btn.addEventListener(&quot;click&quot;, (e)=&gt;&#123;</span><br><span class="line">  console.log(e.type);  // 输出 &quot;click&quot;</span><br><span class="line">&#125;)</span><br><span class="line">btn.addEventListener(&quot;click&quot;, (e)=&gt;&#123;</span><br><span class="line">  console.log(&quot;2&quot;)</span><br><span class="line">  e.stopImmediatePropagation(); // 阻止后面绑定的监听事件</span><br><span class="line">&#125;)</span><br><span class="line">btn.addEventListener(&quot;click&quot;, (e)=&gt;&#123;</span><br><span class="line">  console.log(&quot;3&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">btn.click()  // 手动执行 click 事件</span><br></pre></td></tr></table></figure></p>
<p>和上面的面试题是不是有点像？<br>我们把上面面试题代码稍稍改动一下，把 <code>on</code> 变成 <code>addEventListener</code> , 同时把 <code>run</code> 变成 <code>click</code>, 把 <code>ctx</code> 变成 <code>event</code>, 把 <code>stop()</code> 变成 <code>stopImmediatePropagation()</code>.<br>像这样<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const pipe = new PipeLine();</span><br><span class="line">pipe.addEventListener(&quot;start&quot;, (e) =&gt; &#123;</span><br><span class="line">  console.log(e.type);</span><br><span class="line">&#125;);</span><br><span class="line">pipe.addEventListener(&quot;progress&quot;, (e) =&gt; &#123;</span><br><span class="line">  console.log(e.type);</span><br><span class="line">  e.stopImmediatePropagation()</span><br><span class="line">&#125;);</span><br><span class="line">pipe.addEventListener(&quot;end&quot;, (e) =&gt; &#123;</span><br><span class="line">  console.log(e.type);</span><br><span class="line">&#125;);</span><br><span class="line">pipe.click();</span><br></pre></td></tr></table></figure></p>
<p>现在是不是更像一点了？<br><a href="https://codesandbox.io/s/monionclickdefabu-dingyue-8wmbp?file=/src/index.js" target="_blank" rel="noopener">源码</a><br>addEventListener 实际上是添加了一个事件监听，在监听这个事件被触发之后，就会执行回调函数。<br><code>a.addEventListener(&quot;click&quot;, fn)</code> a 订阅了 click 事件，一旦这个事件被触发，就调用函数 fn 。<br><code>a.click()</code> 发布了 click 事件，通知所有订阅了 click 事件的人，可以执行你的操作了。</p>
<hr>
<p>以上，发布-订阅模式和实际应用场景。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>onClick</tag>
        <tag>发布-订阅模式</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器信息存储方式</title>
    <url>/2021/02/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Cookie和Session的关系"><a href="#Cookie和Session的关系" class="headerlink" title="Cookie和Session的关系"></a>Cookie和Session的关系</h1><p>关于Cookie的具体使用我们可以见这篇<a href="/2021/01/25/登录的前后端合作/" title="登录的前后端合作">登录的前后端合作</a>博客，这里我们只从理论方面来讨论。<br>打开浏览器的控制台 -&gt; Application tab页 -&gt; Storage -&gt; Cookies我们可以看到当前url下存储的所有Cookie，这些Cookie记录了我们的一些信息，当我们清除掉Cookie之后，可能需要重新登录这个网站。<br>通俗的来讲，我们说Cookie存储了用户信息。但是，你会发现，你看见的Cookie的键值对是一串接近于乱码的字符串。为什么？这就涉及到了Session。<br>Session保存在服务器端，服务器关闭则Session清空，但一般服务器不会直接关闭，关闭也会把它先存起来。用户登录的时候随机一个SessionID，然后用Cookie保存SessionID。通过这个SessionID去找到对应的信息。<br>写成伪代码大概是这个样子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SessionID = 随机数</span><br><span class="line">Sessions[SessionID] = 用户信息</span><br><span class="line">Set-Cookie: xxx=SessionID</span><br></pre></td></tr></table></figure></p>
<p>读取的时候<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get Cookie xxx</span><br><span class="line">Sessions[xxx]得到用户信息</span><br></pre></td></tr></table></figure></p>
<p>为什么要这样麻烦？找到你的Cookie，修改它的值。如你所见，Cookie的值可以被用户修改。如果说Cookie里存了邮箱，然后服务器通过这个邮箱去拿到用户的隐私信息，那么只要张三知道李四的邮箱，就可以通过修改自己Cookie里的邮箱，拿到李四的隐私信息。所以要用随机数——sessionID。随机数在很大的程度上保护了用户的隐私信息。<br>Session存在服务器端，对用户不可见，用户没有办法进行修改。我们随机一个SessionID，<code>Sessions[SessionID] = 用户信息</code>用这样一个键值对来存储用户信息。<br>Cookie只用来存储SessionID，所以你看到的Cookie基本上都是一串接近于乱码的字符串。</p>
<h1 id="Cookie和Session使用"><a href="#Cookie和Session使用" class="headerlink" title="Cookie和Session使用"></a>Cookie和Session使用</h1><p>Cookie的使用：</p>
<ol>
<li>用户登录，服务器拿到用户信息，通过Set-Cookie给客户端一串字符串</li>
<li>客户端拿到这段字符串之后，存到本地。每次访问相同域名的时候都会带上这段字符串，相当于一个身份标识。</li>
<li>Cookie会在本地保存一段时间之后自动过期。</li>
<li>前端不要读写Cookie，用localStorage做持久化存储。</li>
</ol>
<p>Cookie设置过期时间：</p>
<ol>
<li>如果不设置的话会自动在浏览器关闭之后删除Cookie</li>
<li>设置过期时间（Expires），比如<code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2021 07:28:00 GMT;</code></li>
<li>设置有效期（Max-Age），比如<code>Set-Cookie: id=a3fWa; Max-Age=1000;</code></li>
</ol>
<p>删除Cookie：</p>
<ol>
<li>图形界面删除<br>f12进入控制台 -&gt; Application -&gt; Storage -&gt; Cookies -&gt; clear all</li>
<li>代码删除<br>获取Cookie然后把过期时间设为现在或者过去。</li>
</ol>
<p>Session的使用：</p>
<ol>
<li>用户登录，服务器拿到用户信息之后，生成一个随机数SessionID，在Session对象里面生成一个SessionID与用户信息的键值对，然后通过Cookie给客户端返回这个SessionID</li>
<li>客户端拿到SessionID之后，存到本地。下次再访问相同域名的时候带上这个SessionID给服务器。</li>
<li>服务器再次拿到SessionID之后会在Session对象里去找这个SessionID对应的用户信息。</li>
<li>服务器在这块内存里存储了所有的Session信息。</li>
</ol>
<h1 id="LocalStorage与SessionStorage"><a href="#LocalStorage与SessionStorage" class="headerlink" title="LocalStorage与SessionStorage"></a>LocalStorage与SessionStorage</h1><h2 id="LocalStorage的使用"><a href="#LocalStorage的使用" class="headerlink" title="LocalStorage的使用"></a>LocalStorage的使用</h2><p>localStorage是html5(所有新的技术统称为html5)提供的一个API，一般用来做本地的持久化存储，在LocalStorage之前，一旦刷新页面，这个页面上的所有东西全部会被销毁，不会保存下来。而LocalStorage会保存在本地的某个文件里。典型的使用场景是在用户第一次进入这个网页的时候给出提示信息：在页面进来之前读一下localStorage确认是否已经提示过，如果没有的话给出提示同时记录下我已经提示过了，如果提示过了的话就啥也不做。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(&quot;aaa&quot;,&quot;bbb&quot;)</span><br><span class="line">localStorage.getItem(&quot;aaa&quot;)</span><br><span class="line">localStorage.clear()</span><br><span class="line">// localStorage只能存string，存别的会自动转化成string</span><br></pre></td></tr></table></figure></p>
<h2 id="LocalStorage和SessionStorage的特征"><a href="#LocalStorage和SessionStorage的特征" class="headerlink" title="LocalStorage和SessionStorage的特征"></a>LocalStorage和SessionStorage的特征</h2><p><strong>LocalStorage</strong>：</p>
<ol>
<li>LocalStorage与HTTP无关</li>
<li>HTTP不会带上LocalStorage的值</li>
<li>只有相同域名的页面才能互相读取LocalStorage（浏览器带的功能）</li>
<li>每个域名localStorage最大存储量为5M左右</li>
<li>常用场景：记录有没有提示过用户等一些没用的信息。不能记录密码等敏感信息。</li>
<li>永久有效，除非用户清理缓存（Chrome浏览器中按住<keyboard>ctrl</keyboard>+<keyboard>shift</keyboard>+<keyboard>delete</keyboard>，高级/Cookie及其他网站数据，清除数据）</li>
</ol>
<p><strong>SessionStorage</strong>：</p>
<ol>
<li>和localStorage差不多</li>
<li>会自动过期，关闭窗口之后看浏览器啥时候清除（基本是立即清除）</li>
</ol>
<h1 id="Cookie、LocalStorage和Session"><a href="#Cookie、LocalStorage和Session" class="headerlink" title="Cookie、LocalStorage和Session"></a>Cookie、LocalStorage和Session</h1><p>Cookie的本质是HTTP协议的一个内容（Cookie是http头），每次向浏览器发送http请求的时候都会带上Cookie，最大为4k左右。<br>localStorage的本质是浏览器上的一个hash表，是一个api，用来存一些没什么用的信息，与http没有关系，最大为5M左右，与Cookie的相同之处在于都存储在本地。<br>Session的本质是服务器上的一个hash表，一般来说是基于Cookie实现，用来存储用户的隐私信息。</p>
<p><font color="#ccc">没什么用的记录：Session也可以不基于Cookie，用localStorage存储SessionID，然后通过POST请求把SessionID传给服务器</font><br>SessionStorage和LocalStorage的过期时间不同。<br>Cookie的过期时间一般和SessionStorage相同，但是可以后台设置。</p>
<h1 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h1><h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p>Cache-Control和Cookie一样，是HTTP协议的一个东西。Cache-Control用来加快请求的速度，使用<code>max-age</code>来设置多长时间内不发送新的请求。<br><code>Cache-Control: max-age=&lt;seconds&gt;</code>表示在多少秒内不接受相同的请求，直接用之前的那个，浏览器从内存/硬盘中获取之前的缓存。<br><em>浏览器控制台打开，Network/Disable cache如果勾选上表示不从缓存里拿数据，直接发送请求。</em><br>只有URL完全相同浏览器才会选择去获取之前的缓存，因此在实际使用的时候，可以设置一个很长时间的过期值（十几二十年的），然后通过修改URL让用户拿到最新的数据（<code>./css/style.css?version=001</code>）。也因此首页作为入口文件，不能设置 Cache-Control , 不然网站拿不到最新的 URL 值，用户在很长一段时间内永远没有办法获取最新的代码（浏览器貌似会自动禁用，但我们不能指着浏览器来修复自己代码的错误）。</p>
<h2 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h2><p>以前用的，用来加快请求的速度，和 Cache-Control 的区别在于设置的不是多久过期，而是设置什么时候过期，是一个确切的时间点。而且这个时间点用的是电脑的本地时间，如果你的电脑时间设置不对的话可能会出现一些问题。比如过期时间是<code>2040/1/1 12:03:43</code>，而你本地的时间设置成了<code>2041/5/8 12:12:12</code>，那么每次都会进行重新请求。<br><em>如果设置了 Cache-Control , Expires 会被忽略。</em></p>
<h2 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h2><p>MD5 是一种摘要算法，用来对比两个文件的信息。对一个文件使用 MD5 计算一下，可以得到一串字符串，如果两个文件完全相同，那么得到的字符串也相同。所以常用来进行文件的比对。ETag就是基于 MD5 的。<br>如果网页设置了ETag，那么发送HTTP请求的时候，会带一个对本地缓存中的文件进行 MD5 之后的字符串，然后与我们请求的服务器端的那个文件进行比对。如果相同则服务器不返回值，浏览器直接拿本地的缓存；如果不相同则返回新的文件。<br>所以 ETag 和 Cache-Control 的区别在于，Cache-Control 如果是在时间内的话会直接不发送请求，而 ETag 每次都会发送请求，但是有可能不带数据回来（不从服务器端下载文件）。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>LocalStorage</tag>
        <tag>Session</tag>
        <tag>Cache-Control</tag>
        <tag>ETag</tag>
      </tags>
  </entry>
  <entry>
    <title>《如何阅读一本书》笔记</title>
    <url>/2021/01/22/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>书名：《如何阅读一本书》<br>作者：[美]莫提默·艾德勒，查尔斯·范多伦<br>译者：郝明义，朱衣</p>
<p>这本书教人们使用不同的方法去阅读不同类型的书，并详细描述了阅读的不同层次和阅读时的注意事项。</p>
<h1 id="你为什么要读那本书？"><a href="#你为什么要读那本书？" class="headerlink" title="你为什么要读那本书？"></a>你为什么要读那本书？</h1><p>当你阅读一本书的时候，你要清楚你的读书目的。(获得资讯、增进理解力、消遣)你为什么要读这本书？为了增加你对某个行业的理解?或者是对某件事情的理解?还是仅仅想要获得资讯，知道某件事情的来龙去脉?或者是just for fun?</p>
<h1 id="你该如何读那本书？"><a href="#你该如何读那本书？" class="headerlink" title="你该如何读那本书？"></a>你该如何读那本书？</h1><p>阅读分三个层次: 浏览、细读和主题阅读。</p>
<ol>
<li>先看引言、目录，然后大致浏览，知道这是一本什么样的书，讲了什么。</li>
<li>仔细阅读这本书，其间不要去看别人的书评之类的东西。完成你自己对这本书的理解，完成你自己的评论。</li>
<li>辅助阅读去了解与这本书相关的其他的知识，进行主题阅读，建立知识结构网。</li>
</ol>
<h2 id="浏览一本书"><a href="#浏览一本书" class="headerlink" title="浏览一本书"></a>浏览一本书</h2><p>浏览的时候你要学会抓住有用的信息，作者引言、目录、推荐语，以及每个章节的开头几段结尾几段，把握整体，决定你是否要继续对这本书进行更深层次的阅读。<br>这个阶段你需要对这本书进行图书分类，你知道这是哪一类的书，这本书是怎么个架构，这本书讲了什么，包含哪些部分?</p>
<blockquote>
<p>需要控制在一定的时间内完成。</p>
</blockquote>
<p>如果你觉得这本书值得你进一步花时间阅读，那你可以完成粗略的阅读。带着你前面得到的关于这本书的信息，从头到尾地读一遍这本书。然后完善你脑海中关于这本书的信息。<br>对于比较难懂的书，你第一遍的时候可以略过那些难懂的部分，专心放在你能读懂的地方，读完它。在你把握住了这本书的整体之后，有空再去读第二遍。</p>
<blockquote>
<p>先把握大的原则，然后再看细节。<br>一本书的四个问题:</p>
<ol>
<li>这本书在讲什么?</li>
<li>作者是如何发展他的论题的，分论点有哪些?分别是从哪里开始讲的?</li>
<li>作者讲的有道理吗?全部有道理还是部分有道理?你需要自己说出个所以然来。学会不要被作者的主观情绪所误导。</li>
<li>你真的需要看这本书吗?它是不是在浪费你的时间?</li>
</ol>
</blockquote>
<h2 id="仔细阅读一本书"><a href="#仔细阅读一本书" class="headerlink" title="仔细阅读一本书"></a>仔细阅读一本书</h2><ol>
<li>用一句话或一小段话来描述这本书到底写了些什么</li>
<li>为这本书写一段推荐语</li>
<li>与这本书相关的书单。这本书应该要归为哪一类。</li>
<li>按照你自己的思路给这本书归纳出一个架构。对作者的目录既不忽略也不盲从。</li>
<li>找出作者在问的问题或者作者想要解决的问题。</li>
</ol>
<h1 id="阅读不同类别的书籍"><a href="#阅读不同类别的书籍" class="headerlink" title="阅读不同类别的书籍"></a>阅读不同类别的书籍</h1><ul>
<li>对于论述性的文章/书籍，请拿出中国学生与生俱来的划重点的本事来读。</li>
<li>对于小说性质的文章/书籍，找出文章脉络，找到作者要表达的重点。</li>
<li>读一本实用性的书时，你先确定你的目标是什么，确认这本书可以让你达到你的目的，或者至少让你进一步，这样才值得继续阅读</li>
<li>阅读小说的时候先不要怕人物太多捋不清，将自己代入故事，继续看下去。你总会逐渐记住谁是谁。</li>
<li>对于剧本（莎士比亚的戏剧等），把剧本大声地读出来。要慢慢读，就像是听众在听你说话一样，还是带着感情读</li>
<li>对于诗，先一口气读完，不要停。读者最好是知道关于这个作者的生平经历、这首诗的时代背景。然后去了解这首诗大概是写了什么，表达了什么。再是逐字逐句分析意思。<br>理想与现实的冲突、爱与时间、生与死、入世出世、抱怨社会、抒发豪情壮志等等。<blockquote>
<p>一首好诗可以用心研读，一读再读，并在你一生当中不断地想起这首诗。你会在诗中不断地找到新点子、新的乐趣与启示，对你自己及这个世界产生新的想法。</p>
</blockquote>
</li>
</ul>
<ul>
<li>对于历史书，你如果想要了解真正的历史，不要听信某一个作者的一面之词，即使他尽量使文章足够客观。另外，不要只关心真正发生了什么，关心那些人为什么要那样做，才能以史为镜。除非你只是想找资料。</li>
<li>数学科学一类的书，并不全是给他们专业人士看的，有些书也是写给我们普罗大众的。看的时候不需要每个公式都去演算一遍，掌握重点就好。<br>你要了解作者想要解决的是什么问题，然后看作者如何去解决这些问题。<blockquote>
<p>数学既然是一种语言，那就拥有自己的字汇、文法与句法（Syntax），初学者一定要学会这些东西。特定的符号或符号之间的关系要记下来。</p>
</blockquote>
</li>
</ul>
<p>把数学看作是一门语言，一种沟通方式。把符号当做是另一种字词，你要知道符号代表的意义、符号与符号之间的关系，用这样的方法来阅读数学书。</p>
<ul>
<li>阅读哲学书，发现问题，或者找到作者试图回答的答案。</li>
</ul>
<h1 id="主题阅读"><a href="#主题阅读" class="headerlink" title="主题阅读"></a>主题阅读</h1><p>找到你的主题，找到与你主题相关的书籍，甚至于找到书中与你的主题相关的章节。此时你的阅读重点不在某本书，而是在你的主题。</p>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈js变量声明</title>
    <url>/2018/04/08/%E6%B5%85%E8%B0%88js%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<p>&emsp;&emsp;或者确切地说应该是变量声明以及与之相关的一些东西。<br><br>&emsp;&emsp;这里只谈四种声明方式（var,function,let,const），其它的声明方式以后有接触再更新。<br></p>
<h2 id="‘var’-VS-‘let’"><a href="#‘var’-VS-‘let’" class="headerlink" title="‘var’ VS ‘let’"></a>‘var’ VS ‘let’</h2><p>&emsp;&emsp;var貌似是最常用的，在ES6还没出来的时候只能用var来声明一个变量，var声明的变量只有函数能对其构成作用域。这样的话会出现一些意料之外的问题，比如如果你的页面里有一个元素的id是xxx，那么你在控制台打印出来的就是xxx这个元素本身，但是如果这个id名是parent，那么它打印出来的就是window全局属性。如果你在控制台再输入<code>var parent = document.getElementById(&#39;parent&#39;)</code>，此时console.log得到的结果依然是parent这个元素本身。为什么呢？<br><br>&emsp;&emsp;全局变量。是的，答案是全局变量。在我们还没有写代码的时候，浏览器就为我们提供了一个全局对象window，window里边的属性我们称之为全局属性。其中parent就是window的一个全局属性，所以在我们还没有写id=parent的时候，parent就已经存在了。所以我们直接调用parent并不能得到那个元素。<br><br>&emsp;&emsp;但是，你也知道，如果你写了下边这两句话<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a = 10</span><br><span class="line">var a = 20</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;得到的答案是20，因为变量存在覆盖。所以，在我们重新声明<code>var parent = document.getElementById(&#39;parent&#39;)</code>的时候，实际上是把全局变量window.parent覆盖了。鉴于覆盖全局变量可能会引发另外的问题，所以变量名尽量不要用window的属性。但是window属性那么多——<br><br>&emsp;&emsp;所以使用局部变量。如果只是在一个小的范围内声明并使用一个变量，那么这个变量在这个区域内把全局属性覆盖了也基本上不会出什么问题。<br><br>只有函数能构成var的作用域，所以要想使用一个局部变量，我们就需要声明并执行一个函数。这就是<strong>立即执行函数</strong>。是不是很熟悉？所以说最讨厌这些概念了，明明很简单的东西，非得喊个听上去很牛逼的名词。<br><br>&emsp;&emsp;鉴于我们写这个函数的目的只是为了造成一个局部作用域，并不需要后边继续进行调用，所以为了提高效率（也为了让你少费脑子想一个函数名），选择直接在声明之后执行它。<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function()&#123;</span><br><span class="line">  var parent = document.getElementById(&apos;parent&apos;)</span><br><span class="line">  console.log(parent)</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;但是这样子的话并不是万无一失的，在你刷新页面之后会报错，浏览器以为我们的语法错了。避免浏览器报错的方法很多，但是万变不离其宗，不论使用的是什么方法，我们的目的都是让浏览器知道这是一条语句，而不是别的什么。所以这样子给整个函数及其调用方法加一个小括号可以做到。<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  function()&#123;</span><br><span class="line">    var parent = document.getElementById(&apos;parent&apos;)</span><br><span class="line">    console.log(parent)</span><br><span class="line">  &#125;.call()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;或者只在函数声明上加小括号也行。比较通用的是在函数前边加一个运算符，比如说<code>+</code>，<code>-</code>，<code>!</code>（取反），<code>~</code>（二进制取反），告诉浏览器后边的是一个值而不是一个函数声明，让浏览器声明并调用求值。虽然这样得到的函数返回值与原先的结果可能会有偏差（比如用-号的话得到一个负值），但是我们并不需要这个返回值。一开始就说过，这个函数只是用来造一个局部作用域。<br><br>&emsp;&emsp;你一定会认为这样很麻烦。不过是想要用一个局部变量而已，这样大费周章多少让人心有不甘。所以ES6出了一个<code>let</code>声明方法。<br><br>&emsp;&emsp;let的作用域在包裹着它的代码块里，也就是说，如果你想要使用一个局部变量，并不需要声明一个立即执行函数，而只需要写一个代码块。上边的代码完全可以变成这个样子<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let parent = document.getElementById(&apos;parent&apos;)</span><br><span class="line">  console.log(parent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在区域外parent依旧指的是window.parent。这就是let。<br><br>&emsp;&emsp;此外，关于var还有一个很容易犯的错误，用let就可以完全避免。用js通过父元素为子元素绑定click事件。<br><br>html如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;buttons&quot; id=&quot;buttons&quot;&gt;</span><br><span class="line">  &lt;span&gt;按钮0&lt;/span&gt;</span><br><span class="line">  &lt;span&gt;按钮1&lt;/span&gt;</span><br><span class="line">  &lt;span&gt;按钮2&lt;/span&gt;</span><br><span class="line">  &lt;span&gt;按钮3&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>js如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var children = buttons.children   //用var声明了一个全局变量children，储存buttons的所有子元素</span><br><span class="line">for(var i=0; i&lt;children.length; i++)&#123;</span><br><span class="line">  children[i].onclick = function()&#123;    //执行点击事件的时候输出对应的第几个按钮</span><br><span class="line">    console.log(i)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;我们想要得到的效果是点击按钮0的时候输出0，点击按钮1的时候输出1…但事实上无论你点击什么，输出结果都是4，因为内存里只存了一个<code>i</code>，这个i的最终运算结果是4。但是如果你把<code>var i = 0</code>改成<code>let i = 0</code>就可以得到你想要的结果。因为如果你使用let的话，每次循环引用的都是不同的i（引用了i变量的不同实例），故而能实现你的需求。<br></p>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>&emsp;&emsp;var和function都有变量提升机制，也就是说，你可以先使用一个变量，然后再声明它。<br><br><strong>var的变量提升</strong>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a)  //undefined</span><br><span class="line">var a = 10</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;var的变量提升会把声明部分提升到前边。所以上边的代码真正的运行顺序应该是<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a</span><br><span class="line">console.log(a)</span><br><span class="line">a = 10</span><br></pre></td></tr></table></figure></p>
<p><strong>function的变量提升</strong>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(f)  //f()&#123;&#125;</span><br><span class="line">function f()&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;function的变量提升会把整个函数提升到前边，所以上边代码的真正运行顺序应该是<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function f()&#123;&#125;</span><br><span class="line">console.log(f)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;我们知道函数还可以用<code>var f = function(){}</code>来声明，这种声明方式的话事实上是<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var f</span><br><span class="line">f = function()&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;所以变量提升依旧只是提升<code>var f</code>。<br><br><strong>let没有变量提升</strong><br>&emsp;&emsp;是的，let算是比较正常的了，它不存在变量提升。也就是说，浏览器不会那么<del>贱</del>多此一举地帮你改变代码的顺序。但是这样的话就会出现“暂时性死区（temporal dead zone）”，如果你用let在一个作用域内声明了一个变量，那么在这个作用域内，let声明之前，这个变量是不可以被使用的，会报错。但是由于js可以有非声明变量（不使用任何声明语句直接对一个变量进行操作），所以这就会出现一个很奇怪（发现自己写js相关blog的时候用“奇怪”的频率好高。。。）的现象。<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof a  //error: a is not defined</span><br><span class="line">a = 20  //error: a is not defined</span><br><span class="line">typeof a  //error: a is not defined</span><br><span class="line">let a = 10</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;但是上述代码如果把<code>let a = 10</code>删掉就会是这样的结果。<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof a  //&quot;undefined&quot;</span><br><span class="line">a = 20   //不报错，正常赋值</span><br><span class="line">typeof a  //&quot;number&quot;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;除了暂时性死区之外，还需要注意的一点是let声明的变量<code>不可重复声明</code>。在同一个代码块内，如果你用let声明了一个变量a，那你就不能再继续用任何声明方法（包括let，var和function）来声明a变量。<br></p>
<h2 id="const声明常量"><a href="#const声明常量" class="headerlink" title="const声明常量"></a>const声明常量</h2><p>&emsp;&emsp;使用const声明的变量往往是一个常量，但是这个常量只是说它们在栈内存中存储的东西不变，对于复杂类型（object）而言，const意味着这个变量里边存的地址不会改变，但是地址里边的东西其实是可变的。除此之外，const的特性与let基本相同。两者同是ES6新增的命令。<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const N = 10  //常量一般用全大写字母表示</span><br><span class="line">N = 20  //error</span><br><span class="line">const OBJ = &#123;</span><br><span class="line">  &apos;a&apos;: &apos;ccc&apos;,</span><br><span class="line">  &apos;b&apos;: &apos;bbb&apos;</span><br><span class="line">&#125;</span><br><span class="line">OBJ = &#123;&#125;  //error</span><br><span class="line">OBJ[&apos;a&apos;] = &apos;aaa&apos;  //成功赋值</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>父子组件通信</title>
    <url>/2021/03/26/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="react-组件"><a href="#react-组件" class="headerlink" title="react 组件"></a>react 组件</h1><p>react 组件有 <strong>function 组件</strong>和 <strong>class 组件</strong>，在以前，function 组件和 class 组件最大的区别在于 function 组件没有自己的状态。<br>当然，后边使用 useState 另说，这里不做讨论。<br>如果一个函数组件，需要做一个点击按钮加一的效果的话，需要先声明一个全局变量，然后再给按钮绑定 add 函数，在点击了之后重新 render 页面。<a href="https://codesandbox.io/s/winter-https-mkiw8?file=/src/index.js" target="_blank" rel="noopener">demo</a><br>类组件实现点击加一效果则不需要全局变量，可以直接在组件内部通过 this.state 来声明局部变量，需要修改变量的时候使用 react 提供的 this.setState 来修改变量。<a href="https://codesandbox.io/s/class-component-b2s72?file=/src/index.js" target="_blank" rel="noopener">demo</a><br>为什么函数组件不使用局部变量呢，因为函数组件重新 render 的话会把函数内部的变量重置，而类组件只是重新调用 render 函数，不影响 constructor 里的 this.state。<br>关于 setState:</p>
<ol>
<li><p>不能直接修改 state ，而要使用 setState。而且在使用 setState 给某个变量赋值的时候，不会覆盖掉其他的变量。比如</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state = &#123;a: 1, b: 2&#125;</span><br><span class="line">this.setState(&#123;b: 3&#125;) // 这一步不会把 a: 1 这个键值对覆盖掉。</span><br></pre></td></tr></table></figure>
</li>
<li><p>react 会把多个 setState 合并成一个。比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// a: 0</span><br><span class="line">this.setState(&#123;a: this.state.a+2&#125;)</span><br><span class="line">this.setState(&#123;a: this.state.a+1&#125;)</span><br><span class="line">// a: 1</span><br></pre></td></tr></table></figure>
<p>得到的结果是 <code>a: 1</code> ，因为前面的被后面的覆盖掉了。而如果你想要分两次调用的话，则需要借助函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// a: 0</span><br><span class="line"> this.setState(&#123;</span><br><span class="line">   number: this.state.number + 2</span><br><span class="line"> &#125;)</span><br><span class="line"> this.setState((state)=&gt;&#123;</span><br><span class="line">   return &#123;number: state.number + 1&#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> // a: 3</span><br></pre></td></tr></table></figure>
<p>使用第二个参数传入一个回调函数也是可以的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">  number: this.state.number + 2</span><br><span class="line">&#125;, ()=&gt;&#123;</span><br><span class="line">    number: this.state.number + 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>此外，react 在 setState 之后，如果检查到了页面的变化，会主动去重新 render 局部更新页面（找到需要更新哪些地方的过程叫做 DOM diff）。</p>
<h1 id="组件通信之父传子"><a href="#组件通信之父传子" class="headerlink" title="组件通信之父传子"></a>组件通信之父传子</h1><p>父组件要给子组件传递信息的话，使用 props 直接传递即可。<br>比如说父组件有一个 number ，要在子组件中显示，那么直接在调用子组件的时候 <code>&lt;Son number={this.state.number} /&gt;</code><br>子组件使用 props 接收父组件传过来的参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Son(props) &#123;</span><br><span class="line">  return &lt;div&gt;&#123;props.number&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于 class 组件也一样<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Son extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;&#123;this.props.number&#125;&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>原则上不要去修改父组件传进来的 props 。</strong></p>
<p>另， <code>props.children</code> 可以获取子节点。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Son&gt; &lt;h1&gt;hello&lt;/h1&gt; &lt;/Son&gt;</span><br><span class="line">function Son(props) &#123;</span><br><span class="line">    return &lt;div&gt;&#123;props.children&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line">// 得到的就是  &lt;div&gt; &lt;h1&gt;hello&lt;/h1&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="组件通信之子传父"><a href="#组件通信之子传父" class="headerlink" title="组件通信之子传父"></a>组件通信之子传父</h1><p>子组件如果要传递信息给父组件，先由父组件通过 props 传递一个函数给子组件，然后子组件在一定的时候调用这个函数，把数据放在函数的参数里。<a href="https://codesandbox.io/s/click-add-n-v9e9h?file=/src/index.js" target="_blank" rel="noopener">demo</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>组件通信</tag>
      </tags>
  </entry>
  <entry>
    <title>登录的前后端合作</title>
    <url>/2021/01/25/%E7%99%BB%E5%BD%95%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%90%88%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="从创建用户到用户登录"><a href="#从创建用户到用户登录" class="headerlink" title="从创建用户到用户登录"></a>从创建用户到用户登录</h1><ol>
<li>用户注册。由前端的页面得到用户信息然后将需要的用户注册信息传给后端。</li>
<li>创建用户。后端拿到前端的用户信息之后，进行数据库的信息比对，如果信息无误，则插入到数据库。这里需要知道的是前端可以选择是否要进行字段合法性检测，后端必须要检查字段是否合法，因为用户可以通过curl直接访问网站而不经过浏览器页面。</li>
<li>用户登录。用户输入用户名和密码之后，点击登录按钮，前端将用户输入的信息提交给后端，后端拿到信息之后进行比对，如果用户名密码正确的话则允许登录，否则给出提示。</li>
<li>登录信息保存。浏览器使用Cookie来存储用户信息，如果你需要保持用户的登录状态，那么后端需要在用户登录成功之后将用户登录信息保存在Cookie里。</li>
<li>在页面展示用户信息。后端使用nodejs获取Cookie，然后通过Cookie的唯一字段去数据库里寻找需要展示的字段信息，将字段信息返回给前端，前端根据返回的信息进行页面展示。</li>
</ol>
<h1 id="开始写"><a href="#开始写" class="headerlink" title="开始写"></a>开始写</h1><h2 id="先写一个登录页面"><a href="#先写一个登录页面" class="headerlink" title="先写一个登录页面"></a>先写一个登录页面</h2><h2 id="登录页面发请求"><a href="#登录页面发请求" class="headerlink" title="登录页面发请求"></a>登录页面发请求</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#signUpForm&quot;).on(&quot;submit&quot;, (e) =&gt; &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    let hash = &#123;&#125;</span><br><span class="line">    let keys = [&apos;userName&apos;, &apos;email&apos;, &apos;password&apos;, &apos;passwordComformation&apos;]</span><br><span class="line">    keys.forEach((key) =&gt; &#123;</span><br><span class="line">        hash[key] = $(&quot;#signUpForm&quot;).find(`[name=$&#123;key&#125;]`).val()</span><br><span class="line">    &#125;)</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;/signUp&apos;,</span><br><span class="line">        method: &apos;POST&apos;,</span><br><span class="line">        dataType: &apos;json&apos;,</span><br><span class="line">        contentType: &apos;application/json&apos;,</span><br><span class="line">        data: JSON.stringify(hash),</span><br><span class="line">        error: function () &#123;</span><br><span class="line">        console.log(&quot;error&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function () &#123;</span><br><span class="line">        console.log(&quot;success&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="nodejs获取前端发送的请求"><a href="#nodejs获取前端发送的请求" class="headerlink" title="nodejs获取前端发送的请求"></a>nodejs获取前端发送的请求</h2><p>因为数据是一点一点发送的，得到的是Buffer对象，要转成json格式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.on(&apos;data&apos;, chunk =&gt; &#123;</span><br><span class="line">    let json = JSON.parse(chunk.toString())</span><br><span class="line">    console.log(json)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="数据合法性检测"><a href="#数据合法性检测" class="headerlink" title="数据合法性检测"></a>数据合法性检测</h2><p>这个demo里我们需要检测的是email是否符合要求、以及password和passwordConfirmation是否匹配。前后端使用同一个约定字符串，后端负责返回错误类型，前端对这个错误类型进行解释说明并呈现给用户。</p>
<h2 id="弄一个数据库"><a href="#弄一个数据库" class="headerlink" title="弄一个数据库"></a>弄一个数据库</h2><p>因为是做一个demo，所以这里我们创建data.db文件作为一个简单的数据库。格式如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    &quot;userName&quot;: &quot;xxx&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;aaa@bbb.cn&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;cc&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p>
<p>实际使用的时候，密码应该是加密存储，但是这里先不做那些。</p>
<h2 id="往数据库里添加数据"><a href="#往数据库里添加数据" class="headerlink" title="往数据库里添加数据"></a>往数据库里添加数据</h2><p>先读取数据文件，然后再往这个文件后面追加东西，再把数据写到数据文件里。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let users = fs.readFileSync(&apos;./database.db&apos;, &apos;utf8&apos;)</span><br><span class="line">users = JSON.parse(users)</span><br><span class="line">users.push(&#123;</span><br><span class="line">    &quot;userName&quot;: userName, </span><br><span class="line">    &quot;email&quot;: email,</span><br><span class="line">    &quot;password&quot;: password</span><br><span class="line">&#125;)</span><br><span class="line">let userStr = JSON.stringify(users)</span><br><span class="line">fs.writeFileSync(&apos;./database.db&apos;, userStr)</span><br></pre></td></tr></table></figure></p>
<h2 id="对添加进数据库的数据进行筛选"><a href="#对添加进数据库的数据进行筛选" class="headerlink" title="对添加进数据库的数据进行筛选"></a>对添加进数据库的数据进行筛选</h2><p>用户发送的数据可能是不对的，我们之前进行了数据本身的校验，但除此之外，大部分时候我们还需要将新的数据与数据库里其他的数据进行比较，这里我们设置注册邮箱必须唯一。<br>读取数据库文件，然后对其进行遍历，如果邮箱地址存在则返回400，给出提示；如果不存在的话就将注册用户信息填入数据库并返回success。</p>
<h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><p>添加登录的前端页面，并在后台添加登录接口，比对用户提交的登录信息，进行登录验证，如果验证通过则允许登录。用户登录之后直接跳转到主页面index。</p>
<h2 id="使用Cookie储存登录用户的信息"><a href="#使用Cookie储存登录用户的信息" class="headerlink" title="使用Cookie储存登录用户的信息"></a>使用Cookie储存登录用户的信息</h2><p>登录成功之后写入cookie<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.writeHead(200, &#123;</span><br><span class="line">    &apos;Set-Cookie&apos;: [`sign_in_email=$&#123;data.email&#125;`,&quot;aaa=bbb&quot;,&quot;ccc=ddd&quot;,&quot;eee=fff&quot;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="在主页读取cookie获取当前登录用户的信息"><a href="#在主页读取cookie获取当前登录用户的信息" class="headerlink" title="在主页读取cookie获取当前登录用户的信息"></a>在主页读取cookie获取当前登录用户的信息</h2><p>读取cookie<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cookies = &#123;&#125;;</span><br><span class="line">request.headers.cookie &amp;&amp; request.headers.cookie.split(&apos;;&apos;).forEach(function( Cookie ) &#123;</span><br><span class="line">    var parts = Cookie.split(&apos;=&apos;);</span><br><span class="line">    cookies[ parts[ 0 ].trim() ] = ( parts[ 1 ] || &apos;&apos; ).trim();</span><br><span class="line">&#125;);</span><br><span class="line">console.log(cookies)</span><br></pre></td></tr></table></figure></p>
<p>获取了cookie之后再通过cookie的信息拿到你需要的用户信息，再把用户信息展示到页面上。</p>
<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>github地址：<a href="https://github.com/wenchuyang/simple-projects/tree/master/nodejs/signUp" target="_blank" rel="noopener">https://github.com/wenchuyang/simple-projects/tree/master/nodejs/signUp</a></p>
<h2 id="关于Cookie"><a href="#关于Cookie" class="headerlink" title="关于Cookie"></a>关于Cookie</h2><ol>
<li>服务器通过<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie" target="_blank" rel="noopener">Set-Cookie</a>响应头设置Cookie</li>
<li>浏览器得到Cookie之后，每次请求都要带上Cookie</li>
<li>服务器通过读取Cookie得到登录用户的用户信息</li>
<li>Cookie可以手动修改，在浏览器控制台Application里查看cookie的值就可以修改。or js <code>document.cookie</code>。</li>
<li>Cookie存在C盘的一个文件里</li>
<li>Cookie存在有效期，浏览器决定过期时间，默认20分钟左右。后端可以强制设置有效期。</li>
</ol>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>因为用户可以篡改Cookie，所以我们换了另一种方案——<a href="/2021/02/03/浏览器信息存储方式/" title="浏览器信息存储方式">浏览器信息存储方式</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>脚本编程基础知识</title>
    <url>/2018/01/08/%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="你以为什么是脚本？"><a href="#你以为什么是脚本？" class="headerlink" title="你以为什么是脚本？"></a>你以为什么是脚本？</h2><p>&emsp;&emsp;不知道你有没有接触过高级编程语言，比如C、C++、Java等，这些语言的执行通常需要经过编写-编译-链接-运行等过程，而脚本语言则不然。一个脚本通常是解释运行而非编译。<br>&emsp;&emsp;我们在维基百科上搜Script（脚本），得到的结果有两个——剧本和脚本程序。虽然说两个是不一样的东西，但依然是可以放在一起理解的。所谓的剧本，就是演员照着一步一步做的东西。比如下边的这一段<br><img src="https://raw.githubusercontent.com/wenchuyang/ImagesForMarkdown/856d1eae45643b8a5af8bc9aea027822b53a007a/images/90%600S%40Z14FH3WGF%7D~NURDVQ.png" alt><br>&emsp;&emsp;而我们编程领域的脚本程序不是给人照着做的，而是给计算机照着做的。你输入指令，让计算机能够看懂，然后计算机为你一步一步执行这些指令。</p>
<h2 id="让我们来试着写一个脚本？"><a href="#让我们来试着写一个脚本？" class="headerlink" title="让我们来试着写一个脚本？"></a>让我们来试着写一个脚本？</h2><ol>
<li>进入一个目录，然后新建脚本文件，一般脚本文件的后缀是.sh，但是它并没有什么用。在Windows下文件的后缀名决定着该文件的默认打开方式，但在命令行下，打开方式是我们手动指定的，比如<code>vim demo.txt</code>或者<code>open -a &#39;Google Chrome&#39; demo.txt</code>都是可以的。所以命令行下我们写后缀主要还是给我们自己看，让我们自己一眼就知道这个文件是个什么文件。<br>&emsp;&emsp;我们在/f/wcy/local文件目录下建立一个demo.sh文件。</li>
<li><p>编辑demo.sh文件。<code>vim demo.sh</code>(当然，你也可以用其他方式打开然后编辑。或者你也可以写下其他的脚本代码。)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir demo //新建一个名为demo的目录</span><br><span class="line">cd demo //进入demo这个目录</span><br><span class="line">mkdir css js //新建两个文件夹css和js</span><br><span class="line">touch index.html css/style.css js/main.js //新建三个文件</span><br><span class="line">exit //退出</span><br></pre></td></tr></table></figure>
</li>
<li><p>（Windows不需要）给demo.sh添加执行权限<code>chmod +x demo.sh</code></p>
</li>
<li>在你需要执行该脚本的目录执行<code>sh /f/wcy/local/demo.sh</code>，然后你就可以在当前目录看到你需要的demo文件夹以及里边你使用脚本创建的文件了。</li>
<li>事实上，你可以现在结束这篇文章，因为你已经成功地运行了一个你自己写的脚本。但是，作为一名程序员，你还需要知道一些其他的东西。比如——把你的脚本文件目录添加到path中。<br>&emsp;&emsp;玩过java的应该对path都不会太陌生，虽然可能并不能理解path的含义，但是多少都应该是听过的。这里我不想太深入写，只能说，path里边可以写一堆目录，我们每次输入命令的时候都会依次在这些目录里边查找有没有同名的文件，如果有就执行。<br>&emsp;&emsp;type命令可以显示这个查找的过程。which命令可以告诉你查询最终的结果是什么，比如<code>which mkdir</code>在我这边执行的结果就是<code>/usr/bin/mkdir</code>。在计算机当中，所有的命令都是可执行文件，也就是，脚本。计算机中不可执行的文件是配置文件，就是我们常说的config文件。<br>&emsp;&emsp;以上，我们只需要把/f/wcy/local（请修改成你的脚本文件存在的目录）添加到<code>~/.bashrc</code>（这个文件不解释了，以前解释过。<a href="http://blog.csdn.net/writing_happy/article/details/78686739" target="_blank" rel="noopener">常见问题合集，修改bash命令路径下有这个文件的作用</a>，事实上你可以不用了解。）<br>&emsp;&emsp;先进入local目录，输入<code>pwd</code>得到它的绝对路径。然后<code>touch ~/.bashrc</code>创建.bashrc文件。接着打开文件，在最后一行添加<code>export PATH=&quot;local的绝对路径:$PATH&quot;</code>。然后<code>source ~/.bashrc</code>。成功。之前你需要运行<code>sh /f/wcy/local/demo.sh</code>而现在你可以不需要输入路径直接运行<code>sh demo.sh</code>了。</li>
<li>仅仅是创建一个名为demo的文件夹会不会太单调了呢？让我们来加个参数吧！<br>&emsp;&emsp;在bash里边，$1表示第一个参数，别问我怎么知道的，自己搜去。你只需要看懂下边的代码就好了，有需要的功能再去搜索。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir $1</span><br><span class="line">cd $1</span><br><span class="line">mkdir css js</span><br><span class="line">touch index.html css/style.css js/main.js</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&emsp;&emsp;现在，你可以运行<code>sh demo.sh aa</code>来创建一个名为aa的文件夹了。</p>
<ol start="7">
<li><p>如果说我已经创建过一个名为aa的文件夹，然后又来运行<code>sh demo.sh aa</code>呢？显而易见，它是会报错的。那么我们能不能不让它报那么难看的错，给用户一个提示信息呢？是的，加一个判断。如果这个文件存在，那么就让它输出”The directory is already exist!”，如果不存在那就创建。所以，你可以Google一下bash脚本的if语句怎么用。这里是代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ -d $1 ]; then</span><br><span class="line">  echo &apos;The directory is already exist!&apos;</span><br><span class="line">  exit 1 //表示程序运行出错，错误代码为1</span><br><span class="line">else</span><br><span class="line">  mkdir $1</span><br><span class="line">  cd $1</span><br><span class="line">  mkdir css js</span><br><span class="line">  touch index.html css/style.css js/main.js</span><br><span class="line">  echo &apos;success&apos;</span><br><span class="line">  exit 0 //表示0个错误</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>是的，经过上述步骤基本已经完成了一个小脚本案例了。我们最后来进行测试环节。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh demo.sh aa &amp;&amp; echo &apos;成功&apos; //如果前边的程序执行成功就显示字符串“成功”</span><br><span class="line">sh demo.sh bb || echo &apos;失败&apos; //如果前边的程序返回的是非0，显示“失败”</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="换个node-js脚本玩玩？"><a href="#换个node-js脚本玩玩？" class="headerlink" title="换个node.js脚本玩玩？"></a>换个node.js脚本玩玩？</h2><p>&emsp;&emsp;我们上边写的脚本是Bash Script（Bash脚本），现在，换个我们前端用的js脚本玩玩？基本规则其实都差不多，两个的语法方面略微有一点差别。你想要实现什么功能的话都可以去Google。比如你可以搜索node js change dir，来找到如何在node下转换路径。你也可以进入nodejs官网nodejs.org–&gt;docs–&gt;api直接在里边查，<a href="https://nodejs.org/api/fs.html#fs_fs_mkdirsync_path_mode" target="_blank" rel="noopener">比如文件系统(file system—fs)的一些操作。</a><br><img src="https://raw.githubusercontent.com/wenchuyang/ImagesForMarkdown/5b61dc97261e0b4500a194a722e950116aeef692/images/5ULKJXL4ACL%24YCDQ%24TXKY.png" alt><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node //先进入node</span><br><span class="line">process.chdir(&apos;F:\\wcy\\local&apos;) //改变系统路径到你需要的目录（这个路径写法是windows下的写法。。。保持微笑不吐槽）</span><br><span class="line">console.log(process.cwd())  //得到当前所处路径并打印出来console.log()相信你不会陌生。</span><br><span class="line">//Ctrl+D退出node环境</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;上边用bash命令我们执行写的是<code>sh demo.sh</code>，如果你省略sh直接写<code>demo.sh</code>依然可以得到你想要的结果。因为系统默认使用sh（即shell）来运行脚本。但到了这里可就不行了。你知道的，文件后缀并不影响，所以如果你依然用shell来执行demo.js文件，显然是有问题的。我们一般会用<code>node demo.js</code>来运行这个文件。如果你想让这个文件默认用node执行，请在文件的第一行加上<code>#!/usr/bin/env node</code>。<br>综上，将上述功能换成js脚本的话，就应该是这样的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">dirName = process.argv[2] // 你传的参数是从第 2 个开始的</span><br><span class="line">if (fs.existsSync(dirName)) &#123;</span><br><span class="line">	console.log(&quot;The file is already exist&quot;);</span><br><span class="line">	process.exit(1);</span><br><span class="line">&#125;</span><br><span class="line">	fs.mkdirSync(&quot;./&quot; + dirName) // mkdir $1</span><br><span class="line">	process.chdir(&quot;./&quot; + dirName) // cd $1</span><br><span class="line">	fs.mkdirSync(&apos;css&apos;) // mkdir css</span><br><span class="line">	fs.mkdirSync(&apos;js&apos;) // mkdir js</span><br><span class="line">	fs.writeFileSync(&quot;./index.html&quot;, &quot;&lt;!DOCTYPE&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;h1&gt;Hi&lt;/h1&gt;&quot;)</span><br><span class="line">	fs.writeFileSync(&quot;css/style.css&quot;, &quot;h1&#123;color: red;&#125;&quot;)</span><br><span class="line">	fs.writeFileSync(&quot;./js/main.js&quot;, &quot;var string = &apos;Hello World&apos; alert(string)&quot;)</span><br><span class="line">	process.exit(0)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里对第三行稍微解释一下，为什么前边bash传的参数算是第一个而后边js算是第二个呢？给一段代码吧，反正我是这样理解的。<code>demo.sh xx</code>，<code>node demo.js xx</code>，从0开始数。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次面试引发的关于学习方向上的思考</title>
    <url>/2022/12/12/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%90%91%E4%B8%8A%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这是一篇个人向的碎碎念，起因是面试的时候和面试官的一些交谈，以及自己之前了解前端历史过程中的一些思考，这次是想要通过思绪的整理让我的思考得以通过文字落地，最终得以完善。也许它可以成为我未来发展道路上的一个强有力的，理念吧，成为我努力的方向。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在之前对于前端的学习中，我更多的是关注技术，关注这个是什么，为什么要用这个，怎么用。在前端的学习/工作生涯中跌跌撞撞，一项技术的 what、why、how 帮助我学习了很多新的技术，而在不算漫长的工作中，我逐渐淡忘了 “why”，更多地去关注 “how”。但在辞职的这段时间，在我从前端的起点开始翻阅前端历史的时候，我陡然发现这个 “why” 从来不是我想的那样简单。<br>学过前端的人不会不知道 html、js 和 css，html 为骨架，css 为皮囊，js 则为其赋予生命，可这仅仅是 “what”。当然，对于 “why”，也许多数人也能说出来，html 是为了信息的展示，css 是为了排版更加的好看，js 是为了它能拥有更多的功能。<br>但真的只是这样吗？<br>展示信息为什么要用 html？text 不行吗？为什么要用 css 来做排版？js 到底解决了什么问题？为什么 JScript 没有流行起来？这些问题会耗费你很多的时间，但你真正理解的那一刻，也许才是这团迷雾拨开的时候。从历史，看未来。你会发现，html 起源于信息共享，会发现在 css 之外还有其它的样式方案，但是被时代留下了，会发现 js 并不重要，在那个时候，没有 js ，也会有其他的脚本语言来代替。<br>互联网起源于信息共享，它是 Tim 偶然的尝试，但如果没有他，会不会也有另一个人，完成另一种形式的“万维网”？而随着万维网的创建，受益于它的人们开始逐渐不满足于简单的信息展示，开始想要让它承担更大的责任，于是才有了 css，有了 js，有了 ajax，有了我们前端开发工程师。<br>你可以看见历史的洪流滚滚向前，在信息共享下，来自于世界各地的人们交流着自己的思想，提出方案，完善万维网。发展的核心在哪里？<br>从简单的超文本页面，到复杂的单页应用，随着用户的需求变化，开发者不断地提出新的技术来发展前端页面。而随着前端页面的复杂化，一方面开发工具和前端框架开始发展了起来，用于提高开发者的开发效率；另一方面页面的性能问题也出现了，在硬件设施固定的情况下，开发者们只能去想办法从代码方面去做性能优化。除此之外，网页承担了太多的责任，那安全问题自然而然地又被提上了日程，就像如今家家户户都会有至少一把锁这样自然。<br>身处其中的我也许没有办法去引领潮流，在前端历史上留下浓墨重彩的一笔，但是不是可以不被时代抛弃呢？<br>面试过程中面试官问我 TypeScript 和 ESlint 有什么区别和联系，我乍一听是嗤之以鼻的，可终于还是被说服了。在前端的发展过程中，在业务愈发复杂、代码量越加庞大的情况下，TypeScript 作为 js 的超集，作为强类型的脚本语言，它约束了变量的数据类型。而 ESlint 约束了开发者的代码格式。这两者看似毫不相关，本质上它们的出现却是为着一个相同的目的：提高代码的质量和合作开发的效率，提高项目的稳定性。<br>对于开发者而言，选择什么框架，用什么工具，不应该是跟风，更多的是去思考这项技术能给你带来什么好处。而在前端发展的过程中，一项新的技术的提出，无外乎是解决一些实际的问题，这些问题也许并不是那么能轻易地让人看出来。有些人看出来了，有些人不仅看出来了，还着手去给出了解决方案。<br>说这么多，核心思想其实是：当你关注到一项新的技术的时候，首先想想为什么需要这项技术，这项技术的提出，它的思想是什么，它是为了解决什么问题而被提出来的，更深层次一点，如果要解决这个问题，还有没有其他的方案？如果只是别人开发出了一个框架，你就去学习这套语法，也许并没有真正学到什么。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>个人感悟</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>获取表单数据</title>
    <url>/2021/04/03/%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="使用-js-获取表单数据"><a href="#使用-js-获取表单数据" class="headerlink" title="使用 js 获取表单数据"></a>使用 js 获取表单数据</h1><p>使用 js 提供的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener">FormData</a> 来获取表单数据。</p>
<ol>
<li>获取表单 <code>const form = document.querySelector(&quot;#myForm&quot;)</code></li>
<li>创建一个 FormData 对象 <code>let formData = new FormData(form)</code></li>
<li>for 循环遍历 FormData.entires() 获取所有的 key、value <code>for(let [key, value] of formData.entires()){}</code> . formData.entires() 每一项分别是 <code>item[0]</code> 和 <code>item[1]</code>, 给它们赋值为 key 和 value。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getFormDataWithJs() &#123;</span><br><span class="line">  const form = document.querySelector(&quot;form&quot;);</span><br><span class="line">  let formData = new FormData(form);</span><br><span class="line">  let data = [] // 这里不能用 hash 存否则多选框的多个值会被覆盖掉</span><br><span class="line">  for (let [key, value] of formData.entries()) &#123;</span><br><span class="line">    let item=&#123;&#125;;</span><br><span class="line">    item[key] = value</span><br><span class="line">    data.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  return data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="使用-jquery-获取表单数据"><a href="#使用-jquery-获取表单数据" class="headerlink" title="使用 jquery 获取表单数据"></a>使用 jquery 获取表单数据</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getFormDataWithJquery() &#123;</span><br><span class="line">  // $(&quot;#myForm&quot;).serialize() get a string</span><br><span class="line">  return $(&quot;#myForm&quot;).serializeArray()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://codesandbox.io/s/getformdata-bksx0?file=/src/index.js" target="_blank" rel="noopener">获取表单信息的 demo</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>《这样写出好故事》练习题</title>
    <url>/2021/01/14/%E8%BF%99%E6%A0%B7%E5%86%99%E5%87%BA%E5%A5%BD%E6%95%85%E4%BA%8B%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>书名：《这样写出好故事》<br>作者：[美]詹姆斯·斯科特·贝尔。<br>译者：苏雅薇</p>
<p>作者以他的写作经验写了一本写作指导书，详实的描述了如何写一本结构完整、有吸引力的商业小说。完成了如何想出好的写作点子、如何编排情节、如何吸引读者的手把手教学。</p>
<p>本部分收集了每章结束的练习。<br><a href="/2021/01/15/这样写出好故事笔记/" title="《这样写出好故事》笔记">《这样写出好故事》笔记</a></p>
<h1 id="所以情节到底是什么——搭建小说的骨架"><a href="#所以情节到底是什么——搭建小说的骨架" class="headerlink" title="所以情节到底是什么——搭建小说的骨架"></a>所以情节到底是什么——搭建小说的骨架</h1><ul>
<li>排定十分钟不受干扰的写作时间。在这段时间内，写一篇短文回答下列问题：读者读我的小说时，我希望他们能感到<code>_______</code>，因为对我来说，小说就是<code>_______</code>。<br>不要多想，发自肺腑地写。<br>写完之后，分析一下你的短文。从中看来，你更喜欢什么样的情节呢？你怀疑情节的重要性吗？你对“虚无缥缈”的文学小说比较有兴趣吗？如果是的话，想想假如你学会一些情节编排技巧，可以替作品增色多少。</li>
<li>拿几本你最喜欢的小说，用LOCK系统分析，研究每项元素在你喜爱的书中如何发挥作用。你可以参考下列问题：<br>·主角为什么吸引你？<br>·主角想要追求或逃离什么？<br>·故事什么时候进入“高潮”？<br>·主角追求目标时，面对的主要障碍是什么？<br>·看完结局你感觉如何？为什么这个结局很棒？</li>
<li>为你现在想到的点子写下简单的情节。写四句，每句提一个LOCK系统的元素。<br>·我的主角是<code>_______</code><br>·他的目标是<code>_______</code><br>·他遭到<code>_______</code>的阻挠，对手阻挠他的原因是<code>_______</code>。<br>·结尾非常冲击，因为<code>_______</code><br>等你填满空格，你就写出了一本骨架扎实的小说。接下来这本书会协助你把骨架发展成完整的作品。</li>
<li>从你读过的小说中，挑选一系列你喜欢的“调味料”。特别注意：<br>·独特的设定<br>·多层次的角色<br>·铿锵有力的对话<br>·极具影响力的场景<br>当你看到这些元素，请分析它们为什么有用？作者用了哪些技巧？</li>
</ul>
<h1 id="结构：稳固你的情节——推动情节发展的事件"><a href="#结构：稳固你的情节——推动情节发展的事件" class="headerlink" title="结构：稳固你的情节——推动情节发展的事件"></a>结构：稳固你的情节——推动情节发展的事件</h1><ul>
<li>分析一些小说或电影，研究这些作品的三幕结构。特别注意：</li>
</ul>
<ol>
<li>扰乱事件</li>
<li>两扇无法折返的门</li>
</ol>
<ul>
<li>画出你的情节结构简图。想出一件扰乱事件，还有那成为两扇门的事件，把事件摘要写下来，再稍加变化，变成独特又吸引人的桥段。</li>
</ul>
<h1 id="如何“头脑风暴”情节点子——如何发现好的小说题材"><a href="#如何“头脑风暴”情节点子——如何发现好的小说题材" class="headerlink" title="如何“头脑风暴”情节点子——如何发现好的小说题材"></a>如何“头脑风暴”情节点子——如何发现好的小说题材</h1><ul>
<li>本周挑两个方法来想点子，每个方法至少预留一小时写作时间，好好练习。</li>
<li>从练习一的成果中，挑出你最喜欢的点子。你和你的点子有足够的热情、潜能和精准度，能让你继续写下去吗？</li>
<li>每个月花几个小时来想点子。随时注意周遭可能出现的点子，勤记笔记，搜集新闻简报。每个月检查一次你的点子，开始培养。</li>
</ul>
<h1 id="强劲的开头——如何写好故事的开头"><a href="#强劲的开头——如何写好故事的开头" class="headerlink" title="强劲的开头——如何写好故事的开头"></a>强劲的开头——如何写好故事的开头</h1><ul>
<li>重新审视你正在写的小说的第一章。你会使用什么技巧从第一段开始就吸引读者的注意？你有建立动感吗？</li>
<li>你的故事发生在什么世界？你对这个世界有多了解？你要如何不靠一大段的描述，让读者感受到这个世界的细节？</li>
<li>你怎么介绍主角出场？你的主角为什么令人难忘？<br>在下面四个类别中，分别替你的主角想出5个答案。<ol>
<li>认同。如何让读者对你的主角产生认同感，主角哪些地方“像我们”？</li>
<li>同情。想想主角的（实质或精神上的）危机、困难、弱者处境和脆弱感。</li>
<li>喜爱。他机智吗？关心别人吗？</li>
<li>内心冲突。主角脑中有哪两个对立的“声音”？</li>
</ol>
</li>
<li>主角所在的日常世界遭到什么事物的干扰？哪些改变会造成连带影响？</li>
<li>给对手反抗主角的正当理由。<br>你要如何从对手的角度，合理解释他的作为？他的过去能解释他现在的为人吗？他有哪些特质很有魅力、吸引人，甚至令人着迷呢？</li>
</ul>
<h1 id="中段"><a href="#中段" class="headerlink" title="中段"></a>中段</h1><ul>
<li>决定如果你的主角无法达成目标，会面临哪种实际、心理或职业生涯的死亡。如果你答不上来，先自问主角的目标是否真的密切影响他的命运，然后设法提升目标的重要性，让读者了解为何主角一定要达成目标。</li>
<li>深入描写对手角色，自问“为什么我这么喜欢这个角色？”，你有替他的行为想好合理的解释吗？他有比主角强，或至少跟主角一样强吗？如果没有，请赶快让他变强。</li>
<li>从你的小说中挑一个充满紧张冲突的场景，将情绪最紧绷的段落独立出来。这部分可能有几段或几页，但不论长短，都请试着拉长紧张段落的长度。使用本章建议的每个方法。一两天后，再回来读这个场景，你从头到尾都觉得很有趣吗？必要时你当然可以删掉增加的内容，不过通常你会发现这样一改，反而增添了阅读的乐趣。</li>
<li>你的小说中，角色要付出哪些代价？请考虑每个层面——情节、角色和社会，并把没有用到的类型加入故事中。同时想想在情节发展的过程中，你能如何把每种代价提升到极限。</li>
<li>重读一本你觉得失败的小说。把自己当做编辑，依照本章的内容，寻找可以改进的地方。接着写一封信给作者，建议他可以做哪些改变。不用真的寄出去。</li>
</ul>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><ul>
<li>重读你最喜欢的小说最后几章，并分析每个结局。结局明确吗？结果正向还是负面？有没有意外转折？为什么你觉得这个结局好？如此分析能协助你了解自己的写作偏好。</li>
<li>你为你的小说想了什么结局？试着写下结尾的高潮场景。最终你未必要用这个场景，但这个联系能促使你思考结局，让你更加深入了解角色。可以将得到的信息运用在作品中。</li>
<li>想出两三种替代结局。首先列出十种可能，每种各写一行。接着挑出两三个最有潜力的选项，写出结尾场景摘要（500字以内）。如果替代结尾感觉比原先的版本更有冲击，那就用吧。把原本的结局当做最后可能的转折，或者保留原先的结局，将替代结局之一当成可能的转折。</li>
<li>列出你的小说中所有没收好的梗。可以边写边做，每次埋梗时，在另一个档案里做记录。想好策略，利用情节发展、配角或报纸报道把这些四散的梗收好。</li>
</ul>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ul>
<li>从书柜上随便拿起一本小说，翻开一个场景开始读。请分析：<ol>
<li>这是行动场景吗？找出你在何处得知角色在这个场景的目标，以及他面临的冲突。场景如何结束？你会想继续读吗？为什么？</li>
<li>这主要是反应场景吗？角色感到了什么情绪？作者如何展现角色的情绪？场景结束时，角色决定要怎么办了吗？角色有所转变吗？变得坚强，还是软弱？</li>
</ol>
</li>
<li>找一个行动场景，使用紧张程度表，画出场景的紧张程度。<br><img src="https://i.loli.net/2021/01/14/oRDbhOg6C58ELZd.png" alt="无标题1.png"></li>
<li>检视你写的一个章节，分析其中的引子、紧张程度和结尾推手。你能如何把每一项写得更好？</li>
</ul>
<h1 id="复杂的情节"><a href="#复杂的情节" class="headerlink" title="复杂的情节"></a>复杂的情节</h1><ul>
<li>在纸上画三栏。第一栏记下场景中突出的丰富细节，第二栏列出主要角色，最后一栏记录重要的地点。接着开始寻找每一栏之间的联结，将某项细节跟角色和地点连在一起，或者倒过来，从地点去联想角色和细节。挑出最强的两三组联结，试着融入情节中，当做象征或主题。</li>
<li>决定你的小说要讲述的主旨价值，用一句话写出来。在编写情节的任何阶段都可以做这项练习，如果你很早就想好，那发展场景时可别忘了。千万注意别显得太刻意，你的信息一定要自然呈现。</li>
<li>听音乐也是替小说想画面的良方。先放松，深呼吸，然后播放让你感动的音乐，可能是电影配乐、古典音乐或爵士。不要选有歌词的曲子。沉浸在隐约之中，闭上眼睛，让画面甚至是场景自动出现在你的想象当中。然后停下来，把想到的画面场景记在纸上或计算机上。写作过程中，你可以不时重复这项练习。</li>
</ul>
<h1 id="情节中的角色弧线"><a href="#情节中的角色弧线" class="headerlink" title="情节中的角色弧线"></a>情节中的角色弧线</h1><ul>
<li>从你喜欢的小说中，挑一本主角发生重大转变的作品来分析。《圣诞颂歌》就是经典范例。以双线标出主角生命中受到严重挑战的段落，然后在上述事件影响角色转变的段落打钩。</li>
<li>写一段小说简介，描述你的主角在故事刚开始时的个性。请描述他的：<ul>
<li>理念</li>
<li>价值观</li>
<li>主要态度</li>
<li>看法<br>接着问问自己，情节中会发生什么事，能改变或挑战主角的上述特质？</li>
</ul>
</li>
<li>制作你的角色弧线表。在第一列填入改变角色内心世界的主要事件，下方的空格则描述角色发生了什么事。<br><img src="https://i.loli.net/2021/01/15/S7Y5iusVCpqtkAB.png" alt="1RPTYTUE0SB_GOVN`M@Z7_5.png"></li>
</ul>
<h1 id="修改你的情节"><a href="#修改你的情节" class="headerlink" title="修改你的情节"></a>修改你的情节</h1><ul>
<li>为了体验改稿的过程，请将你正在写的两三章打印出来。读一遍，在页缘画下下列记号：<ul>
<li>如果你觉得情节拖沓，就打个钩。</li>
<li>用括号标出看不懂的句子。</li>
<li>你觉得某一段可能需要增加内容，就在边边画个圈。也许你想拉长紧张感，或者让情节别那么断断续续。</li>
<li>你觉得某一段可能需要删减，就画个问号。这段可能是过长的解释场景，或者你“说明”太多却没有“展示”。</li>
</ul>
</li>
<li>看看你手边档案的章节开头和结尾。每章开头都能马上吸引读者的兴趣吗？每章结尾都有促使读者继续读下去的推手吗？朝这个目标修改。尝试不同的写法，挑选最好的一种。</li>
<li>还有一个办法能让你更习惯改稿：拿练习一的符号去标示你正在读的小说。如果这套改稿方式有的地方你用不惯，请试着思考为什么；如果有的部分你很喜欢，也试着去想为什么。</li>
</ul>
<h1 id="情节模式"><a href="#情节模式" class="headerlink" title="情节模式"></a>情节模式</h1><ul>
<li>分析几本你最喜欢的小说。你能从每个故事认出一个熟悉的情节模式，还是几个模式的综合体呢？</li>
<li>分析你选的小说结构，写下每一幕发生的事。</li>
<li>选择本章其中一个模式，以此为本写出新情节。这时还不用考虑原创性，只要使用你想到的角色，写两三页的叙述。借此感受一下情节模式的结构。</li>
<li>重复练习三，但这次结合两种模式。</li>
</ul>
<h1 id="常见的情节问题及解决办法"><a href="#常见的情节问题及解决办法" class="headerlink" title="常见的情节问题及解决办法"></a>常见的情节问题及解决办法</h1><ul>
<li>列出你碰到的主要情节问题，请读过你作品的朋友给你一些意见。将最严重的问题摆在前头。利用你从本书和其他地方学到的技巧，确定练习计划，加强你在这些方面的写作能力。</li>
<li>从你的书架或图书馆找出一本你觉得不成功的小说，重读一次，记下到底为什么不成功。你会怎么改进？如果你不确定，请参考写作教学的书，直到找到答案为止。</li>
</ul>
<h1 id="关于情节和结构的建议与工具"><a href="#关于情节和结构的建议与工具" class="headerlink" title="关于情节和结构的建议与工具"></a>关于情节和结构的建议与工具</h1><ul>
<li>挑一个你不熟悉的小说类型，写一段这类小说的情节摘要。这个练习可以加强你的情节编排能力。</li>
<li>随着你学会越多的新技巧，请建立自己的写作工具和技巧档案，尽可能积累记录学到的内容。每隔一阵子，请替你收集的技巧写一句短大纲。这样可以在最短的时间内读完你积累的内容。</li>
</ul>
]]></content>
      <categories>
        <category>书籍</category>
        <category>写作</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>笔记</tag>
        <tag>写作方法</tag>
      </tags>
  </entry>
  <entry>
    <title>《这样写出好故事》笔记</title>
    <url>/2021/01/15/%E8%BF%99%E6%A0%B7%E5%86%99%E5%87%BA%E5%A5%BD%E6%95%85%E4%BA%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>书名：《这样写出好故事》<br>作者：[美]詹姆斯·斯科特·贝尔。<br>译者：苏雅薇</p>
<p>作者以他的写作经验写了一本写作指导书，详实的描述了如何写一本结构完整、有吸引力的商业小说。完成了如何想出好的写作点子、如何编排情节、如何吸引读者的手把手教学。</p>
<p>本部分是我的读书笔记。<br><a href="/2021/01/14/这样写出好故事练习题/" title="《这样写出好故事》练习题">《这样写出好故事》练习题</a></p>
<h1 id="写作这件事儿"><a href="#写作这件事儿" class="headerlink" title="写作这件事儿"></a>写作这件事儿</h1><p>如何开始写作？你告诉自己，我想要写作。但是你有没有在脑海中形成一个清晰的想法：你想要写什么？<br>你想要的写一个故事，一个什么样的故事？你为什么想要写这个故事？你想借由这个故事表达什么？</p>
<h2 id="对于写作的建议"><a href="#对于写作的建议" class="headerlink" title="对于写作的建议"></a>对于写作的建议</h2><ul>
<li>找出哪些活动能让你文思泉涌，不要浪费机会，每次都要把涌现的灵感转化为稿本上的文字。</li>
<li>深度消化书中的内容，融会贯通。多读，多想，多写。</li>
<li>先写，再写好。</li>
<li>持续创作，定下工作量，记录字数产出以及每篇作品的字数。</li>
</ul>
<h2 id="面向读者"><a href="#面向读者" class="headerlink" title="面向读者"></a>面向读者</h2><ul>
<li>这个故事在讲什么？</li>
<li>为什么我要读下去？</li>
<li>有发生什么事吗？</li>
<li>为什么我要关心这个故事？<br>小说是什么，小说是一个能让读者穿越时空的故事。读者为什么想要读你的故事？他希望从你的小说中获得不一样的人生体验。<blockquote>
<p>好的故事就像人生，只是少了所有无聊的部分。</p>
</blockquote>
</li>
</ul>
<h1 id="我要怎么写"><a href="#我要怎么写" class="headerlink" title="我要怎么写"></a>我要怎么写</h1><h2 id="写作的原则"><a href="#写作的原则" class="headerlink" title="写作的原则"></a>写作的原则</h2><p>LOCK系统: Lead(主角), Objective(目标), Confrontation(冲突), Knockout(冲击结尾).</p>
<h3 id="Lead（主角）"><a href="#Lead（主角）" class="headerlink" title="Lead（主角）"></a>Lead（主角）</h3><p>稳固的情节永远始于有趣的主角。他不一定要十全十美，但是一定要有特点，能让人记住。</p>
<h3 id="Objective（目标）"><a href="#Objective（目标）" class="headerlink" title="Objective（目标）"></a>Objective（目标）</h3><p>角色有目标，读者才能知道他能否达成目标。如果主角只是在自己的世界里无所事事，那小说读起来也就索然无味了。目标是小说的动力，驱动故事前进。角色在故事的不同阶段可以有不同的目标，也或者有一个总的目标，每个阶段的目标都是为了实现那个总的目标。<br>生命，权力，爱情，自由，报仇，能力……都可以作为主角的目标。要让读者保持着提心吊胆，就把目标的代价提高。</p>
<blockquote>
<p>一些例子：<br>《爱上汤姆的女孩》 斯蒂芬·金<br>《大白鲨》<br>《玫瑰疯狂者》<br>《糖衣陷阱》<br>《沉默的羔羊》<br>《单身公寓》主角想要回到自己快乐的懒虫生活</p>
</blockquote>
<h3 id="Confrontation（冲突）"><a href="#Confrontation（冲突）" class="headerlink" title="Confrontation（冲突）"></a>Confrontation（冲突）</h3><p>好故事永远是一波三折，就像一个好看的走之底。让读者为你的主角担惊受怕，他才能从头到尾投入到小说中，不要让他出戏。<br>在主角前进的路上设满障碍，把事情弄得很复杂，永远不要轻易放过他。主角内心的挣扎也必不可少，如果他从头到尾都没有怀疑过自己的选择，那你该考虑换一个角色了。</p>
<h3 id="Knockout（冲击结尾）"><a href="#Knockout（冲击结尾）" class="headerlink" title="Knockout（冲击结尾）"></a>Knockout（冲击结尾）</h3><p>要有重击的力道，可以击倒，也可以留给读者想象的空间。</p>
<h2 id="写出不一样的小说"><a href="#写出不一样的小说" class="headerlink" title="写出不一样的小说"></a>写出不一样的小说</h2><h3 id="文学小说-VS-商业小说"><a href="#文学小说-VS-商业小说" class="headerlink" title="文学小说 VS 商业小说"></a>文学小说 VS 商业小说</h3><p>文学小说通常步调悠闲，侧重人物的内心世界，如《麦田里的守望者》。商业小说专注于角色身上发生的事情，侧重情节。<br>文学小说比较能接受暧昧不明的情节，而且结局可能令人沮丧。写作的时候需要注意情节的步调。<br>商业小说结尾通常是好人战胜坏人，大快人心。写作的时候需要注意加深对角色的刻画。</p>
<h3 id="专属于你的小说细节"><a href="#专属于你的小说细节" class="headerlink" title="专属于你的小说细节"></a>专属于你的小说细节</h3><p>LOCK是写作的原则，我们要在这个原则上添加属于自己独特的风味。可以从角色、背景和对话入手。</p>
<h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>对于角色的刻画，主角固然光彩夺目，但是一个人总没法完成这个故事。你的配角足够有特色吗？</p>
<blockquote>
<p>《红楼梦》<br>狄更斯的小说<br>史蒂芬·金 《末日逼近》</p>
</blockquote>
<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>生活细节，人物工作独特的细节。多做研究，深入探讨某些职业。如果是老生常谈的职业的话，赋予他们新的挑战和背景设定。力求找出专属于你的独特的元素。</p>
<h4 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h4><p>每个角色都要有各自的说话方式，角色的遣词造句应该稍微透露他的为人。</p>
<h2 id="选择场景"><a href="#选择场景" class="headerlink" title="选择场景"></a>选择场景</h2><p>当我们决定要写什么的时候，脑袋里自然而然的会想到一些老梗。所以要训练创意，请试着暂停一下，快速写下一列可能的情节发展，选择最有新意的方向。以此来训练创意。</p>
<h2 id="小说的结构"><a href="#小说的结构" class="headerlink" title="小说的结构"></a>小说的结构</h2><p>三幕结构：获得信息，进入情节；问题出现，与问题较劲；解决问题。<br>介绍一名角色，他过着特定的生活，然后出现扰乱事件（有事情打乱了现状）。<br>创造一股将主角往前推的力量。人类总是追求安定的，所以我们的小说里，要让环境不允许主角这样做（或者什么都不做）。创造一种避无可避的氛围，把主角丢进主要冲突中，而且无法离开。<br>写作的时候随时问自己：我的主角现在还能忽略情节，继续如先前一般过活吗？</p>
<blockquote>
<p>《教父》<br>《带来奇迹的人》<br>中段陷入与对手的冲突之中，需要某种附着元素（工作/道德义务/实际地点等等）将主角与对手绑在一起。<br>最后主角碰上重大的挫折、危机，或者是发现了新信息和线索，故事无可避免的进入结局。<br>开始——扰乱事件——第一扇无法折返的门（故事的1/5之前）——故事中段——第二扇无法折返的门（故事的3/4之后）——高潮——结局</p>
</blockquote>
<h1 id="我要写些什么"><a href="#我要写些什么" class="headerlink" title="我要写些什么"></a>我要写些什么</h1><h2 id="训练你的创意"><a href="#训练你的创意" class="headerlink" title="训练你的创意"></a>训练你的创意</h2><p>想情节点子：</p>
<ul>
<li>审视自己</li>
<li>确定固定的想点子时间，一周至少一次</li>
<li>待在安静的地方，让自己放松</li>
<li>30min不受干扰</li>
<li>把每个点子都记下来</li>
<li>不要设任何限制</li>
<li>评估你的点子<br>想点子的方法：</li>
</ul>
<ol>
<li>“如果”。你在读别的东西的时候，试着想想，如果不那样，会怎样？如果角色替换，是什么样的结局？然后汇集成表。</li>
<li>书名。先取一个很酷的书名，然后写出相符的作品。诗作、名言、佳句，或者随意的文字组合，或者挑一本小说，用开头第一句来设计书名。</li>
<li>议题。你对什么话题比较关注，哪些话题能让你更有共鸣？逼人发怒的东西？列出你所关心的议题。（环保，噪音，重男轻女，开车玩手机，公共场所吸烟……）注意对正反面的平等对待，哪种人最关心这个议题的正反面？</li>
<li>亲眼去看。一早坐起来，问自己：“关于现在这个瞬间，我想写些什么？”列出你首先想到的三件事，可能是一个议题、一个角色、或者是一个场景。挑选最能让你文思泉涌的，然后用你的想象力播放一段影片，多久都可以。然后开始动笔，把你记得的都写下来，持续写20分钟，不用管情节结构。每天都写，持续5天，累计你写下来的内容。然后休息一天，把你的电影札记打印出来，翻阅一遍，把你感兴趣的挑出来，开始培养你的点子。</li>
<li>亲耳去听。听一些让你感动的纯音乐，哪些图像、场景会浮现出来？记下来。在以后的创作中也可以播放这首曲子。</li>
<li>角色优先。创造一个立体的角色。<ol>
<li>想象外表，描述他的样子。然后把他随便丢进一个场景，看他会怎么选。为什么他会这样做，他展现出什么样的角色特质？</li>
<li>重塑你认识的人。</li>
<li>网上公众人物，看他们的人物简介，挑出有趣的部分用在你的角色上。年龄性别都无所谓，主要是角色的特质。</li>
<li>最糟的事。你的角色身上能发生的最糟的事情是什么？</li>
</ol>
</li>
<li>偷别人的情节。改变故事线、角色。</li>
<li>读报纸。（作者建议《今日美国》）。让你的想象力往独创方向跑，扫完一份报纸，找几个新点子。</li>
<li>研究。从你一直感兴趣的领域，挑一本非文学作品，大略翻一遍，了解大意。写下你想到的情节点子。然后把书详细读完，记下更多的点子，同时发展先前想到的点子。</li>
<li>偏执。哪些事物会让人偏执？自尊？外表？欲望？工作？敌人？成功？创造一个角色，让他为某件事而偏执，再看他如何发展。<blockquote>
<p>《悲惨世界》责任心<br>《乱世佳人》爱</p>
</blockquote>
</li>
<li>写开场白。透露故事的调性。</li>
<li>写序章。紧张刺激的序章能带出更多的好点子。</li>
<li>联想图。从某个词会联想到什么事情？任其发挥，画在纸上。</li>
<li>感动人心的结尾。<ol>
<li>在脑海中的剧院想象一场高潮结尾</li>
<li>倾听搭配的音乐</li>
<li>让各式各样的情绪涌现</li>
<li>加入角色，增加冲突</li>
<li>尝试以不同的方式呈现同一个主题</li>
<li>故事中有哪些角色</li>
<li>什么事情让他们聚在一起</li>
<li>如何回溯到这个故事合理的起点</li>
</ol>
</li>
<li>职业。以吸引人的工作为基础，想出一些故事点子。（参考职业相关的百科全书，美国有《职衔大辞典》）阅读职业介绍，并确定你要针对哪个领域继续研究。</li>
<li>绝望。如果你的脑子里空空如也，那就对着你的白纸或空白文档瞎写，想到什么写什么。</li>
</ol>
<h2 id="培养你的点子"><a href="#培养你的点子" class="headerlink" title="培养你的点子"></a>培养你的点子</h2><p>挑出你最喜欢的点子，写出它的诱因、标语和弱点。<br><strong>诱因</strong>：<br>小说主题。迪恩·孔茨《午夜》写了滥用生物科技祸及整个小镇的故事。你的小说想些什么？<br><strong>标语</strong>：<br>用一两句话，为你的点子写宣传。</p>
<blockquote>
<p>迪恩·孔茨《冬夜》<br>洛杉矶的大街成了末日炼狱。在蒙达加州寂寥的角落，神秘的存在侵入森林。随着这些事件交错并逐渐失控，活人和死人都无法幸免。</p>
</blockquote>
<p><strong>弱点</strong>：<br>反向思考，什么事情可能毁掉你的点子？</p>
<ol>
<li>这个点子以前有人用过吗？你能想出什么独特的元素？</li>
<li>你的设定普通吗？你能把故事改设在什么场景？</li>
<li>你的角色脸谱化严重吗？怎么把他们变得有趣？你能提供什么新的切入点？</li>
<li>可以吸引足够的读者吗？如何扩大规模？你能怎么提高主角面临的代价？</li>
<li>从各个角度来思考你的点子，并思考能否加入一两个转折，让整个故事更有活力。</li>
</ol>
<h2 id="最后的忠告"><a href="#最后的忠告" class="headerlink" title="最后的忠告"></a>最后的忠告</h2><ol>
<li>对你即将要写的小说饱含热情</li>
<li>思考这个主题能触及多少读者。（订阅《出版人周刊》（《Publishers Weekly》）追踪业内的最新动向，为什么出版社看上这些故事？）</li>
<li>精准的目标。定位精准，删掉其他所有影响主题的东西。</li>
</ol>
<h1 id="强劲的开头"><a href="#强劲的开头" class="headerlink" title="强劲的开头"></a>强劲的开头</h1><p> 目标</p>
<ol>
<li>吸引读者；</li>
<li>建立读者与主角之间的联结；</li>
<li>介绍故事中的世界，地点时代等相关背景；</li>
<li>奠定小说基本的调性，让读者知道这是一本什么样的小说，步调如何；</li>
<li>说服读者继续读到中段，为什么读者要关心你的故事，继续读下去?</li>
<li>介绍对手出场，有哪些人物想要阻挡主角?</li>
</ol>
<h2 id="吸引读者"><a href="#吸引读者" class="headerlink" title="吸引读者"></a>吸引读者</h2><h3 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h3><ol>
<li>包含了角色的名称<blockquote>
<p>她听到卧房有东西在动<br>麦迪端详着晨光，躺在床上她先生应该睡的那一侧</p>
</blockquote>
</li>
<li>带给读者动感，暗示有事情已经发生或者即将发生，让读者一开始就感觉到情节的移动。传达出有事发生的感觉。<blockquote>
<p>七月中的一个周六早晨，简·施里奇曼律师在早上八点半被电话吵醒</p>
</blockquote>
</li>
</ol>
<h3 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h3><p>通常序章都绕着不是主角的角色打转，但是要和主线情节连接起来。主线情节从第一章开始，而序章发生的事件会笼罩在整个故事上。</p>
<h4 id="动作场景序章"><a href="#动作场景序章" class="headerlink" title="动作场景序章"></a>动作场景序章</h4><ol>
<li>动作场景规模要足够大，足以撑满一整篇序章</li>
<li>不要写太长</li>
<li>以麻烦问题作结，坏事即将发生或已经发生</li>
<li>注意与主线情节的联结</li>
</ol>
<h4 id="外框故事"><a href="#外框故事" class="headerlink" title="外框故事"></a>外框故事</h4><p>带出角色，让他准备回首讲述这个故事。营造特殊氛围，仿佛接下来发生的事影响之大甚至波及了现在和未来。<br>通过外框故事，我们可以:</p>
<ol>
<li>用于奠定想要笼罩主线情节的情绪和风格，但是序章本身必须值得一读，不能只是枯燥的叙述。</li>
<li>让读者知道，即将发生的事如何到了现在还持续影响序章中的角色。</li>
</ol>
<h2 id="通过主角，建立与读者的联结"><a href="#通过主角，建立与读者的联结" class="headerlink" title="通过主角，建立与读者的联结"></a>通过主角，建立与读者的联结</h2><h3 id="认同"><a href="#认同" class="headerlink" title="认同"></a>认同</h3><p>让读者对主角产生认同感，让读者认为主角和自己类似，在特定情况下我们也会跟主角陷入同样的处境，并做出类似的反应。<br>给你的主角赋予真人的特性，一般来讲：</p>
<ol>
<li>希望能成大事</li>
<li>有时候有点胆小</li>
<li>并不完美<br>你的主角该如何行动思考，才能像一般人?让读者亲近你的主角。</li>
</ol>
<h3 id="同情"><a href="#同情" class="headerlink" title="同情"></a>同情</h3><p>同情能加强读者对主角的情感投入。《飘》里面的斯嘉丽刚出场时满满的负面特质，还做了一些很蠢的事情，但是作者通过写作手法和她之后的遭遇，让人对她有同情有钦佩。<br>写作的时候要想办法激起读者的同情。</p>
<ol>
<li>危机。实际的危险或心理层面的危机。</li>
<li>困难。让他面对不是自己造成的苦难，但是不能让主角一直抱怨他遭遇的困难（可以偶尔发泄情绪），因为读者欣赏努力克服困难的人。</li>
<li>弱者，美国人喜欢面对巨大挑战的人，中国人喜欢以弱胜强或者打怪升级。</li>
<li>脆弱。如果感觉主角随时都有可能被击倒，读者便会替他担心。<br>不一定是悬疑才有令人紧张的情节。《飘》中斯嘉丽的走投无路；《穿过森林的男孩》里边主角面临的谜团以及后边的绝望无助。</li>
</ol>
<h3 id="喜爱"><a href="#喜爱" class="headerlink" title="喜爱"></a>喜爱</h3><p>惹人喜爱的主角通常会做讨人喜欢的事。乐于助人、很会说话、个性积极，你喜欢什么样的人？把他们的一些特质加到主角身上。列一下有哪些特性。幽默又不自傲，等等。如果是个不讨喜的角色，需要有一些吸引人的特性。</p>
<h3 id="内心冲突"><a href="#内心冲突" class="headerlink" title="内心冲突"></a>内心冲突</h3><p>角色如果对自己的决定毫不怀疑，总能毫无恐惧，勇往直前，那就不有趣了。每个人都有疑虑，将主角的疑虑摊在情节表面，带动读者一起去考虑。</p>
<h2 id="呈现故事里的世界"><a href="#呈现故事里的世界" class="headerlink" title="呈现故事里的世界"></a>呈现故事里的世界</h2><p>你的主角住在什么样的世界里？主角过着什么样的生活？</p>
<h2 id="奠定风格"><a href="#奠定风格" class="headerlink" title="奠定风格"></a>奠定风格</h2><p>一本小说带给读者的整体印象风格应该一致。</p>
<blockquote>
<p>好小说应该始于某人对威胁的反应，并描写他如何应对。</p>
</blockquote>
<h2 id="说服读者继续读到中段"><a href="#说服读者继续读到中段" class="headerlink" title="说服读者继续读到中段"></a>说服读者继续读到中段</h2><p>确保对手至少跟主角一样强，甚至更强。给对手反抗主角的正当理由，替他辩护，你的小说结构会因此更扎实。<br>如果你要以第一人称视角写作，请赋予主角能吸引读者的声音。<br>如果以描述段落开场，要达成三个目标：</p>
<ol>
<li>奠定故事氛围</li>
<li>尽早加入角色</li>
<li>给读者继续读下去的理由<br>请记住所有风景的描述都是为了营造气氛，或推动故事情节或表达主角心情（《飘》中对风景的描述）。<blockquote>
<p>《白夹竹桃》开头<br>圣塔安娜的风从炎热的沙漠吹来，使最后一抹春天的绿草也枯萎成稀疏的干稻草。只有夹竹桃还屹立不倒，绽放着精巧有毒的花朵伸展着尖如匕首的绿叶。</p>
</blockquote>
</li>
</ol>
<p>即使以描述开场，也要马上进入扰乱场景。</p>
<h3 id="处理说明段落（作者认为读者需要知道的信息）"><a href="#处理说明段落（作者认为读者需要知道的信息）" class="headerlink" title="处理说明段落（作者认为读者需要知道的信息）"></a>处理说明段落（作者认为读者需要知道的信息）</h3><ol>
<li>先有动作，再解释。随着故事发展，才在必要时分批丢一点信息出来。</li>
<li>模仿冰山。只说出10%，千万不要一次性都说出来。</li>
<li>将信息包装在冲突中。呈现信息的最好时机是气氛紧张的冲突场景，通过角色的想法和对话，将重要信息丢到读者眼前。</li>
</ol>
<h2 id="介绍对手出场"><a href="#介绍对手出场" class="headerlink" title="介绍对手出场"></a>介绍对手出场</h2><p>反派形象的塑造：在令人恐惧的同时，也要让人觉得可怜。要从对手的角度来解释他的所作所为。他有哪些吸引人的特质？</p>
<h1 id="中段"><a href="#中段" class="headerlink" title="中段"></a>中段</h1><p>中段主要目标：用场景延续紧张情绪，提高角色面对的代价，让读者一直担心。</p>
<h2 id="死亡"><a href="#死亡" class="headerlink" title="死亡"></a>死亡</h2><p>让死亡的阴影从头到尾笼罩在主角头上，包括精神上的和职业生涯的死亡。读者担心主角会失去些什么。想要的东西，与主角的命运息息相关。</p>
<h2 id="对手"><a href="#对手" class="headerlink" title="对手"></a>对手</h2><p>对手要有足够的理由阻止主角。站在对手的立场去思考。<br>对对手的塑造参考意见：</p>
<ul>
<li>将对手设定为人。</li>
<li>如果对手是一群人，挑一个领袖。</li>
<li>让对手比主角强。</li>
</ul>
<h3 id="附着元素"><a href="#附着元素" class="headerlink" title="附着元素"></a>附着元素</h3><p>把对手和主角捆绑在一起，避无可避。要有足够的理由形成冲突。<br>写下数个冲突场景，大部分都以主角遭逢挫败作结，借此强迫他重新分析处境，采取其他方法达成目标。<br>把故事漫长的中段当做一系列越来越激烈的战斗。一来一往，闪躲后又进击。<br>附着元素参考：</p>
<ul>
<li>生与死。如果对手有足够的理由杀死主角，自然就会产生附着元素。</li>
<li>职责。</li>
<li>道德义务。</li>
<li>偏执。</li>
<li>故事发生的地点。</li>
</ul>
<h2 id="准备好冲突用的武器"><a href="#准备好冲突用的武器" class="headerlink" title="准备好冲突用的武器"></a>准备好冲突用的武器</h2><p>“行动、反应、继续行动”，角色为了达成渴望的目标，通过行动解决眼前问题。先写出行动，然后提出合理的解释。</p>
<h2 id="吸引读者读下去"><a href="#吸引读者读下去" class="headerlink" title="吸引读者读下去"></a>吸引读者读下去</h2><ol>
<li>拉长紧张段落。</li>
<li>提高角色要付出的代价。</li>
</ol>
<h3 id="拉长紧张段落"><a href="#拉长紧张段落" class="headerlink" title="拉长紧张段落"></a>拉长紧张段落</h3><p>确定紧张场景真的有理由让人紧张，替角色找好他要面对的麻烦，实际和心理层面的麻烦。<br>拉长实际遭遇危险和悬疑的段落。放慢动作，在脑海中一格一格过这个场景。开始动笔时，交替使用动作、内心戏、对话和叙述，每一类都花时间好好描写，注意细节。<br>安排场景的节奏，以符合故事应有的风格和感觉。<br>拉长心理的紧张段落——角色陷入痛苦的情感纠葛。<br>初稿要尽量拉长紧张段落，后面如果不需要可以调控。</p>
<h3 id="提高角色要付出的代价"><a href="#提高角色要付出的代价" class="headerlink" title="提高角色要付出的代价"></a>提高角色要付出的代价</h3><p>创造一个值得关注的角色以及一个必须解决的问题，并在过程中提高主角要付出的代价。想想最糟糕的事情是什么，角色最畏惧的是什么，最糟的消息是什么？<br>需要知道的是先要替读者奠定足够的感情基础，让读者在乎你的主角。<br>替主角想出更严峻的困境。列出笔下角色可能碰上的麻烦，依照问题的严重程度，从轻微到严重排列。建立代价概要，用来建立小说的场景和转折点。</p>
<h4 id="情节造成的代价"><a href="#情节造成的代价" class="headerlink" title="情节造成的代价"></a>情节造成的代价</h4><ul>
<li>我的主角会遭遇哪些实际伤害？我能把这个威胁推展到什么程度？</li>
<li>哪些新势力会对抗主角？我能加入哪些角色，把状况弄得更糟？这些外来势力如何运作，他们会运用哪些技巧？</li>
<li>主角需要付出职责上的代价吗？他的职业生涯能发生什么最糟的状况？</li>
</ul>
<h4 id="角色内心的代价"><a href="#角色内心的代价" class="headerlink" title="角色内心的代价"></a>角色内心的代价</h4><ul>
<li>怎么样才能使我的主角情绪更为纠结？</li>
<li>主角在乎的人有没有办法陷入麻烦？</li>
<li>主角有没有见不得人的秘密可以揭露？</li>
</ul>
<h4 id="社会造成的代价"><a href="#社会造成的代价" class="headerlink" title="社会造成的代价"></a>社会造成的代价</h4><ul>
<li>你的故事中，与角色紧密相关的社会状况如何？</li>
<li>你的角色需要面对什么重大社会问题吗？</li>
<li>社会冲突的两方可以安插哪些角色？</li>
</ul>
<h2 id="如何唤醒昏昏欲睡的中段"><a href="#如何唤醒昏昏欲睡的中段" class="headerlink" title="如何唤醒昏昏欲睡的中段"></a>如何唤醒昏昏欲睡的中段</h2><ol>
<li>分析故事中的代价。</li>
<li>加强附着元素。</li>
<li>提高情节的复杂程度。</li>
<li>增加新角色，让主角的日子更难过。来自主角过去生活环境的意外角色，而且握着主角想要隐藏的秘密。或者表面上支持主角，但经常帮倒忙。或者恋爱对象。</li>
<li>增加新的副线情节。要显得自然且和主线情节相关。</li>
<li>继续写，直到写完初稿。</li>
</ol>
<h2 id="如何删减过于庞大的中段"><a href="#如何删减过于庞大的中段" class="headerlink" title="如何删减过于庞大的中段"></a>如何删减过于庞大的中段</h2><ol>
<li>合并或删掉角色。</li>
<li>合并副线情节。把沉闷的副线情节的精华集结起来，合并成更强而有力的主线情节。</li>
<li>削减无聊程度。主要注意场景冲突和紧张感。这个场景你从头到尾都觉得有趣吗？</li>
</ol>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><ol>
<li>结局给读者的感觉需要完全符合这本小说所属的类型。</li>
<li>要让读者感到惊讶，不会给人以似曾相识的感觉。</li>
</ol>
<h2 id="冲击结尾"><a href="#冲击结尾" class="headerlink" title="冲击结尾"></a>冲击结尾</h2><p>尽可能将情节的紧绷情绪拖到最后一刻。</p>
<h2 id="带出“真好”或“糟了”的感受"><a href="#带出“真好”或“糟了”的感受" class="headerlink" title="带出“真好”或“糟了”的感受"></a>带出“真好”或“糟了”的感受</h2><p>“真好”：你的结局可以让读者感觉到希望，结局圆满。<br>“糟了”：一般恐怖电影经常用的，到最后一刻，用某个小细节透露出故事并没有就这样结束的感觉。</p>
<h2 id="选择结尾"><a href="#选择结尾" class="headerlink" title="选择结尾"></a>选择结尾</h2><ol>
<li>正向结局</li>
<li>模糊结局</li>
<li>负向结局</li>
</ol>
<p>好的模糊结局必须带给读者强烈的感受，而且感觉合理，还能激起讨论。<br>以这三种基本结局为基础，加入一些其他的元素——比如主角达成了目标，却导致了负向的结果，或者反一下，主角没有达成目标，却导致了正向的结果——可以增加结局的复杂度。<br>《卡萨布兰卡》中瑞克为了更远大的理想，放弃了自己一直渴望的目标。<br>在复杂的结局中，主角可能执意达成目标，但是会付出道德上的代价。或者做正确的选择，放弃最重要的目标，失去他从小说开头就一直渴望着的事物。</p>
<h2 id="意外结局"><a href="#意外结局" class="headerlink" title="意外结局"></a>意外结局</h2><p>让结局既在意料之外，又在情理之中。通过练习替结局想出可能的转折。<br>快写完初稿时，花30分钟头脑风暴，想出10个不同的结局。天马行空，越快越好，别坚持每个结局都要有道理。<br>审视你的答案，列出前4名，稍微加工，再选出最适合当转折的结局。<br>思考如何将这段情节加入原本的结局。回头检视你的小说，四处埋一些小线索，让你的转折结尾变得合理。</p>
<h2 id="收掉四散的梗"><a href="#收掉四散的梗" class="headerlink" title="收掉四散的梗"></a>收掉四散的梗</h2><p>如果这个梗很重要，加入一个主要场景。而小的梗可以让角色解释后来怎么了。</p>
<h2 id="不要急着结束"><a href="#不要急着结束" class="headerlink" title="不要急着结束"></a>不要急着结束</h2><p>要避免因为疲惫而匆匆写完结局。<br>建议：</p>
<ol>
<li>记录你的梦境。早上起床后把梦境记录下来，集合成梦境日记，从你的梦里寻找灵感。</li>
<li>把规模放大。在改稿的时候再删减结尾规模。</li>
<li>不要着急。</li>
</ol>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>场景是建构小说的单位。</p>
<blockquote>
<p>如果你将几个场景串起来，场景之间似乎有关联，就表示你会写小说了。</p>
</blockquote>
<p>有读者关心的角色，做读者非看不可的事情，靠紧张情绪和原创性赋予场景活力。尽力写好一个场景，隔一阵子再回来看看，改掉无聊的部分，尝试新的写法。</p>
<h2 id="场景的四个和弦"><a href="#场景的四个和弦" class="headerlink" title="场景的四个和弦"></a>场景的四个和弦</h2><h3 id="行动场景（主要和弦）"><a href="#行动场景（主要和弦）" class="headerlink" title="行动场景（主要和弦）"></a>行动场景（主要和弦）</h3><p>角色做事以达成主要目标时，就会产生行动。角色有场景内的目标，场景目标通常让读者更接近整个故事的目标。<br>场景需要有冲突。</p>
<h3 id="反应场景（主要和弦）"><a href="#反应场景（主要和弦）" class="headerlink" title="反应场景（主要和弦）"></a>反应场景（主要和弦）</h3><p>反应场景描写描写主角碰上事情时，他情绪上如何反应。主要描写的是主角的内心世界。文学小说里多一些。<br>可以将反应桥段放在行动场景的中间，让读者了解角色的感受。<br>角色作出行动，然后因为冲突而受挫，在他对当下的形势仔细思考后，决定下一项行动。</p>
<h3 id="铺陈场景（辅助，数量应该压到最低）"><a href="#铺陈场景（辅助，数量应该压到最低）" class="headerlink" title="铺陈场景（辅助，数量应该压到最低）"></a>铺陈场景（辅助，数量应该压到最低）</h3><p>铺陈场景存在是为了让随后的场景显得合理，每本小说都需要一定程度的铺陈。<br>在铺陈场景丢入一个问题，不必在乎问题大小，也许只是角色感到焦虑或与人争执，但也可以是必须立即处理的大问题。这样可以让铺陈场景显得不那么无聊。</p>
<h3 id="深化场景（辅助）"><a href="#深化场景（辅助）" class="headerlink" title="深化场景（辅助）"></a>深化场景（辅助）</h3><p>通常不会独立成一个场景，而是融入其他场景，加深读者对角色或设定的了解。</p>
<h2 id="场景需要的其他元素"><a href="#场景需要的其他元素" class="headerlink" title="场景需要的其他元素"></a>场景需要的其他元素</h2><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>引子负责从头吸引读者的注意，将他拉进故事的世界里。</p>
<ol>
<li>以问句开始场景，让读者想知道主角会怎么回答，接着介绍地点，然后又回到动作上。</li>
<li>以预告作为引子，隐晦地告知读者紧张的场景即将到来。</li>
<li>行动、叙述等等。<br>不论用什么作为引子，需要达成的效果是吸引读者的注意。<br>尝试不同的段落开始，改变方法，轮流使用对话、行动、叙述和预告，找到适合的引子。</li>
</ol>
<h3 id="紧张程度"><a href="#紧张程度" class="headerlink" title="紧张程度"></a>紧张程度</h3><p>使用冲突替场景注入紧张感。你的小说主线情节应该有无限冲突的可能，就连同伴之间的场景也应该有点紧张，否则只是交换情报，非常无聊。<br>除了事件本身带来的的紧张感，我们还应该呈现角色的担心和焦虑，创造一些情绪上的紧张感。<br>如果场景的紧张程度不够，请考虑删除这个场景。</p>
<h3 id="推手"><a href="#推手" class="headerlink" title="推手"></a>推手</h3><p>以推手替场景做结，让读者继续读下去。<br>常用的推手有：</p>
<ol>
<li>一句神秘的对话。</li>
<li>突然揭露的秘密。</li>
<li>重大的决定或誓言。</li>
<li>公开撼动情节的事件。</li>
<li>逆转或意外——让故事急转弯的新消息。</li>
<li>尚未解答的问题。<br>如果场景感觉结束的太赶，可以砍掉最后一两段，并非每个场景都需要写到合理的结尾为止，激起兴趣，创造未完的悬念。</li>
</ol>
<h3 id="紧张程度表（展示vs说明）"><a href="#紧张程度表（展示vs说明）" class="headerlink" title="紧张程度表（展示vs说明）"></a>紧张程度表（展示vs说明）</h3><blockquote>
<p>展示：<br>一听到“艾比”两个字，泪水马上涌上凯伦的眼眶，一直藏在心底的恐慌扑上表面，让她在原地动弹不得。她的下巴开始颤动，她试着尖叫，但喉咙一点声音都发不出来。</p>
</blockquote>
<p>对于紧张的场景，通过凯伦的生理反应，展示给读者看她的感受，让读者直接体会她的情绪。</p>
<blockquote>
<p>说明：<br>艾比拍拍手，突然大笑起来。凯伦唱歌唱得有些喘，她伸手在手机输入一串号码。关于她在机场对威尔讲话的态度，她感到有些不好意思。</p>
</blockquote>
<p>对于不那么紧张的段落，只需要告诉读者，她“不好意思”就可以了。</p>
<p>小说通常有几个重大场景，在大场景之间插入紧张程度不一的场景来调整布局。<br>先决定你的小说有哪些章节或场景不可或缺。<br>从0~10评估你写的每个场景，0是毫不紧张时，10是紧张过头。制作你的紧张程度表，利用紧张程度表取得平衡，不能一直让读者处于同一种情绪。<br>10：只有一两个场景需要达到这个程度，小心使用。<br>9~8：必备转折大场景。<br>7~6：冲突，重要的情绪，尖锐的对话，内心的煎熬。<br>5：适合由此开始场景，然后再慢慢往上升。<br>4~3：铺陈及其他过渡场景。要短。<br>2~1：最好不要，如果从此处开始，需要尽快往上爬。<br>0：删除。</p>
<h2 id="长篇分解练习"><a href="#长篇分解练习" class="headerlink" title="长篇分解练习"></a>长篇分解练习</h2><p>// TODO<br>地点  目标  冲突对象  推手<br>爱尔兰  离开爱尔兰  父亲、邻居  打伤父亲后离家</p>
<h1 id="复杂的情节"><a href="#复杂的情节" class="headerlink" title="复杂的情节"></a>复杂的情节</h1><h2 id="发展主旨"><a href="#发展主旨" class="headerlink" title="发展主旨"></a>发展主旨</h2><p>规划情节时，问问自己读者希望从你的作品中学到什么东西。用一行写出答案，这就是你的小说主旨。<br>一本小说应该只有一个隐藏信息，不过其中可以包含很多小信息。<br>角色负责承载主旨。先发展好你的角色，再将它们放入情节的世界里，让角色间的价值观相互冲撞。若角色能自然又热情的挣扎，这时故事的主旨就会不费吹灰之力地出现了。</p>
<h2 id="副线情节"><a href="#副线情节" class="headerlink" title="副线情节"></a>副线情节</h2><p>带出主旨的副线情节，传达隐藏信息，为故事增添了深度和意义。借此倡导生命中重要的事物。</p>
<h2 id="象征和主题"><a href="#象征和主题" class="headerlink" title="象征和主题"></a>象征和主题</h2><p>象征指的是意象，一个代表着其他事物的东西；主题是不断重复的画面或词汇。</p>
<blockquote>
<p>《末路记事》中，鲸鱼成为希望的象征。<br>《白夹竹桃》中，顽强、诱人又有毒的夹竹桃代表母亲，即使在狱中也试图控制她。“挣扎想照到一点光”的西红柿，象征阿斯特丽德本人。</p>
</blockquote>
<p>先写下富含感官细节的场景，再仔细研究你写的内容，找到一个东西，作为不断重复的意象。</p>
<h2 id="长篇小说"><a href="#长篇小说" class="headerlink" title="长篇小说"></a>长篇小说</h2><p>分段，每段都遵循LOCK原则。比如《雷蒙斯尼奇的不幸历险》。</p>
<h2 id="平行情节"><a href="#平行情节" class="headerlink" title="平行情节"></a>平行情节</h2><p>几条情节线同时进行，不同线的情节逐渐交错，最后结合在一起，带来震撼人心的高潮结局。如东野圭吾的《梦幻花》，由黄色牵牛花串起一群人。<br>每条情节线都要有意义。</p>
<h2 id="玩弄结构和风格以增添复杂性"><a href="#玩弄结构和风格以增添复杂性" class="headerlink" title="玩弄结构和风格以增添复杂性"></a>玩弄结构和风格以增添复杂性</h2><p>非线性叙事。《公民凯恩》中，主角查尔斯的生平故事由多位认识他的角色倒叙回想拼凑起来，因此情节在他人生的不同阶段跳来跳去，但每段回忆都让观众进一步窥见故事的全貌。</p>
<h1 id="情节中的角色弧线"><a href="#情节中的角色弧线" class="headerlink" title="情节中的角色弧线"></a>情节中的角色弧线</h1><p>角色的成长可以增添情节的深度。故事令人难忘的原因不是其中发生的事件，而是事件对角色的影响。</p>
<h2 id="角色弧线"><a href="#角色弧线" class="headerlink" title="角色弧线"></a>角色弧线</h2><p>角色弧线描述整个故事过程中角色的内心发展，角色在经历了这些事情之后的成长。<br>想想你的角色深信的主要理念，设计几个事件，教会他新的人生教诲。</p>
<blockquote>
<p>狄更斯 《圣诞颂歌》</p>
</blockquote>
<p>用外界压力去影响角色的看法，再由他的看法改变到主导态度的改变，从主导态度到价值观，价值观到核心理念，核心理念改变自我形象。要避免把角色的转变写得太明了。</p>
<ol>
<li>起始点，介绍角色出场，让读者了解它的内在层次。</li>
<li>设计影响事件。</li>
<li>加深影响的扰乱事件，刻画角色改变的瞬间。</li>
<li>事件的后果。</li>
</ol>
<h2 id="角色弧线表"><a href="#角色弧线表" class="headerlink" title="角色弧线表"></a>角色弧线表</h2><p>做一张表记录角色转变，涵盖故事中的主要桥段。每个关键时刻都能描述角色的内心世界。<br>角色开始如何？结尾变得怎么样？中间遇到了什么外界压力使它发生了改变？<br>// TODO 表格<br>犯罪，羁押，审判及判刑，牢中。<br>无怜悯心，愤世嫉俗<br>中间遇见了什么事，什么人，使他发生了什么改变？以什么方式反映他的改变？<br>发现世上需要同情心。</p>
<h1 id="情节编排手法"><a href="#情节编排手法" class="headerlink" title="情节编排手法"></a>情节编排手法</h1><ol>
<li>LOCK系统</li>
<li>写好封底文案——说服读者买书的营销文案，在封底文案中加入情节元素，小说的轮廓便会越来越明显。反复推敲这段文字，直到你自己读了都兴奋不已。</li>
</ol>
<h2 id="不大纲人的方法"><a href="#不大纲人的方法" class="headerlink" title="不大纲人的方法"></a>不大纲人的方法</h2><ol>
<li>定下写作目标，最好每天都写。每次写作时完成当天的写作目标前都不应该离开书桌，有灵感了就多写一点，自行判断最适合你的字数。以及，可以尝试一早起来写作。</li>
<li>每次先读前一天写的内容，不需要做重大改变，只需要解决小问题或增加一些内容。<br>读前一天的内容时，如果有想加的，在旁边圈圈备注从a开始。动笔时，先从要加的部分开始写，新的角色、新的情节等等。</li>
<li>每周花一天记录情节走向。使用情节表格记录一下你写了什么，故事中的日期和时间。</li>
</ol>
<h2 id="大纲人的方法"><a href="#大纲人的方法" class="headerlink" title="大纲人的方法"></a>大纲人的方法</h2><h3 id="索引卡系统"><a href="#索引卡系统" class="headerlink" title="索引卡系统"></a>索引卡系统</h3><ol>
<li>初始阶段。记下你的场景点子，不用担心结构。</li>
<li>先想结尾。积累了很多场景点子，处理好了LOCK元素，写好了封底文案，此时想想故事的结局。把想法写在索引卡上，越详细越好，这样可以让你有明确的写作方向。</li>
<li>主要场景。开头、扰乱事件和两扇无法折返的门组成了4个主要场景。尽可能给这4个主要场景添加细节，写在索引卡上，但是不要花太多时间。</li>
<li>布局。排列索引卡，开头场景的索引卡放在左边，高潮结尾往右，填满情节。越靠近最后一张卡，场景越紧绷。如果场景之间出现空隙，放几张空白索引卡，通过布局试着感受一下故事的节奏。</li>
<li>玩一下索引卡，需要增加或者删除都行。如果多主角或者多条副线情节，可以用不同颜色区分，将不同颜色的索引卡排列好，让每条情节线互相平行呈现，或者是情节线和角色心路历程线平行呈现。</li>
<li>大致确定场景顺序后给索引卡编号，然后打乱。两张两张看，情节之间有没有什么联系？</li>
<li>动笔写。每写3、4个场景，就把索引卡重新排列一次，看有没有新的发现或者新的想法。如果需要，可以写新的索引卡，更改排列顺序，增加原本的内容。</li>
</ol>
<h3 id="头灯系统"><a href="#头灯系统" class="headerlink" title="头灯系统"></a>头灯系统</h3><p>边写作边定大纲，知道大致流程，写好封底文案、开头和结尾。</p>
<ol>
<li>这个场景结尾时角色的情绪状况如何？他在下个场景会如何反应？</li>
<li>我的角色接下来需要采取什么行动？</li>
<li>接下来有哪个重要场景需要先用转折场景铺陈?</li>
<li>我需要加入新角色吗？刚写完的场景中，有哪个角色暗示了其他情节发展？</li>
</ol>
<h3 id="叙事大纲"><a href="#叙事大纲" class="headerlink" title="叙事大纲"></a>叙事大纲</h3><p>简明扼要地写完你的故事。</p>
<h3 id="戴维·默莱尔方法"><a href="#戴维·默莱尔方法" class="headerlink" title="戴维·默莱尔方法"></a>戴维·默莱尔方法</h3><p>深入故事点子，了解你为什么想写这个故事。<br>写一封信给自己，问自己有关情节点子的问题。为什么写这个故事？理由只有这样吗？他的旅途目的是什么？女儿为什么这么重要？他为什么这么依赖麦迪？还有别的原因吗？<br>可以在写作过程中每天多写一点，自问自答。加深你对故事题材的了解。</p>
<h3 id="博格人大纲"><a href="#博格人大纲" class="headerlink" title="博格人大纲"></a>博格人大纲</h3><p>把你的小说当做你要开发的一个软件，对它进行需求分析、概要设计、详细设计和编码，最后细修所有细节。</p>
<ol>
<li>定义LOCK元素。</li>
<li>撰写封底文案。</li>
<li>列出小说的整体结构，三幕和两扇门。</li>
<li>雕琢你的角色，建立角色表格，记下所有角色的相关信息。<br>// TODO 角色表格<br>姓名，外表描述，身份，目标和动机，秘密，激起的情绪。</li>
<li>每幕摘要，大致描述每一幕写了啥</li>
<li>每一章的单句摘要。注意定下合理的时限。</li>
<li>每一章的完整摘要。拉长成每个场景的短摘要，时间、地点、相关角色都记下来。</li>
<li>休息一下</li>
<li>动笔写小说。如果写到你认为需要脱离大纲了，请修改大纲，重复上述步骤。</li>
<li>修改你的小说</li>
</ol>
<h1 id="修改你的情节"><a href="#修改你的情节" class="headerlink" title="修改你的情节"></a>修改你的情节</h1><h2 id="写出初稿"><a href="#写出初稿" class="headerlink" title="写出初稿"></a>写出初稿</h2><p>先写出初稿，一直写。按照前面的方法，一路写到结尾。可以在继续往下写之前修订前一天的内容，但请抗拒修改更多的冲动。</p>
<h2 id="沉淀一下"><a href="#沉淀一下" class="headerlink" title="沉淀一下"></a>沉淀一下</h2><p>忘了你的小说，去做点别的事情。两三周后开始改这篇稿子。</p>
<h2 id="做好心理准备"><a href="#做好心理准备" class="headerlink" title="做好心理准备"></a>做好心理准备</h2><p>要让自己对改稿兴奋起来。</p>
<ol>
<li>按照计划改稿，会让我的小说更稳健。</li>
<li>依照计划改稿很好玩，因为我知道每一步该怎么做。</li>
<li>改稿才能分出真正的专家和自我感觉良好的门外汉的差异。</li>
<li>我想成为专家。</li>
</ol>
<h2 id="读一遍你的初稿"><a href="#读一遍你的初稿" class="headerlink" title="读一遍你的初稿"></a>读一遍你的初稿</h2><p>将印出来的初稿带到安静的地方读一遍，尽快读完。别太在意细节，只注意故事全貌和整体感觉，可以写简短的笔记，但不要停下来太长时间。<br>读初稿可用的方法：</p>
<ul>
<li>打勾表示我觉得这页的情节太拖沓。</li>
<li>用括号括住我看不懂的句子。</li>
<li>在页面边缘画圈，表示我觉得这段需要增加内容。 </li>
<li>画问号表示我认为这段可能需要删减。</li>
<li>先从大问题着手，再考虑小细节。</li>
</ul>
<h3 id="我想讲什么样的故事？"><a href="#我想讲什么样的故事？" class="headerlink" title="我想讲什么样的故事？"></a>我想讲什么样的故事？</h3><p>分析你的故事并自问下列问题：</p>
<ul>
<li>读初稿的时候，有哪些地方让你感到惊讶吗？你觉得原因是什么？其中有你想进一步发展的元素吗？</li>
<li>角色到底在故事里做什么？他们身上还有尚未完全探讨的议题吗？</li>
<li>检视拖戏的段落，因为你可能在这些段落逃避处理更深层的议题。这些时候角色到底在想什么？他们当下的兴趣、挫折与欲望是什么？</li>
<li>想象另一条情节线，如果在故事中的几个时点让情节转了弯，你的故事会有何不同？你未必要照着岔路走，但这些旁枝或许有些元素可以导入主线情节。<br>如果你对上述问题的答案有所共鸣，请试着替你的情节写一份摘要，但加入上述问题建议的额外元素。写出两三页的情节纲要，再修改纲要，加入新的想法、角色和主题，越修改，你就越接近真正想说的故事。</li>
</ul>
<h3 id="故事结构。"><a href="#故事结构。" class="headerlink" title="故事结构。"></a>故事结构。</h3><ul>
<li>你的故事自然以三幕呈现吗？</li>
<li>主角的世界有马上遭到扰乱吗？</li>
<li>第1扇无法折返的门出现在故事开始1/5之前吗？</li>
<li>主角面临的代价够高吗？</li>
<li>第2扇无法折返的门有带领主角走向高潮结尾吗？</li>
<li>故事节奏符合你的打算吗？如果你写的是动作小说，情节有不断前进吗？如果是角色导向的小说，每个场景的深度够吗？</li>
<li>角色有明确的强烈动机吗？</li>
<li>所有巧合都有先铺陈吗？</li>
<li>小说一开始就有事件发生吗？你有在场景中丢入问题并放入角色让他面对改变或威胁吗？</li>
<li>时间线合理吗？</li>
<li>情节发展是否太容易预测了？场景顺序是否需要重新调整？</li>
</ul>
<h3 id="关于主角"><a href="#关于主角" class="headerlink" title="关于主角"></a>关于主角</h3><ul>
<li>主角令人印象深刻吗？引人注意吗？能带领读者一路走到结尾吗？主角必须仿佛从纸面上活过来，你的主角是这样吗？</li>
<li>主角有避开老梗设定吗？他能让读者感到惊讶吗？她有什么特别？</li>
<li>主角的目标够重要吗？</li>
<li>随着故事发展，主角如何成长？</li>
<li>主角如何展现内在力量？</li>
</ul>
<h3 id="关于对手"><a href="#关于对手" class="headerlink" title="关于对手"></a>关于对手</h3><ul>
<li>对手角色有趣吗？</li>
<li>它的设定完整，不只是样板角色吗？</li>
<li>他的行为（至少在他心中）合理吗？</li>
<li>他至少跟主角一样强，或比主角更强吗？</li>
</ul>
<h3 id="关于情节附着元素"><a href="#关于情节附着元素" class="headerlink" title="关于情节附着元素"></a>关于情节附着元素</h3><ul>
<li>主角和对手之间的冲突对双方都非常必要吗？</li>
<li>为什么他们不能放手离开？哪些元素将他们绑在一起？</li>
</ul>
<h3 id="关于场景"><a href="#关于场景" class="headerlink" title="关于场景"></a>关于场景</h3><ul>
<li>重大场景的规模够大吗？让人吃惊吗？你可以把这些场景发挥到极致，写的更独创、更难以预测吗？</li>
<li>场景中的冲突够吗？</li>
<li>哪个场景最不起眼？把他删了，于是你有了新的最不起眼场景，请考虑也把他删了。</li>
<li>为了让故事不断前进，你还可以删掉什么？</li>
<li>高潮场景是否来的太早（因为你写累了）？你能将高潮场景发挥到极致，写得更精彩吗？设下定时炸弹，让读者紧张不已。</li>
<li>你需要新的小副线情节，来支撑拖戏的中段吗？</li>
</ul>
<h3 id="关于配角"><a href="#关于配角" class="headerlink" title="关于配角"></a>关于配角</h3><ul>
<li>他们在剧中的目的是什么？</li>
<li>这些角色独特又生动吗？</li>
</ul>
<h2 id="沉思你写了什么"><a href="#沉思你写了什么" class="headerlink" title="沉思你写了什么"></a>沉思你写了什么</h2><p>花5~7天，四处走走，想想你的初稿。每天醒来写点和小说有关的笔记，然后读所有的笔记最后一次。</p>
<h2 id="写第2份稿"><a href="#写第2份稿" class="headerlink" title="写第2份稿"></a>写第2份稿</h2><p>大幅度重写你的故事。</p>
<h2 id="精炼"><a href="#精炼" class="headerlink" title="精炼"></a>精炼</h2><p>把稿子放一放，放一周，以全新的观点读一遍，缩减或删除场景，加深角色内涵，加长或修改副线情节。<br>精炼情节，让角色、情节、场景和主旨完全按照你要的方式呈现。<br>“杀掉你的最爱”，对于你最喜欢的话，想一下它是有助于情节，还是会让读者暂时出戏。</p>
<h2 id="润饰"><a href="#润饰" class="headerlink" title="润饰"></a>润饰</h2><p>重新审视稿子，先读一遍，专注在场景上，并自问一下问题：</p>
<ul>
<li>你一开始就勾起了读者的兴趣吗？</li>
<li>悬疑场景是否拉的够长，将紧张感推到极点？</li>
<li>哪些信息可以晚点再揭露？这样读者会越读越紧张，保证有利无害。</li>
<li>故事中的惊喜够多吗？</li>
<li>角色反应场景是否既有深度又有趣？</li>
<li>检查章节结尾的“继续读推手”。</li>
<li>哪些地方可以用行动取代角色感受的描述？</li>
<li>你有使用诉诸视觉、刺激感官的字眼吗？（展示场景）<br>接着再读一遍，这次专注在对话上。</li>
<li>只要删掉句中几个字，通常就能加强对话。</li>
<li>写对话时，请不要偏心。别把好对话都派给同一个角色。</li>
<li>好的对话能创造紧张情绪，别让读者感到惊讶。将对话当做一场游戏，参赛者都亟于赢过对方。</li>
<li>即使是同伴之间的对话，你也能增加更多冲突元素吗？</li>
</ul>
<h1 id="情节模式"><a href="#情节模式" class="headerlink" title="情节模式"></a>情节模式</h1><p>了解各个情节模式的结构，结合不同的情节模式去创造全新的情节类型。</p>
<h2 id="远征"><a href="#远征" class="headerlink" title="远征"></a>远征</h2><h3 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>主角在原始世界感到不完整</li>
<li>他寻找的对象一定极为重要</li>
<li>一定有重重难关阻挡主角找到目标</li>
<li>远征旅途最后应该让主角有所改变</li>
</ul>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>介绍主角，让读者看到他内心的不足，而远征旅途能补足他的缺憾。<br>第1扇无法折返的门出现在主角踏上远征的时候。<br>系列事件将情节分成明显的篇章。<br>第2扇门通常是重大危机或挫败，或是某种发现或重大线索，将主角带进最后一幕。<br>远征情节模式模拟了每个人的人生旅途。充满挑战，经历挫折或成功，容易撼动人心。</p>
<h2 id="复仇"><a href="#复仇" class="headerlink" title="复仇"></a>复仇</h2><p>复仇情节模式描述了原始部落民族的生存方式。复仇是一种痛彻心扉的模式，因此情节情绪非常激昂。</p>
<h3 id="基本元素-1"><a href="#基本元素-1" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>主角应该值得同情</li>
<li>主角或其近亲通常不是因为犯错而受难，或者犯的错远小于受的难</li>
<li>对于复仇的渴望，会影响主角的内心世界</li>
</ul>
<h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p>首先介绍主角及原始世界，此时原始世界一定是在一个舒适的状态。<br>紧接着有人受难，主角度过了一定的煎熬期，此时需要加强读者与主角的联结。<br>此时第一扇无法折返的门出现，主角发现是谁陷害他，或者是想到方法如何报复害他的人。主角的目标是复仇，恢复秩序，恢复正义的平衡。<br>发生系列冲突。<br>出现第2扇门，主角和对手走向决战。</p>
<h2 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h2><h3 id="基本元素-2"><a href="#基本元素-2" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>相爱</li>
<li>有事情拆散他们</li>
<li>排除万难在一起或者永远分离</li>
<li>经历这些之后，其中一人或双方都有所成长</li>
</ul>
<h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>男孩遇见女孩，男孩失去女孩，男孩得到女孩。或者遇见，然后交恶，发生系列事情，最后在一起。适合作为副线情节。</p>
<h2 id="冒险"><a href="#冒险" class="headerlink" title="冒险"></a>冒险</h2><blockquote>
<p>《堂吉诃德》</p>
</blockquote>
<p>对于冒险情节模式，要让读者希望他们能跟你的主角一样。</p>
<h3 id="基本元素-3"><a href="#基本元素-3" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>和远征不同，冒险情节模式踏上旅途的目的不是寻找某种东西，而是对冒险本身的渴望</li>
<li>沿途会碰上各种有趣的角色和状况</li>
<li>结束冒险后通常会对自己的内心或生活有更深的体悟</li>
</ul>
<h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><p>介绍主角，主角对现在的世界不满，所以出发。主角经历了系列历险，最后走向结局。角色的转变很重要。</p>
<h2 id="追逐"><a href="#追逐" class="headerlink" title="追逐"></a>追逐</h2><blockquote>
<p>《悲惨世界》、《猫鼠游戏》、《完美的世界》</p>
</blockquote>
<h3 id="基本元素-4"><a href="#基本元素-4" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>有人需要逃跑</li>
<li>有人在追，处于义务或者是偏执。可以是主角或对手。</li>
<li>你追我跑的形式，往往来自于天大的误解。</li>
</ul>
<h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><p>先要铺陈读者对主角的同情，但主角也需要一些缺点，免得读者过分同情它。<br>在你追我赶的过程中促使主角改变，更了解自己。<br>最后故事结束，胜负已分。</p>
<h2 id="永不妥协"><a href="#永不妥协" class="headerlink" title="永不妥协"></a>永不妥协</h2><blockquote>
<p>《飞越疯人院》、《正午》、《十二怒汉》</p>
</blockquote>
<h3 id="基本元素-5"><a href="#基本元素-5" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>主角代表了社群的道德准则</li>
<li>对手比主角强，并对主角的社群产生威胁</li>
<li>主角靠启发其他社群成员而获胜</li>
<li>主角可能靠自我牺牲来启发他人</li>
</ul>
<h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><p>主角以英雄之姿出场，备受景仰。<br>主角的世界遭到对手威胁。主角主动对抗对手。<br>冲突结束，带出结局。</p>
<h2 id="遗世独立"><a href="#遗世独立" class="headerlink" title="遗世独立"></a>遗世独立</h2><blockquote>
<p>《永不让步》、《卡萨布兰卡》</p>
</blockquote>
<p>与永不妥协的情节模式不同的是，遗世独立的情节模式中，主角一心想要归隐，但是被环境所迫，所以不得不有所作为。</p>
<h3 id="基本元素-6"><a href="#基本元素-6" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>主角不是英雄，不想与周遭世界挂钩，只想依照自己的道德准则过活</li>
<li>发生了某件事，把它拉入大规模的冲突当中</li>
<li>主角需要决定是否要挺身而出，</li>
<li>是缩回去，还是进入社会。</li>
</ul>
<h2 id="权力"><a href="#权力" class="headerlink" title="权力"></a>权力</h2><blockquote>
<p>《教父》</p>
</blockquote>
<p>专注于主角的崛起与陨落，或是描述崛起需要付出的道德代价。</p>
<h3 id="基本元素-7"><a href="#基本元素-7" class="headerlink" title="基本元素"></a>基本元素</h3><ul>
<li>劣势开局</li>
<li>逐渐崛起</li>
<li>获得权力需要付出道德代价</li>
<li>或者放弃权力，重拾良心</li>
</ul>
<h2 id="寓言"><a href="#寓言" class="headerlink" title="寓言"></a>寓言</h2><blockquote>
<p>《动物庄园》George Orwell、《魔戒》托尔金、《纳尼亚传奇》刘易斯、《白鲸记》、《荒野的呼唤》。</p>
</blockquote>
<p>寓言情节模式中角色都代表着特定的观念，故事中的事件，则要呈现这些观念造成的影响。</p>
<h1 id="常见的情节问题及解决方法"><a href="#常见的情节问题及解决方法" class="headerlink" title="常见的情节问题及解决方法"></a>常见的情节问题及解决方法</h1><h2 id="场景太平淡"><a href="#场景太平淡" class="headerlink" title="场景太平淡"></a>场景太平淡</h2><p>永远要确保场景有张力。<br>每个场景都应该有个中心桥段（热点），聚焦在特定的瞬间或对话。如果场景没有这个热点，或许就该删掉。<br>找到热点，圈起来。重读热点前的段落，画底线，标出非必要的句子。继续往前，删掉场景高点前所有非必要的句子。</p>
<h2 id="倒叙处理不好"><a href="#倒叙处理不好" class="headerlink" title="倒叙处理不好"></a>倒叙处理不好</h2><p>倒叙容易打断叙事的前进动感。需要考虑：</p>
<ol>
<li>必要性。如果信息可以在当下的场景中呈现，就不要使用倒叙。</li>
<li>功能。确定倒叙段落能构成完整的场景，紧凑又充满冲突，别只是一股脑丢出资讯。</li>
<li>写法。在开始倒叙时，在当下的场景中，加入一个强烈刺激感官的细节，触动倒叙开始。结束时再将焦点拉回感官刺激。看到什么想到了什么，然后开始倒叙。</li>
<li>小心写。“曾经/当时”这种词语一旦进入倒叙场景就不要再用了。</li>
<li>其他倒叙写法。可以考虑回想，而不是倒叙场景。回想的长度很短，让你可以在当下的场景中丢入有关过去的信息。使用角色的心理活动带给读者信息。</li>
</ol>
<h2 id="岔路"><a href="#岔路" class="headerlink" title="岔路"></a>岔路</h2><p>对情节有了另一种思路，与原先的构思相悖。<br>可以继续原先的构思，也可以随手写下接下来几个场景的大纲，看接下来会如何发展。如果故事线比原先的好，可以考虑修改大纲。如果相差太大也可以记录下来备用。</p>
<h2 id="为了情节抵抗角色"><a href="#为了情节抵抗角色" class="headerlink" title="为了情节抵抗角色"></a>为了情节抵抗角色</h2><p>听到角色的声音，你可以以角色的角度写下自己的随笔，人生信念等。</p>
<blockquote>
<p>练习：<br>请闭上眼睛，让角色鲜明的出现在眼前。替他盛装打扮，出席一场社交盛会。在那儿他会碰到一些老朋友，也会碰到他的世界中最有权势的一群人。<br>他打开门，走进宴会。然后发生了什么事？在脑海中观赏这个场景，聆听现场的声音，闻现场的味道，让场景越真实越好。<br>到了某个阶段，找一个人走到主角面前，把饮料泼在他脸上，他如何反应？他周围的人怎么说、怎么做？<br>让场景自行发展，然后带你的角色回家。他跟家里的人或他的狗讲述宴会上发生的事，他的感受如何？请深入探讨他的情绪。<br>在写作的过程中随时可以做这个练习。</p>
</blockquote>
<h2 id="陷入苦战"><a href="#陷入苦战" class="headerlink" title="陷入苦战"></a>陷入苦战</h2><ol>
<li>回头。看前几页是否略显枯燥，没有切入重点，你忘了主角的目标，没有任何功能的角色对话？回溯，直至找到感觉不错的段落，自问之后的内容是否可以删掉，并想出比现有内容更好的场景。</li>
<li>跳转。把角色顺着时间线往后挪，移到不同的地点，接触不同的人，让他们面临某些问题。先想出一个吸引人的场景，再思考如何与现在的情节相连，未来场景的元素可以拿来用，中间过程的元素也能纳入到未来场景中。</li>
<li>随便翻阅字典，挑两个字/词连起来，写的东西对小说内容有什么帮助吗？</li>
</ol>
<h2 id="脑袋短路"><a href="#脑袋短路" class="headerlink" title="脑袋短路"></a>脑袋短路</h2><ol>
<li>充电。先休息一天，然后按照小说中段的建议突破障碍，你可能会觉得自己写在纸上的每个字都是垃圾，但你要准许自己写烂。先把东西写出来再润饰，这才是写作的黄金准则。</li>
<li>重新体验你的场景。写完一个场景后，回头尝试体验角色的情绪，演出你创造的角色。鲜明地想象场景，加强体验的过程，让事件发生，让角色自由发挥。</li>
<li>想起你的愿景，你的小说到底想表达什么？对于娱乐小说，自问哪些事物让你感动，然后把它们放进小说。以及，你身为作家的愿景是什么？</li>
</ol>
<h1 id="关于情节和结构的建议与工具"><a href="#关于情节和结构的建议与工具" class="headerlink" title="关于情节和结构的建议与工具"></a>关于情节和结构的建议与工具</h1><h2 id="展示和说明"><a href="#展示和说明" class="headerlink" title="展示和说明"></a>展示和说明</h2><p>小说制胜的黄金准则：只展示，别说明。</p>
<blockquote>
<p>达希尔·哈米特的《马耳他之鹰》，将情节描绘得如同荧幕上播放的电影。</p>
</blockquote>
<p>我们在写作时需要避开条列式的形容，要看到这些特质通过行为展现在纸面上。</p>
<h2 id="连续剧技巧"><a href="#连续剧技巧" class="headerlink" title="连续剧技巧"></a>连续剧技巧</h2><ol>
<li>不要太快完结事件，通过问问题和延后提供答案，维持过程中读者的兴趣。</li>
<li>如果情节允许，在读者意犹未尽的时候切去另一个场景，再用同样的方式跳离这个场景。</li>
</ol>
<h2 id="情节笔记"><a href="#情节笔记" class="headerlink" title="情节笔记"></a>情节笔记</h2><blockquote>
<p>每天开始写作前先写笔记，跟自己对话。<br>——苏·格拉夫顿</p>
</blockquote>
<h2 id="雷蒙德·钱特勒之持枪男子绝招"><a href="#雷蒙德·钱特勒之持枪男子绝招" class="headerlink" title="雷蒙德·钱特勒之持枪男子绝招"></a>雷蒙德·钱特勒之持枪男子绝招</h2><p>假如他写的故事开始拖戏，把一名持枪男子丢入该场景，逼出新的想法与联结。<br>我们在写作时，要学会利用意外元素协助突破当前困境。选择最有创意的意外元素，开始重写。不要马上解释意外的内容，稍后再解释。</p>
<h2 id="第二章大翻转"><a href="#第二章大翻转" class="headerlink" title="第二章大翻转"></a>第二章大翻转</h2><p>直接砍掉第1章，从第2章开始。稍后必要的时候，再丢入第1章的信息。<br>头一章通常包含太多的解释段落，第2章通常是行动场景，充满动感，吸引读者。</p>
<ol>
<li>随便挑一本小说，翻到第2章你会感兴趣吗？</li>
<li>把你的小说前两章颠倒过来</li>
<li>必要时候改新的第1章，让情节维持合理</li>
<li>考虑把原来的第一章完全删掉。</li>
</ol>
<h2 id="回头检查技巧"><a href="#回头检查技巧" class="headerlink" title="回头检查技巧"></a>回头检查技巧</h2><ul>
<li>凭着热情写完第1幕</li>
<li>把稿子晾几天</li>
<li>重读第1幕，看看你写了什么<br>对你的稿子进行分析：<br>这样够了吗？我还需要什么？我能预期接下来的故事都充满冲突吗？我喜欢主角吗？我会迫不及待想继续写剩下的部分吗？如果不会，为什么？我能更改哪些部分以让我提起兴趣呢？<br>作出决定，然后一口气把剩余的初稿写完。</li>
</ul>
<h2 id="反预测"><a href="#反预测" class="headerlink" title="反预测"></a>反预测</h2><p>读者可能认为情节会这样发展，但是我们偏偏不要去这样安排。<br>每次写到主要转折点时，提醒自己列出各种可能发展。可以定大纲时就开始列，或者边写边列。</p>
<h2 id="如何显著改善情节编排技巧"><a href="#如何显著改善情节编排技巧" class="headerlink" title="如何显著改善情节编排技巧"></a>如何显著改善情节编排技巧</h2><p>投入8~12个星期的时间练习：</p>
<ol>
<li>挑选6本与你的作品类型相同的小说，不管读过或没读过都可以。</li>
<li>定好这8~12个星期的练习时程表，按表操练。留时间把6本小说先读一遍，接着按照以下的说明，花大约12个小时分析这些作品、做笔记，最后还需要6个多小时来反思。</li>
<li>读第1本书，放轻松去读，并站在读者的角度来看。等你读完，花一天时间想想这本书。你喜欢吗？你觉得感动吗？角色让人印象深刻吗？情节紧凑吗？你觉得有些情节拖沓吗？思考这类问题，并简单记下答案。</li>
<li>用同样的方法把每本书读完。</li>
<li>回到第1本书，这个步骤需要用到索引卡。以场景为单位（一章可能有超过一个场景），在第1张索引卡右上角记下1，这样如果不小心把卡片打散了，还能排回正确的顺序。使用索引卡，记下每个场景的信息：场景设定、叙事角色、两行的场景摘要、场景类型（行动、反应、铺陈、深化等）。场景结尾让你想继续读吗？为什么？</li>
<li>重复6本。</li>
<li>随便挑一沓索引卡。快速翻阅卡片，阅读所写的信息，想起那个场景，然后换下一张。你几乎等于在脑中快速播放一部电影，用这个方法读完这本小说的情节。重复6本。</li>
<li>挑一沓索引卡，依序排在地上。找出开头、中段、结尾必要的几个桥段，以及构成两扇门的场景。有空的时候也拿其他几本小说的索引卡练习。</li>
</ol>
<h2 id="反转“来复枪原则”"><a href="#反转“来复枪原则”" class="headerlink" title="反转“来复枪原则”"></a>反转“来复枪原则”</h2><blockquote>
<p>来复枪原则：如果第1幕开始时，墙上挂了一把来复枪，那剧中某处一定要用到这把枪。</p>
</blockquote>
<p>在写作的任何阶段都可以埋梗</p>
<h2 id="水牛奔腾技巧"><a href="#水牛奔腾技巧" class="headerlink" title="水牛奔腾技巧"></a>水牛奔腾技巧</h2><p>不要去控制你的想象力，放任思绪奔腾，但是要让它们朝着你的目标方向前进。</p>
<h2 id="你的作家笔记本"><a href="#你的作家笔记本" class="headerlink" title="你的作家笔记本"></a>你的作家笔记本</h2><p>创作小说时，将手边的信息依序整理在作家笔记本里。</p>
<ol>
<li>情节点子。</li>
<li>角色。关于角色的描述、基本信息、角色的动机。他在故事里希望得到什么？最关心什么？过去有哪些事件在影响他们？这些角色真的想要什么？为什么他们达不到目标？<br>角色的名字：分开列出名和姓，偶尔在报道或在别的地方看见了，需要的时候将它们组合。</li>
<li>研究。搜集相关资料，记下你的研究结果。你的小说需要有什么背景知识？注意细节的刻画。比如某个年代，某一类人穿什么衣服。</li>
<li>情节摘要。每写完一章用一两句话概括摘要内容，然后贴上头一两段和结尾一两段内容（有条件就打印出来归档，没条件就只写概要）。情节摘要用于后期检视你的文章。</li>
<li>问题。问问题能让你想出必要的细节。<ol>
<li>情节——这里能发生什么意外事件？</li>
<li>角色——莱尔需要什么技能，才会做建筑模型？</li>
<li>研究——美国联合服务组织的女服务员在1943年穿什么衣服？</li>
</ol>
</li>
</ol>
<h2 id="基本情节建议"><a href="#基本情节建议" class="headerlink" title="基本情节建议"></a>基本情节建议</h2><h3 id="推理小说"><a href="#推理小说" class="headerlink" title="推理小说"></a>推理小说</h3><p>想出你的凶手是谁，动机可能是什么。然后建构出他犯下的复杂谋杀或重案，把案子设计的生动复杂又真实。能在脑中清楚地看到画面，有些作家甚至会画图或制作小布景来呈现场景的样貌。<br>然后思考情节中要丢入哪些线索，要把哪些角色当成嫌犯。</p>
<h3 id="惊悚小说"><a href="#惊悚小说" class="headerlink" title="惊悚小说"></a>惊悚小说</h3><p>推理小说是读者串联起一条条线索，试图拼凑发生了什么事；而惊悚小说像有把虎头钳逐渐掐紧主角的脖子。<br>剧中的事件越来越紧迫，将主角逼至绝境。故事发展到一个段落，主角必须击败对手。可以从这个场景开始写，尽可能充满创意地建构出主角和对手之间的最终高潮战役。<br>先想好结尾能指引你写作的方向，但也别忘了动机。</p>
<h3 id="文学小说"><a href="#文学小说" class="headerlink" title="文学小说"></a>文学小说</h3><p>文学小说强调氛围和质感，你希望给读者最后留下什么印象？</p>
<h3 id="爱情小说"><a href="#爱情小说" class="headerlink" title="爱情小说"></a>爱情小说</h3><p>目标是撮合恋人，情节绕着目标打转。<br>尽量拆散两人才能制造紧张和挫折感。编排情节时可以想想有多少办法能阻止男女主角在一起，努力加入新鲜的元素。<br>角色背景很适合加入原创内容，你可以赋予角色独一无二的黑暗秘密。</p>
<h3 id="实验性小说"><a href="#实验性小说" class="headerlink" title="实验性小说"></a>实验性小说</h3><p>尝试新事物，凭着实验冲动写完初稿。<br>可以尝试捕捉睡梦中飘走的点子。</p>
<h3 id="科幻和奇幻小说"><a href="#科幻和奇幻小说" class="headerlink" title="科幻和奇幻小说"></a>科幻和奇幻小说</h3><p>此类小说适合用来阐述作者的想法。你可以创造一个不存在的世界，来表达你对当今世界的看法。但是不要迷失在自己想象的宏大愿景中，要回归基本，规划好情节。<br>你必须同时努力证明书中世界的规则，又要将这些规则自然的融入情节。在科幻元素之外，还需要赋予主角一段丰富的人生。</p>
<h1 id="撰写你的封底文案"><a href="#撰写你的封底文案" class="headerlink" title="撰写你的封底文案"></a>撰写你的封底文案</h1><h2 id="填入小说的相关信息"><a href="#填入小说的相关信息" class="headerlink" title="填入小说的相关信息"></a>填入小说的相关信息</h2><p>主角名称：<br>主角职业：<br>第一扇无法折返的门：<br>对手：<br>为何主角和对手对立？双方面临的代价分别是？<br>主要冲突发生在何处？<br>故事问题是什么？<br>你希望读者的感受是什么样的（毛骨悚然、发人深省或激励人心，等等）？</p>
<h2 id="随笔写30分钟"><a href="#随笔写30分钟" class="headerlink" title="随笔写30分钟"></a>随笔写30分钟</h2><p>先别管顺序或遣词用字，只要记住步骤一的每项元素，随笔去写。不要停下来纠正自己，尽情将文字投注到纸面上。</p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>开头先写主角的名称和现况，谁是一名什么？他怎么样？用一两句话描述主角的背景以及他所在的世界。<br>以“突然”或“然而”开始，然后填入将主角推进第2幕的主要转折点/第1扇门。用两三句话描述第2幕的内容。<br>以“现在”开始，写一个描写行动的句子，或连续提出几个问题。</p>
<blockquote>
<p>茉莉能得到他的遗产吗？还是他会遭到无以名状的致命力量阻挠呢？这些事件会摧毁蒙太鸠家族吗？</p>
</blockquote>
<h2 id="修饰"><a href="#修饰" class="headerlink" title="修饰"></a>修饰</h2><p>修饰成品，成品字数应该介于250~500字之间（中文五百到一千？）。</p>
]]></content>
      <categories>
        <category>书籍</category>
        <category>写作</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>笔记</tag>
        <tag>写作方法</tag>
      </tags>
  </entry>
</search>
